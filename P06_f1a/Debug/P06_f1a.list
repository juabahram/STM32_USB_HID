
P06_f1a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800b358  0800b358  0001b358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b440  0800b440  00020188  2**0
                  CONTENTS
  4 .ARM          00000008  0800b440  0800b440  0001b440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b448  0800b448  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b448  0800b448  0001b448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b44c  0800b44c  0001b44c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  0800b450  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000de4  20000188  0800b5d8  00020188  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f6c  0800b5d8  00020f6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d543  00000000  00000000  000201fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000431f  00000000  00000000  0003d73e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a28  00000000  00000000  00041a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001411  00000000  00000000  00043488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b651  00000000  00000000  00044899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020c72  00000000  00000000  0006feea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f70a9  00000000  00000000  00090b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000076a0  00000000  00000000  00187c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  0018f2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000188 	.word	0x20000188
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b340 	.word	0x0800b340

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000018c 	.word	0x2000018c
 80001cc:	0800b340 	.word	0x0800b340

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2iz>:
 800083c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000844:	d215      	bcs.n	8000872 <__aeabi_d2iz+0x36>
 8000846:	d511      	bpl.n	800086c <__aeabi_d2iz+0x30>
 8000848:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d912      	bls.n	8000878 <__aeabi_d2iz+0x3c>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000862:	fa23 f002 	lsr.w	r0, r3, r2
 8000866:	bf18      	it	ne
 8000868:	4240      	negne	r0, r0
 800086a:	4770      	bx	lr
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	4770      	bx	lr
 8000872:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000876:	d105      	bne.n	8000884 <__aeabi_d2iz+0x48>
 8000878:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800087c:	bf08      	it	eq
 800087e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b970 	b.w	8000b84 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9e08      	ldr	r6, [sp, #32]
 80008c2:	460d      	mov	r5, r1
 80008c4:	4604      	mov	r4, r0
 80008c6:	460f      	mov	r7, r1
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d14a      	bne.n	8000962 <__udivmoddi4+0xa6>
 80008cc:	428a      	cmp	r2, r1
 80008ce:	4694      	mov	ip, r2
 80008d0:	d965      	bls.n	800099e <__udivmoddi4+0xe2>
 80008d2:	fab2 f382 	clz	r3, r2
 80008d6:	b143      	cbz	r3, 80008ea <__udivmoddi4+0x2e>
 80008d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80008dc:	f1c3 0220 	rsb	r2, r3, #32
 80008e0:	409f      	lsls	r7, r3
 80008e2:	fa20 f202 	lsr.w	r2, r0, r2
 80008e6:	4317      	orrs	r7, r2
 80008e8:	409c      	lsls	r4, r3
 80008ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008ee:	fa1f f58c 	uxth.w	r5, ip
 80008f2:	fbb7 f1fe 	udiv	r1, r7, lr
 80008f6:	0c22      	lsrs	r2, r4, #16
 80008f8:	fb0e 7711 	mls	r7, lr, r1, r7
 80008fc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000900:	fb01 f005 	mul.w	r0, r1, r5
 8000904:	4290      	cmp	r0, r2
 8000906:	d90a      	bls.n	800091e <__udivmoddi4+0x62>
 8000908:	eb1c 0202 	adds.w	r2, ip, r2
 800090c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000910:	f080 811c 	bcs.w	8000b4c <__udivmoddi4+0x290>
 8000914:	4290      	cmp	r0, r2
 8000916:	f240 8119 	bls.w	8000b4c <__udivmoddi4+0x290>
 800091a:	3902      	subs	r1, #2
 800091c:	4462      	add	r2, ip
 800091e:	1a12      	subs	r2, r2, r0
 8000920:	b2a4      	uxth	r4, r4
 8000922:	fbb2 f0fe 	udiv	r0, r2, lr
 8000926:	fb0e 2210 	mls	r2, lr, r0, r2
 800092a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800092e:	fb00 f505 	mul.w	r5, r0, r5
 8000932:	42a5      	cmp	r5, r4
 8000934:	d90a      	bls.n	800094c <__udivmoddi4+0x90>
 8000936:	eb1c 0404 	adds.w	r4, ip, r4
 800093a:	f100 32ff 	add.w	r2, r0, #4294967295
 800093e:	f080 8107 	bcs.w	8000b50 <__udivmoddi4+0x294>
 8000942:	42a5      	cmp	r5, r4
 8000944:	f240 8104 	bls.w	8000b50 <__udivmoddi4+0x294>
 8000948:	4464      	add	r4, ip
 800094a:	3802      	subs	r0, #2
 800094c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000950:	1b64      	subs	r4, r4, r5
 8000952:	2100      	movs	r1, #0
 8000954:	b11e      	cbz	r6, 800095e <__udivmoddi4+0xa2>
 8000956:	40dc      	lsrs	r4, r3
 8000958:	2300      	movs	r3, #0
 800095a:	e9c6 4300 	strd	r4, r3, [r6]
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	428b      	cmp	r3, r1
 8000964:	d908      	bls.n	8000978 <__udivmoddi4+0xbc>
 8000966:	2e00      	cmp	r6, #0
 8000968:	f000 80ed 	beq.w	8000b46 <__udivmoddi4+0x28a>
 800096c:	2100      	movs	r1, #0
 800096e:	e9c6 0500 	strd	r0, r5, [r6]
 8000972:	4608      	mov	r0, r1
 8000974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000978:	fab3 f183 	clz	r1, r3
 800097c:	2900      	cmp	r1, #0
 800097e:	d149      	bne.n	8000a14 <__udivmoddi4+0x158>
 8000980:	42ab      	cmp	r3, r5
 8000982:	d302      	bcc.n	800098a <__udivmoddi4+0xce>
 8000984:	4282      	cmp	r2, r0
 8000986:	f200 80f8 	bhi.w	8000b7a <__udivmoddi4+0x2be>
 800098a:	1a84      	subs	r4, r0, r2
 800098c:	eb65 0203 	sbc.w	r2, r5, r3
 8000990:	2001      	movs	r0, #1
 8000992:	4617      	mov	r7, r2
 8000994:	2e00      	cmp	r6, #0
 8000996:	d0e2      	beq.n	800095e <__udivmoddi4+0xa2>
 8000998:	e9c6 4700 	strd	r4, r7, [r6]
 800099c:	e7df      	b.n	800095e <__udivmoddi4+0xa2>
 800099e:	b902      	cbnz	r2, 80009a2 <__udivmoddi4+0xe6>
 80009a0:	deff      	udf	#255	; 0xff
 80009a2:	fab2 f382 	clz	r3, r2
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	f040 8090 	bne.w	8000acc <__udivmoddi4+0x210>
 80009ac:	1a8a      	subs	r2, r1, r2
 80009ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009b2:	fa1f fe8c 	uxth.w	lr, ip
 80009b6:	2101      	movs	r1, #1
 80009b8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009bc:	fb07 2015 	mls	r0, r7, r5, r2
 80009c0:	0c22      	lsrs	r2, r4, #16
 80009c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009c6:	fb0e f005 	mul.w	r0, lr, r5
 80009ca:	4290      	cmp	r0, r2
 80009cc:	d908      	bls.n	80009e0 <__udivmoddi4+0x124>
 80009ce:	eb1c 0202 	adds.w	r2, ip, r2
 80009d2:	f105 38ff 	add.w	r8, r5, #4294967295
 80009d6:	d202      	bcs.n	80009de <__udivmoddi4+0x122>
 80009d8:	4290      	cmp	r0, r2
 80009da:	f200 80cb 	bhi.w	8000b74 <__udivmoddi4+0x2b8>
 80009de:	4645      	mov	r5, r8
 80009e0:	1a12      	subs	r2, r2, r0
 80009e2:	b2a4      	uxth	r4, r4
 80009e4:	fbb2 f0f7 	udiv	r0, r2, r7
 80009e8:	fb07 2210 	mls	r2, r7, r0, r2
 80009ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009f0:	fb0e fe00 	mul.w	lr, lr, r0
 80009f4:	45a6      	cmp	lr, r4
 80009f6:	d908      	bls.n	8000a0a <__udivmoddi4+0x14e>
 80009f8:	eb1c 0404 	adds.w	r4, ip, r4
 80009fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a00:	d202      	bcs.n	8000a08 <__udivmoddi4+0x14c>
 8000a02:	45a6      	cmp	lr, r4
 8000a04:	f200 80bb 	bhi.w	8000b7e <__udivmoddi4+0x2c2>
 8000a08:	4610      	mov	r0, r2
 8000a0a:	eba4 040e 	sub.w	r4, r4, lr
 8000a0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a12:	e79f      	b.n	8000954 <__udivmoddi4+0x98>
 8000a14:	f1c1 0720 	rsb	r7, r1, #32
 8000a18:	408b      	lsls	r3, r1
 8000a1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a22:	fa05 f401 	lsl.w	r4, r5, r1
 8000a26:	fa20 f307 	lsr.w	r3, r0, r7
 8000a2a:	40fd      	lsrs	r5, r7
 8000a2c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a30:	4323      	orrs	r3, r4
 8000a32:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a36:	fa1f fe8c 	uxth.w	lr, ip
 8000a3a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a3e:	0c1c      	lsrs	r4, r3, #16
 8000a40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a44:	fb08 f50e 	mul.w	r5, r8, lr
 8000a48:	42a5      	cmp	r5, r4
 8000a4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a4e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a52:	d90b      	bls.n	8000a6c <__udivmoddi4+0x1b0>
 8000a54:	eb1c 0404 	adds.w	r4, ip, r4
 8000a58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a5c:	f080 8088 	bcs.w	8000b70 <__udivmoddi4+0x2b4>
 8000a60:	42a5      	cmp	r5, r4
 8000a62:	f240 8085 	bls.w	8000b70 <__udivmoddi4+0x2b4>
 8000a66:	f1a8 0802 	sub.w	r8, r8, #2
 8000a6a:	4464      	add	r4, ip
 8000a6c:	1b64      	subs	r4, r4, r5
 8000a6e:	b29d      	uxth	r5, r3
 8000a70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a74:	fb09 4413 	mls	r4, r9, r3, r4
 8000a78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a80:	45a6      	cmp	lr, r4
 8000a82:	d908      	bls.n	8000a96 <__udivmoddi4+0x1da>
 8000a84:	eb1c 0404 	adds.w	r4, ip, r4
 8000a88:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a8c:	d26c      	bcs.n	8000b68 <__udivmoddi4+0x2ac>
 8000a8e:	45a6      	cmp	lr, r4
 8000a90:	d96a      	bls.n	8000b68 <__udivmoddi4+0x2ac>
 8000a92:	3b02      	subs	r3, #2
 8000a94:	4464      	add	r4, ip
 8000a96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a9a:	fba3 9502 	umull	r9, r5, r3, r2
 8000a9e:	eba4 040e 	sub.w	r4, r4, lr
 8000aa2:	42ac      	cmp	r4, r5
 8000aa4:	46c8      	mov	r8, r9
 8000aa6:	46ae      	mov	lr, r5
 8000aa8:	d356      	bcc.n	8000b58 <__udivmoddi4+0x29c>
 8000aaa:	d053      	beq.n	8000b54 <__udivmoddi4+0x298>
 8000aac:	b156      	cbz	r6, 8000ac4 <__udivmoddi4+0x208>
 8000aae:	ebb0 0208 	subs.w	r2, r0, r8
 8000ab2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ab6:	fa04 f707 	lsl.w	r7, r4, r7
 8000aba:	40ca      	lsrs	r2, r1
 8000abc:	40cc      	lsrs	r4, r1
 8000abe:	4317      	orrs	r7, r2
 8000ac0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000acc:	f1c3 0120 	rsb	r1, r3, #32
 8000ad0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ad4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ad8:	fa25 f101 	lsr.w	r1, r5, r1
 8000adc:	409d      	lsls	r5, r3
 8000ade:	432a      	orrs	r2, r5
 8000ae0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae4:	fa1f fe8c 	uxth.w	lr, ip
 8000ae8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aec:	fb07 1510 	mls	r5, r7, r0, r1
 8000af0:	0c11      	lsrs	r1, r2, #16
 8000af2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000af6:	fb00 f50e 	mul.w	r5, r0, lr
 8000afa:	428d      	cmp	r5, r1
 8000afc:	fa04 f403 	lsl.w	r4, r4, r3
 8000b00:	d908      	bls.n	8000b14 <__udivmoddi4+0x258>
 8000b02:	eb1c 0101 	adds.w	r1, ip, r1
 8000b06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b0a:	d22f      	bcs.n	8000b6c <__udivmoddi4+0x2b0>
 8000b0c:	428d      	cmp	r5, r1
 8000b0e:	d92d      	bls.n	8000b6c <__udivmoddi4+0x2b0>
 8000b10:	3802      	subs	r0, #2
 8000b12:	4461      	add	r1, ip
 8000b14:	1b49      	subs	r1, r1, r5
 8000b16:	b292      	uxth	r2, r2
 8000b18:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b1c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b24:	fb05 f10e 	mul.w	r1, r5, lr
 8000b28:	4291      	cmp	r1, r2
 8000b2a:	d908      	bls.n	8000b3e <__udivmoddi4+0x282>
 8000b2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b30:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b34:	d216      	bcs.n	8000b64 <__udivmoddi4+0x2a8>
 8000b36:	4291      	cmp	r1, r2
 8000b38:	d914      	bls.n	8000b64 <__udivmoddi4+0x2a8>
 8000b3a:	3d02      	subs	r5, #2
 8000b3c:	4462      	add	r2, ip
 8000b3e:	1a52      	subs	r2, r2, r1
 8000b40:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b44:	e738      	b.n	80009b8 <__udivmoddi4+0xfc>
 8000b46:	4631      	mov	r1, r6
 8000b48:	4630      	mov	r0, r6
 8000b4a:	e708      	b.n	800095e <__udivmoddi4+0xa2>
 8000b4c:	4639      	mov	r1, r7
 8000b4e:	e6e6      	b.n	800091e <__udivmoddi4+0x62>
 8000b50:	4610      	mov	r0, r2
 8000b52:	e6fb      	b.n	800094c <__udivmoddi4+0x90>
 8000b54:	4548      	cmp	r0, r9
 8000b56:	d2a9      	bcs.n	8000aac <__udivmoddi4+0x1f0>
 8000b58:	ebb9 0802 	subs.w	r8, r9, r2
 8000b5c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b60:	3b01      	subs	r3, #1
 8000b62:	e7a3      	b.n	8000aac <__udivmoddi4+0x1f0>
 8000b64:	4645      	mov	r5, r8
 8000b66:	e7ea      	b.n	8000b3e <__udivmoddi4+0x282>
 8000b68:	462b      	mov	r3, r5
 8000b6a:	e794      	b.n	8000a96 <__udivmoddi4+0x1da>
 8000b6c:	4640      	mov	r0, r8
 8000b6e:	e7d1      	b.n	8000b14 <__udivmoddi4+0x258>
 8000b70:	46d0      	mov	r8, sl
 8000b72:	e77b      	b.n	8000a6c <__udivmoddi4+0x1b0>
 8000b74:	3d02      	subs	r5, #2
 8000b76:	4462      	add	r2, ip
 8000b78:	e732      	b.n	80009e0 <__udivmoddi4+0x124>
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e70a      	b.n	8000994 <__udivmoddi4+0xd8>
 8000b7e:	4464      	add	r4, ip
 8000b80:	3802      	subs	r0, #2
 8000b82:	e742      	b.n	8000a0a <__udivmoddi4+0x14e>

08000b84 <__aeabi_idiv0>:
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <readAccel.1>:

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  int16_t readAccel(uint8_t axxis){
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b088      	sub	sp, #32
 8000b8c:	af04      	add	r7, sp, #16
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71fb      	strb	r3, [r7, #7]
 8000b92:	f8c7 c000 	str.w	ip, [r7]
  	uint8_t buffer[2];
  	int16_t accel;

  	uint8_t regAddr = 0x28 + (axxis * 2);
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	3314      	adds	r3, #20
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	737b      	strb	r3, [r7, #13]

  	HAL_I2C_Mem_Read(&hi2c2, 0xD4, regAddr, I2C_MEMADD_SIZE_8BIT, buffer, 2, 1000);
 8000ba0:	7b7b      	ldrb	r3, [r7, #13]
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba8:	9302      	str	r3, [sp, #8]
 8000baa:	2302      	movs	r3, #2
 8000bac:	9301      	str	r3, [sp, #4]
 8000bae:	f107 0308 	add.w	r3, r7, #8
 8000bb2:	9300      	str	r3, [sp, #0]
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	21d4      	movs	r1, #212	; 0xd4
 8000bb8:	4815      	ldr	r0, [pc, #84]	; (8000c10 <readAccel.1+0x88>)
 8000bba:	f001 fdb1 	bl	8002720 <HAL_I2C_Mem_Read>

  	accel=((int16_t)(buffer[1]<<8)|buffer[0])*0.00061;
 8000bbe:	7a7b      	ldrb	r3, [r7, #9]
 8000bc0:	021b      	lsls	r3, r3, #8
 8000bc2:	b21b      	sxth	r3, r3
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	7a3b      	ldrb	r3, [r7, #8]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff fdcc 	bl	8000768 <__aeabi_i2d>
 8000bd0:	a30d      	add	r3, pc, #52	; (adr r3, 8000c08 <readAccel.1+0x80>)
 8000bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd6:	f7ff fb4b 	bl	8000270 <__aeabi_dmul>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	460b      	mov	r3, r1
 8000bde:	4610      	mov	r0, r2
 8000be0:	4619      	mov	r1, r3
 8000be2:	f7ff fe2b 	bl	800083c <__aeabi_d2iz>
 8000be6:	4603      	mov	r3, r0
 8000be8:	81fb      	strh	r3, [r7, #14]
  	if(axxis==0){
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d103      	bne.n	8000bf8 <readAccel.1+0x70>
  		accel=-accel;
 8000bf0:	89fb      	ldrh	r3, [r7, #14]
 8000bf2:	425b      	negs	r3, r3
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	81fb      	strh	r3, [r7, #14]
  	}
  	return accel;
 8000bf8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

  }
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	f3af 8000 	nop.w
 8000c08:	0678c005 	.word	0x0678c005
 8000c0c:	3f43fd0d 	.word	0x3f43fd0d
 8000c10:	200001dc 	.word	0x200001dc

08000c14 <main>:
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b088      	sub	sp, #32
 8000c18:	af00      	add	r7, sp, #0
int main(void)
 8000c1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c1e:	61bb      	str	r3, [r7, #24]
  HAL_Init();
 8000c20:	f000 ff1b 	bl	8001a5a <HAL_Init>
  }

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c24:	f000 f876 	bl	8000d14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c28:	f000 fa10 	bl	800104c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000c2c:	f000 f8d4 	bl	8000dd8 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000c30:	f000 f90a 	bl	8000e48 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000c34:	f000 f946 	bl	8000ec4 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000c38:	f000 f96a 	bl	8000f10 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000c3c:	f000 f9a6 	bl	8000f8c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000c40:	f000 f9d4 	bl	8000fec <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000c44:	f008 fe7a 	bl	800993c <MX_USB_DEVICE_Init>
  initAccelerometer();
 8000c48:	f107 0318 	add.w	r3, r7, #24
 8000c4c:	469c      	mov	ip, r3
 8000c4e:	f000 f845 	bl	8000cdc <initAccelerometer.0>

  GPIO_InitTypeDef GPIO_InitStruct;
  GPIO_InitStruct.Pin = USER_BUTTON_PIN;
 8000c52:	2301      	movs	r3, #1
 8000c54:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP; // Usar resistencia de pull-up interna
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(USER_BUTTON_PORT, &GPIO_InitStruct);
 8000c5e:	463b      	mov	r3, r7
 8000c60:	4619      	mov	r1, r3
 8000c62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c66:	f001 f9af 	bl	8001fc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN 2 */
  HAL_Delay(5000); //retraso para esperar a que el USB se configure
 8000c6a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c6e:	f000 ff69 	bl	8001b44 <HAL_Delay>
  dato[0]=0; //estos son los tres botones, ninguno pulsado
 8000c72:	2300      	movs	r3, #0
 8000c74:	753b      	strb	r3, [r7, #20]
  while (1)
  {
	 int16_t x;
	 int16_t y;

	 x= readAccel(0);
 8000c76:	f107 0318 	add.w	r3, r7, #24
 8000c7a:	469c      	mov	ip, r3
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f7ff ff83 	bl	8000b88 <readAccel.1>
 8000c82:	4603      	mov	r3, r0
 8000c84:	83fb      	strh	r3, [r7, #30]
	 y= readAccel(1);
 8000c86:	f107 0318 	add.w	r3, r7, #24
 8000c8a:	469c      	mov	ip, r3
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	f7ff ff7b 	bl	8000b88 <readAccel.1>
 8000c92:	4603      	mov	r3, r0
 8000c94:	83bb      	strh	r3, [r7, #28]
	 if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 8000c96:	2101      	movs	r1, #1
 8000c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c9c:	f001 fb3e 	bl	800231c <HAL_GPIO_ReadPin>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d105      	bne.n	8000cb2 <main+0x9e>
		 dato[0]=2;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	753b      	strb	r3, [r7, #20]
		 printf("lelelelele");
 8000caa:	480b      	ldr	r0, [pc, #44]	; (8000cd8 <main+0xc4>)
 8000cac:	f009 fcd2 	bl	800a654 <iprintf>
 8000cb0:	e001      	b.n	8000cb6 <main+0xa2>
	 }else{
		 dato[0]=0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	753b      	strb	r3, [r7, #20]
	 }
	 dato[1]=x; //cada 100ms desplazamos el ratón 4 posiciones
 8000cb6:	8bfb      	ldrh	r3, [r7, #30]
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	757b      	strb	r3, [r7, #21]
	 dato[2]=y;
 8000cbc:	8bbb      	ldrh	r3, [r7, #28]
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	75bb      	strb	r3, [r7, #22]
	 USBD_CUSTOM_HID_SendReport_FS(dato,3);
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	2103      	movs	r1, #3
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f008 fe89 	bl	80099e0 <USBD_CUSTOM_HID_SendReport_FS>
	 HAL_Delay(100);
 8000cce:	2064      	movs	r0, #100	; 0x64
 8000cd0:	f000 ff38 	bl	8001b44 <HAL_Delay>
  {
 8000cd4:	e7cf      	b.n	8000c76 <main+0x62>
 8000cd6:	bf00      	nop
 8000cd8:	0800b358 	.word	0x0800b358

08000cdc <initAccelerometer.0>:
  void initAccelerometer(void){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af04      	add	r7, sp, #16
 8000ce2:	f8c7 c004 	str.w	ip, [r7, #4]
  	buffer[0]=0x40;
 8000ce6:	2340      	movs	r3, #64	; 0x40
 8000ce8:	733b      	strb	r3, [r7, #12]
  	HAL_I2C_Mem_Write(&hi2c2, 0xD4, 0x10, I2C_MEMADD_SIZE_8BIT, buffer, 1, 1000);
 8000cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cee:	9302      	str	r3, [sp, #8]
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	9301      	str	r3, [sp, #4]
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	9300      	str	r3, [sp, #0]
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	2210      	movs	r2, #16
 8000cfe:	21d4      	movs	r1, #212	; 0xd4
 8000d00:	4803      	ldr	r0, [pc, #12]	; (8000d10 <initAccelerometer.0+0x34>)
 8000d02:	f001 fbf9 	bl	80024f8 <HAL_I2C_Mem_Write>
  }
 8000d06:	bf00      	nop
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200001dc 	.word	0x200001dc

08000d14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b096      	sub	sp, #88	; 0x58
 8000d18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	2244      	movs	r2, #68	; 0x44
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f009 fceb 	bl	800a6fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d28:	463b      	mov	r3, r7
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
 8000d34:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d36:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d3a:	f003 fb07 	bl	800434c <HAL_PWREx_ControlVoltageScaling>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d44:	f000 fb34 	bl	80013b0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d48:	f003 fae2 	bl	8004310 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000d4c:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <SystemClock_Config+0xc0>)
 8000d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d52:	4a20      	ldr	r2, [pc, #128]	; (8000dd4 <SystemClock_Config+0xc0>)
 8000d54:	f023 0318 	bic.w	r3, r3, #24
 8000d58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000d5c:	2314      	movs	r3, #20
 8000d5e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d60:	2301      	movs	r3, #1
 8000d62:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d64:	2301      	movs	r3, #1
 8000d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d6c:	2360      	movs	r3, #96	; 0x60
 8000d6e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d70:	2302      	movs	r3, #2
 8000d72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d74:	2301      	movs	r3, #1
 8000d76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000d7c:	2328      	movs	r3, #40	; 0x28
 8000d7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d80:	2307      	movs	r3, #7
 8000d82:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d84:	2302      	movs	r3, #2
 8000d86:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	4618      	mov	r0, r3
 8000d92:	f003 fbfd 	bl	8004590 <HAL_RCC_OscConfig>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000d9c:	f000 fb08 	bl	80013b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da0:	230f      	movs	r3, #15
 8000da2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da4:	2303      	movs	r3, #3
 8000da6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da8:	2300      	movs	r3, #0
 8000daa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000db0:	2300      	movs	r3, #0
 8000db2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000db4:	463b      	mov	r3, r7
 8000db6:	2104      	movs	r1, #4
 8000db8:	4618      	mov	r0, r3
 8000dba:	f003 ffc5 	bl	8004d48 <HAL_RCC_ClockConfig>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000dc4:	f000 faf4 	bl	80013b0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000dc8:	f004 fccc 	bl	8005764 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000dcc:	bf00      	nop
 8000dce:	3758      	adds	r7, #88	; 0x58
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40021000 	.word	0x40021000

08000dd8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000ddc:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <MX_DFSDM1_Init+0x68>)
 8000dde:	4a19      	ldr	r2, [pc, #100]	; (8000e44 <MX_DFSDM1_Init+0x6c>)
 8000de0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000de2:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <MX_DFSDM1_Init+0x68>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000de8:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <MX_DFSDM1_Init+0x68>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000dee:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <MX_DFSDM1_Init+0x68>)
 8000df0:	2202      	movs	r2, #2
 8000df2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000df4:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <MX_DFSDM1_Init+0x68>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000dfa:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <MX_DFSDM1_Init+0x68>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000e00:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <MX_DFSDM1_Init+0x68>)
 8000e02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e06:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000e08:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <MX_DFSDM1_Init+0x68>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <MX_DFSDM1_Init+0x68>)
 8000e10:	2204      	movs	r2, #4
 8000e12:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000e14:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <MX_DFSDM1_Init+0x68>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <MX_DFSDM1_Init+0x68>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000e20:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <MX_DFSDM1_Init+0x68>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <MX_DFSDM1_Init+0x68>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000e2c:	4804      	ldr	r0, [pc, #16]	; (8000e40 <MX_DFSDM1_Init+0x68>)
 8000e2e:	f000 ffbf 	bl	8001db0 <HAL_DFSDM_ChannelInit>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000e38:	f000 faba 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	200001a4 	.word	0x200001a4
 8000e44:	40016020 	.word	0x40016020

08000e48 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <MX_I2C2_Init+0x74>)
 8000e4e:	4a1c      	ldr	r2, [pc, #112]	; (8000ec0 <MX_I2C2_Init+0x78>)
 8000e50:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <MX_I2C2_Init+0x74>)
 8000e54:	f640 6214 	movw	r2, #3604	; 0xe14
 8000e58:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <MX_I2C2_Init+0x74>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e60:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <MX_I2C2_Init+0x74>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <MX_I2C2_Init+0x74>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <MX_I2C2_Init+0x74>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e72:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <MX_I2C2_Init+0x74>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e78:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <MX_I2C2_Init+0x74>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <MX_I2C2_Init+0x74>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e84:	480d      	ldr	r0, [pc, #52]	; (8000ebc <MX_I2C2_Init+0x74>)
 8000e86:	f001 fa9c 	bl	80023c2 <HAL_I2C_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000e90:	f000 fa8e 	bl	80013b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e94:	2100      	movs	r1, #0
 8000e96:	4809      	ldr	r0, [pc, #36]	; (8000ebc <MX_I2C2_Init+0x74>)
 8000e98:	f002 f814 	bl	8002ec4 <HAL_I2CEx_ConfigAnalogFilter>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000ea2:	f000 fa85 	bl	80013b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4804      	ldr	r0, [pc, #16]	; (8000ebc <MX_I2C2_Init+0x74>)
 8000eaa:	f002 f856 	bl	8002f5a <HAL_I2CEx_ConfigDigitalFilter>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000eb4:	f000 fa7c 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	200001dc 	.word	0x200001dc
 8000ec0:	40005800 	.word	0x40005800

08000ec4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <MX_QUADSPI_Init+0x44>)
 8000eca:	4a10      	ldr	r2, [pc, #64]	; (8000f0c <MX_QUADSPI_Init+0x48>)
 8000ecc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000ece:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <MX_QUADSPI_Init+0x44>)
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <MX_QUADSPI_Init+0x44>)
 8000ed6:	2204      	movs	r2, #4
 8000ed8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000eda:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <MX_QUADSPI_Init+0x44>)
 8000edc:	2210      	movs	r2, #16
 8000ede:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000ee0:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <MX_QUADSPI_Init+0x44>)
 8000ee2:	2217      	movs	r2, #23
 8000ee4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000ee6:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <MX_QUADSPI_Init+0x44>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <MX_QUADSPI_Init+0x44>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000ef2:	4805      	ldr	r0, [pc, #20]	; (8000f08 <MX_QUADSPI_Init+0x44>)
 8000ef4:	f003 fa90 	bl	8004418 <HAL_QSPI_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000efe:	f000 fa57 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000230 	.word	0x20000230
 8000f0c:	a0001000 	.word	0xa0001000

08000f10 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000f14:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <MX_SPI3_Init+0x74>)
 8000f16:	4a1c      	ldr	r2, [pc, #112]	; (8000f88 <MX_SPI3_Init+0x78>)
 8000f18:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000f1a:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <MX_SPI3_Init+0x74>)
 8000f1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f20:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000f22:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <MX_SPI3_Init+0x74>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f28:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <MX_SPI3_Init+0x74>)
 8000f2a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f2e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f30:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <MX_SPI3_Init+0x74>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f36:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <MX_SPI3_Init+0x74>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <MX_SPI3_Init+0x74>)
 8000f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f42:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f44:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <MX_SPI3_Init+0x74>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <MX_SPI3_Init+0x74>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <MX_SPI3_Init+0x74>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f56:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <MX_SPI3_Init+0x74>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000f5c:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <MX_SPI3_Init+0x74>)
 8000f5e:	2207      	movs	r2, #7
 8000f60:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f62:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <MX_SPI3_Init+0x74>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <MX_SPI3_Init+0x74>)
 8000f6a:	2208      	movs	r2, #8
 8000f6c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000f6e:	4805      	ldr	r0, [pc, #20]	; (8000f84 <MX_SPI3_Init+0x74>)
 8000f70:	f004 fdda 	bl	8005b28 <HAL_SPI_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000f7a:	f000 fa19 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000274 	.word	0x20000274
 8000f88:	40003c00 	.word	0x40003c00

08000f8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f90:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <MX_USART1_UART_Init+0x58>)
 8000f92:	4a15      	ldr	r2, [pc, #84]	; (8000fe8 <MX_USART1_UART_Init+0x5c>)
 8000f94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <MX_USART1_UART_Init+0x58>)
 8000f98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <MX_USART1_UART_Init+0x58>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <MX_USART1_UART_Init+0x58>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <MX_USART1_UART_Init+0x58>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <MX_USART1_UART_Init+0x58>)
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb6:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <MX_USART1_UART_Init+0x58>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fbc:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <MX_USART1_UART_Init+0x58>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fc2:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <MX_USART1_UART_Init+0x58>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fc8:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <MX_USART1_UART_Init+0x58>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fce:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <MX_USART1_UART_Init+0x58>)
 8000fd0:	f004 fe4d 	bl	8005c6e <HAL_UART_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000fda:	f000 f9e9 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200002d8 	.word	0x200002d8
 8000fe8:	40013800 	.word	0x40013800

08000fec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ff0:	4b14      	ldr	r3, [pc, #80]	; (8001044 <MX_USART3_UART_Init+0x58>)
 8000ff2:	4a15      	ldr	r2, [pc, #84]	; (8001048 <MX_USART3_UART_Init+0x5c>)
 8000ff4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ff6:	4b13      	ldr	r3, [pc, #76]	; (8001044 <MX_USART3_UART_Init+0x58>)
 8000ff8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ffc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ffe:	4b11      	ldr	r3, [pc, #68]	; (8001044 <MX_USART3_UART_Init+0x58>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001004:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <MX_USART3_UART_Init+0x58>)
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <MX_USART3_UART_Init+0x58>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <MX_USART3_UART_Init+0x58>)
 8001012:	220c      	movs	r2, #12
 8001014:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001016:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <MX_USART3_UART_Init+0x58>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800101c:	4b09      	ldr	r3, [pc, #36]	; (8001044 <MX_USART3_UART_Init+0x58>)
 800101e:	2200      	movs	r2, #0
 8001020:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001022:	4b08      	ldr	r3, [pc, #32]	; (8001044 <MX_USART3_UART_Init+0x58>)
 8001024:	2200      	movs	r2, #0
 8001026:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <MX_USART3_UART_Init+0x58>)
 800102a:	2200      	movs	r2, #0
 800102c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <MX_USART3_UART_Init+0x58>)
 8001030:	f004 fe1d 	bl	8005c6e <HAL_UART_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800103a:	f000 f9b9 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000360 	.word	0x20000360
 8001048:	40004800 	.word	0x40004800

0800104c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08a      	sub	sp, #40	; 0x28
 8001050:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
 8001060:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001062:	4bbd      	ldr	r3, [pc, #756]	; (8001358 <MX_GPIO_Init+0x30c>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	4abc      	ldr	r2, [pc, #752]	; (8001358 <MX_GPIO_Init+0x30c>)
 8001068:	f043 0310 	orr.w	r3, r3, #16
 800106c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800106e:	4bba      	ldr	r3, [pc, #744]	; (8001358 <MX_GPIO_Init+0x30c>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	f003 0310 	and.w	r3, r3, #16
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800107a:	4bb7      	ldr	r3, [pc, #732]	; (8001358 <MX_GPIO_Init+0x30c>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	4ab6      	ldr	r2, [pc, #728]	; (8001358 <MX_GPIO_Init+0x30c>)
 8001080:	f043 0304 	orr.w	r3, r3, #4
 8001084:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001086:	4bb4      	ldr	r3, [pc, #720]	; (8001358 <MX_GPIO_Init+0x30c>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	f003 0304 	and.w	r3, r3, #4
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	4bb1      	ldr	r3, [pc, #708]	; (8001358 <MX_GPIO_Init+0x30c>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	4ab0      	ldr	r2, [pc, #704]	; (8001358 <MX_GPIO_Init+0x30c>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109e:	4bae      	ldr	r3, [pc, #696]	; (8001358 <MX_GPIO_Init+0x30c>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010aa:	4bab      	ldr	r3, [pc, #684]	; (8001358 <MX_GPIO_Init+0x30c>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	4aaa      	ldr	r2, [pc, #680]	; (8001358 <MX_GPIO_Init+0x30c>)
 80010b0:	f043 0302 	orr.w	r3, r3, #2
 80010b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b6:	4ba8      	ldr	r3, [pc, #672]	; (8001358 <MX_GPIO_Init+0x30c>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010c2:	4ba5      	ldr	r3, [pc, #660]	; (8001358 <MX_GPIO_Init+0x30c>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c6:	4aa4      	ldr	r2, [pc, #656]	; (8001358 <MX_GPIO_Init+0x30c>)
 80010c8:	f043 0308 	orr.w	r3, r3, #8
 80010cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ce:	4ba2      	ldr	r3, [pc, #648]	; (8001358 <MX_GPIO_Init+0x30c>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d2:	f003 0308 	and.w	r3, r3, #8
 80010d6:	603b      	str	r3, [r7, #0]
 80010d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	f44f 718a 	mov.w	r1, #276	; 0x114
 80010e0:	489e      	ldr	r0, [pc, #632]	; (800135c <MX_GPIO_Init+0x310>)
 80010e2:	f001 f933 	bl	800234c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	f248 1104 	movw	r1, #33028	; 0x8104
 80010ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f0:	f001 f92c 	bl	800234c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80010f4:	2200      	movs	r2, #0
 80010f6:	f24f 0114 	movw	r1, #61460	; 0xf014
 80010fa:	4899      	ldr	r0, [pc, #612]	; (8001360 <MX_GPIO_Init+0x314>)
 80010fc:	f001 f926 	bl	800234c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	f241 0181 	movw	r1, #4225	; 0x1081
 8001106:	4897      	ldr	r0, [pc, #604]	; (8001364 <MX_GPIO_Init+0x318>)
 8001108:	f001 f920 	bl	800234c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 800110c:	2201      	movs	r2, #1
 800110e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001112:	4894      	ldr	r0, [pc, #592]	; (8001364 <MX_GPIO_Init+0x318>)
 8001114:	f001 f91a 	bl	800234c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001118:	2200      	movs	r2, #0
 800111a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800111e:	4892      	ldr	r0, [pc, #584]	; (8001368 <MX_GPIO_Init+0x31c>)
 8001120:	f001 f914 	bl	800234c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001124:	2201      	movs	r2, #1
 8001126:	2120      	movs	r1, #32
 8001128:	488d      	ldr	r0, [pc, #564]	; (8001360 <MX_GPIO_Init+0x314>)
 800112a:	f001 f90f 	bl	800234c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800112e:	2201      	movs	r2, #1
 8001130:	2101      	movs	r1, #1
 8001132:	488a      	ldr	r0, [pc, #552]	; (800135c <MX_GPIO_Init+0x310>)
 8001134:	f001 f90a 	bl	800234c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001138:	f240 1315 	movw	r3, #277	; 0x115
 800113c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113e:	2301      	movs	r3, #1
 8001140:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001146:	2300      	movs	r3, #0
 8001148:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	4619      	mov	r1, r3
 8001150:	4882      	ldr	r0, [pc, #520]	; (800135c <MX_GPIO_Init+0x310>)
 8001152:	f000 ff39 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001156:	236a      	movs	r3, #106	; 0x6a
 8001158:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800115a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800115e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	4619      	mov	r1, r3
 800116a:	487c      	ldr	r0, [pc, #496]	; (800135c <MX_GPIO_Init+0x310>)
 800116c:	f000 ff2c 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001170:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001176:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800117a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	4619      	mov	r1, r3
 8001186:	4878      	ldr	r0, [pc, #480]	; (8001368 <MX_GPIO_Init+0x31c>)
 8001188:	f000 ff1e 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 800118c:	233f      	movs	r3, #63	; 0x3f
 800118e:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001190:	230b      	movs	r3, #11
 8001192:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	4619      	mov	r1, r3
 800119e:	4872      	ldr	r0, [pc, #456]	; (8001368 <MX_GPIO_Init+0x31c>)
 80011a0:	f000 ff12 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80011a4:	2303      	movs	r3, #3
 80011a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a8:	2302      	movs	r3, #2
 80011aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b0:	2303      	movs	r3, #3
 80011b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80011b4:	2308      	movs	r3, #8
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	4619      	mov	r1, r3
 80011be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c2:	f000 ff01 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80011c6:	f248 1304 	movw	r3, #33028	; 0x8104
 80011ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e2:	f000 fef1 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80011e6:	2308      	movs	r3, #8
 80011e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ea:	2302      	movs	r3, #2
 80011ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2300      	movs	r3, #0
 80011f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011f6:	2301      	movs	r3, #1
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	4619      	mov	r1, r3
 8001200:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001204:	f000 fee0 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001208:	2310      	movs	r3, #16
 800120a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800120c:	230b      	movs	r3, #11
 800120e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4619      	mov	r1, r3
 800121a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800121e:	f000 fed3 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001222:	23e0      	movs	r3, #224	; 0xe0
 8001224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122e:	2303      	movs	r3, #3
 8001230:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001232:	2305      	movs	r3, #5
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	4619      	mov	r1, r3
 800123c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001240:	f000 fec2 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001244:	2301      	movs	r3, #1
 8001246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001248:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800124c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	4619      	mov	r1, r3
 8001258:	4841      	ldr	r0, [pc, #260]	; (8001360 <MX_GPIO_Init+0x314>)
 800125a:	f000 feb5 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800125e:	2302      	movs	r3, #2
 8001260:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001262:	230b      	movs	r3, #11
 8001264:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	4619      	mov	r1, r3
 8001270:	483b      	ldr	r0, [pc, #236]	; (8001360 <MX_GPIO_Init+0x314>)
 8001272:	f000 fea9 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001276:	f24f 0334 	movw	r3, #61492	; 0xf034
 800127a:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127c:	2301      	movs	r3, #1
 800127e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2300      	movs	r3, #0
 8001286:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	4619      	mov	r1, r3
 800128e:	4834      	ldr	r0, [pc, #208]	; (8001360 <MX_GPIO_Init+0x314>)
 8001290:	f000 fe9a 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001294:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001298:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800129a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800129e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	4619      	mov	r1, r3
 80012aa:	482e      	ldr	r0, [pc, #184]	; (8001364 <MX_GPIO_Init+0x318>)
 80012ac:	f000 fe8c 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80012b0:	f243 0381 	movw	r3, #12417	; 0x3081
 80012b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b6:	2301      	movs	r3, #1
 80012b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	4619      	mov	r1, r3
 80012c8:	4826      	ldr	r0, [pc, #152]	; (8001364 <MX_GPIO_Init+0x318>)
 80012ca:	f000 fe7d 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80012ce:	f44f 7310 	mov.w	r3, #576	; 0x240
 80012d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d4:	2301      	movs	r3, #1
 80012d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	4619      	mov	r1, r3
 80012e6:	4820      	ldr	r0, [pc, #128]	; (8001368 <MX_GPIO_Init+0x31c>)
 80012e8:	f000 fe6e 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80012ec:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80012f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4619      	mov	r1, r3
 8001302:	4819      	ldr	r0, [pc, #100]	; (8001368 <MX_GPIO_Init+0x31c>)
 8001304:	f000 fe60 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001308:	2302      	movs	r3, #2
 800130a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001314:	2303      	movs	r3, #3
 8001316:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001318:	2305      	movs	r3, #5
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4619      	mov	r1, r3
 8001322:	4810      	ldr	r0, [pc, #64]	; (8001364 <MX_GPIO_Init+0x318>)
 8001324:	f000 fe50 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001328:	2378      	movs	r3, #120	; 0x78
 800132a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001334:	2303      	movs	r3, #3
 8001336:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001338:	2307      	movs	r3, #7
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	4619      	mov	r1, r3
 8001342:	4808      	ldr	r0, [pc, #32]	; (8001364 <MX_GPIO_Init+0x318>)
 8001344:	f000 fe40 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001348:	f44f 7340 	mov.w	r3, #768	; 0x300
 800134c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800134e:	2312      	movs	r3, #18
 8001350:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	e00a      	b.n	800136c <MX_GPIO_Init+0x320>
 8001356:	bf00      	nop
 8001358:	40021000 	.word	0x40021000
 800135c:	48001000 	.word	0x48001000
 8001360:	48000400 	.word	0x48000400
 8001364:	48000c00 	.word	0x48000c00
 8001368:	48000800 	.word	0x48000800
 800136c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136e:	2303      	movs	r3, #3
 8001370:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001372:	2304      	movs	r3, #4
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	4619      	mov	r1, r3
 800137c:	480b      	ldr	r0, [pc, #44]	; (80013ac <MX_GPIO_Init+0x360>)
 800137e:	f000 fe23 	bl	8001fc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	2017      	movs	r0, #23
 8001388:	f000 fcdb 	bl	8001d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800138c:	2017      	movs	r0, #23
 800138e:	f000 fcf4 	bl	8001d7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001392:	2200      	movs	r2, #0
 8001394:	2100      	movs	r1, #0
 8001396:	2028      	movs	r0, #40	; 0x28
 8001398:	f000 fcd3 	bl	8001d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800139c:	2028      	movs	r0, #40	; 0x28
 800139e:	f000 fcec 	bl	8001d7a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013a2:	bf00      	nop
 80013a4:	3728      	adds	r7, #40	; 0x28
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	48000400 	.word	0x48000400

080013b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b4:	b672      	cpsid	i
}
 80013b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <Error_Handler+0x8>
	...

080013bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c2:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <HAL_MspInit+0x44>)
 80013c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c6:	4a0e      	ldr	r2, [pc, #56]	; (8001400 <HAL_MspInit+0x44>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6613      	str	r3, [r2, #96]	; 0x60
 80013ce:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <HAL_MspInit+0x44>)
 80013d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <HAL_MspInit+0x44>)
 80013dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013de:	4a08      	ldr	r2, [pc, #32]	; (8001400 <HAL_MspInit+0x44>)
 80013e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e4:	6593      	str	r3, [r2, #88]	; 0x58
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_MspInit+0x44>)
 80013e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	40021000 	.word	0x40021000

08001404 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b0ac      	sub	sp, #176	; 0xb0
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	2288      	movs	r2, #136	; 0x88
 8001422:	2100      	movs	r1, #0
 8001424:	4618      	mov	r0, r3
 8001426:	f009 f96a 	bl	800a6fe <memset>
  if(DFSDM1_Init == 0)
 800142a:	4b25      	ldr	r3, [pc, #148]	; (80014c0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d142      	bne.n	80014b8 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001432:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001436:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	4618      	mov	r0, r3
 8001444:	f003 fea4 	bl	8005190 <HAL_RCCEx_PeriphCLKConfig>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800144e:	f7ff ffaf 	bl	80013b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001452:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001456:	4a1b      	ldr	r2, [pc, #108]	; (80014c4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001458:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800145c:	6613      	str	r3, [r2, #96]	; 0x60
 800145e:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001462:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800146a:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	4a15      	ldr	r2, [pc, #84]	; (80014c4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001470:	f043 0310 	orr.w	r3, r3, #16
 8001474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001476:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	f003 0310 	and.w	r3, r3, #16
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001482:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001486:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001496:	2300      	movs	r3, #0
 8001498:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800149c:	2306      	movs	r3, #6
 800149e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014a2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014a6:	4619      	mov	r1, r3
 80014a8:	4807      	ldr	r0, [pc, #28]	; (80014c8 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80014aa:	f000 fd8d 	bl	8001fc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	3301      	adds	r3, #1
 80014b4:	4a02      	ldr	r2, [pc, #8]	; (80014c0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80014b6:	6013      	str	r3, [r2, #0]
  }

}
 80014b8:	bf00      	nop
 80014ba:	37b0      	adds	r7, #176	; 0xb0
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	200003e8 	.word	0x200003e8
 80014c4:	40021000 	.word	0x40021000
 80014c8:	48001000 	.word	0x48001000

080014cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b0ac      	sub	sp, #176	; 0xb0
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	2288      	movs	r2, #136	; 0x88
 80014ea:	2100      	movs	r1, #0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f009 f906 	bl	800a6fe <memset>
  if(hi2c->Instance==I2C2)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a21      	ldr	r2, [pc, #132]	; (800157c <HAL_I2C_MspInit+0xb0>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d13b      	bne.n	8001574 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80014fc:	2380      	movs	r3, #128	; 0x80
 80014fe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001500:	2300      	movs	r3, #0
 8001502:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4618      	mov	r0, r3
 800150a:	f003 fe41 	bl	8005190 <HAL_RCCEx_PeriphCLKConfig>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001514:	f7ff ff4c 	bl	80013b0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001518:	4b19      	ldr	r3, [pc, #100]	; (8001580 <HAL_I2C_MspInit+0xb4>)
 800151a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151c:	4a18      	ldr	r2, [pc, #96]	; (8001580 <HAL_I2C_MspInit+0xb4>)
 800151e:	f043 0302 	orr.w	r3, r3, #2
 8001522:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001524:	4b16      	ldr	r3, [pc, #88]	; (8001580 <HAL_I2C_MspInit+0xb4>)
 8001526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001530:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001534:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001538:	2312      	movs	r3, #18
 800153a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800153e:	2301      	movs	r3, #1
 8001540:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001544:	2303      	movs	r3, #3
 8001546:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800154a:	2304      	movs	r3, #4
 800154c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001550:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001554:	4619      	mov	r1, r3
 8001556:	480b      	ldr	r0, [pc, #44]	; (8001584 <HAL_I2C_MspInit+0xb8>)
 8001558:	f000 fd36 	bl	8001fc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800155c:	4b08      	ldr	r3, [pc, #32]	; (8001580 <HAL_I2C_MspInit+0xb4>)
 800155e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001560:	4a07      	ldr	r2, [pc, #28]	; (8001580 <HAL_I2C_MspInit+0xb4>)
 8001562:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001566:	6593      	str	r3, [r2, #88]	; 0x58
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <HAL_I2C_MspInit+0xb4>)
 800156a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001574:	bf00      	nop
 8001576:	37b0      	adds	r7, #176	; 0xb0
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40005800 	.word	0x40005800
 8001580:	40021000 	.word	0x40021000
 8001584:	48000400 	.word	0x48000400

08001588 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	; 0x28
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a17      	ldr	r2, [pc, #92]	; (8001604 <HAL_QSPI_MspInit+0x7c>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d128      	bne.n	80015fc <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80015aa:	4b17      	ldr	r3, [pc, #92]	; (8001608 <HAL_QSPI_MspInit+0x80>)
 80015ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015ae:	4a16      	ldr	r2, [pc, #88]	; (8001608 <HAL_QSPI_MspInit+0x80>)
 80015b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b4:	6513      	str	r3, [r2, #80]	; 0x50
 80015b6:	4b14      	ldr	r3, [pc, #80]	; (8001608 <HAL_QSPI_MspInit+0x80>)
 80015b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015c2:	4b11      	ldr	r3, [pc, #68]	; (8001608 <HAL_QSPI_MspInit+0x80>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c6:	4a10      	ldr	r2, [pc, #64]	; (8001608 <HAL_QSPI_MspInit+0x80>)
 80015c8:	f043 0310 	orr.w	r3, r3, #16
 80015cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ce:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <HAL_QSPI_MspInit+0x80>)
 80015d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d2:	f003 0310 	and.w	r3, r3, #16
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80015da:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80015de:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e0:	2302      	movs	r3, #2
 80015e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e8:	2303      	movs	r3, #3
 80015ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80015ec:	230a      	movs	r3, #10
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	4619      	mov	r1, r3
 80015f6:	4805      	ldr	r0, [pc, #20]	; (800160c <HAL_QSPI_MspInit+0x84>)
 80015f8:	f000 fce6 	bl	8001fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80015fc:	bf00      	nop
 80015fe:	3728      	adds	r7, #40	; 0x28
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	a0001000 	.word	0xa0001000
 8001608:	40021000 	.word	0x40021000
 800160c:	48001000 	.word	0x48001000

08001610 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08a      	sub	sp, #40	; 0x28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a17      	ldr	r2, [pc, #92]	; (800168c <HAL_SPI_MspInit+0x7c>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d128      	bne.n	8001684 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001632:	4b17      	ldr	r3, [pc, #92]	; (8001690 <HAL_SPI_MspInit+0x80>)
 8001634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001636:	4a16      	ldr	r2, [pc, #88]	; (8001690 <HAL_SPI_MspInit+0x80>)
 8001638:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800163c:	6593      	str	r3, [r2, #88]	; 0x58
 800163e:	4b14      	ldr	r3, [pc, #80]	; (8001690 <HAL_SPI_MspInit+0x80>)
 8001640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001642:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800164a:	4b11      	ldr	r3, [pc, #68]	; (8001690 <HAL_SPI_MspInit+0x80>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164e:	4a10      	ldr	r2, [pc, #64]	; (8001690 <HAL_SPI_MspInit+0x80>)
 8001650:	f043 0304 	orr.w	r3, r3, #4
 8001654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <HAL_SPI_MspInit+0x80>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001662:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001670:	2303      	movs	r3, #3
 8001672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001674:	2306      	movs	r3, #6
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	4619      	mov	r1, r3
 800167e:	4805      	ldr	r0, [pc, #20]	; (8001694 <HAL_SPI_MspInit+0x84>)
 8001680:	f000 fca2 	bl	8001fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001684:	bf00      	nop
 8001686:	3728      	adds	r7, #40	; 0x28
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40003c00 	.word	0x40003c00
 8001690:	40021000 	.word	0x40021000
 8001694:	48000800 	.word	0x48000800

08001698 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b0ae      	sub	sp, #184	; 0xb8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016b0:	f107 031c 	add.w	r3, r7, #28
 80016b4:	2288      	movs	r2, #136	; 0x88
 80016b6:	2100      	movs	r1, #0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f009 f820 	bl	800a6fe <memset>
  if(huart->Instance==USART1)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a42      	ldr	r2, [pc, #264]	; (80017cc <HAL_UART_MspInit+0x134>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d13b      	bne.n	8001740 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80016c8:	2301      	movs	r3, #1
 80016ca:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80016cc:	2300      	movs	r3, #0
 80016ce:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016d0:	f107 031c 	add.w	r3, r7, #28
 80016d4:	4618      	mov	r0, r3
 80016d6:	f003 fd5b 	bl	8005190 <HAL_RCCEx_PeriphCLKConfig>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016e0:	f7ff fe66 	bl	80013b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016e4:	4b3a      	ldr	r3, [pc, #232]	; (80017d0 <HAL_UART_MspInit+0x138>)
 80016e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016e8:	4a39      	ldr	r2, [pc, #228]	; (80017d0 <HAL_UART_MspInit+0x138>)
 80016ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ee:	6613      	str	r3, [r2, #96]	; 0x60
 80016f0:	4b37      	ldr	r3, [pc, #220]	; (80017d0 <HAL_UART_MspInit+0x138>)
 80016f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016f8:	61bb      	str	r3, [r7, #24]
 80016fa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fc:	4b34      	ldr	r3, [pc, #208]	; (80017d0 <HAL_UART_MspInit+0x138>)
 80016fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001700:	4a33      	ldr	r2, [pc, #204]	; (80017d0 <HAL_UART_MspInit+0x138>)
 8001702:	f043 0302 	orr.w	r3, r3, #2
 8001706:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001708:	4b31      	ldr	r3, [pc, #196]	; (80017d0 <HAL_UART_MspInit+0x138>)
 800170a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001714:	23c0      	movs	r3, #192	; 0xc0
 8001716:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	2302      	movs	r3, #2
 800171c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001726:	2303      	movs	r3, #3
 8001728:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800172c:	2307      	movs	r3, #7
 800172e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001732:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001736:	4619      	mov	r1, r3
 8001738:	4826      	ldr	r0, [pc, #152]	; (80017d4 <HAL_UART_MspInit+0x13c>)
 800173a:	f000 fc45 	bl	8001fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800173e:	e040      	b.n	80017c2 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a24      	ldr	r2, [pc, #144]	; (80017d8 <HAL_UART_MspInit+0x140>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d13b      	bne.n	80017c2 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800174a:	2304      	movs	r3, #4
 800174c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800174e:	2300      	movs	r3, #0
 8001750:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001752:	f107 031c 	add.w	r3, r7, #28
 8001756:	4618      	mov	r0, r3
 8001758:	f003 fd1a 	bl	8005190 <HAL_RCCEx_PeriphCLKConfig>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001762:	f7ff fe25 	bl	80013b0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001766:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <HAL_UART_MspInit+0x138>)
 8001768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176a:	4a19      	ldr	r2, [pc, #100]	; (80017d0 <HAL_UART_MspInit+0x138>)
 800176c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001770:	6593      	str	r3, [r2, #88]	; 0x58
 8001772:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <HAL_UART_MspInit+0x138>)
 8001774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001776:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800177e:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <HAL_UART_MspInit+0x138>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001782:	4a13      	ldr	r2, [pc, #76]	; (80017d0 <HAL_UART_MspInit+0x138>)
 8001784:	f043 0308 	orr.w	r3, r3, #8
 8001788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800178a:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <HAL_UART_MspInit+0x138>)
 800178c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178e:	f003 0308 	and.w	r3, r3, #8
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001796:	f44f 7340 	mov.w	r3, #768	; 0x300
 800179a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	2302      	movs	r3, #2
 80017a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017aa:	2303      	movs	r3, #3
 80017ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017b0:	2307      	movs	r3, #7
 80017b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017b6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017ba:	4619      	mov	r1, r3
 80017bc:	4807      	ldr	r0, [pc, #28]	; (80017dc <HAL_UART_MspInit+0x144>)
 80017be:	f000 fc03 	bl	8001fc8 <HAL_GPIO_Init>
}
 80017c2:	bf00      	nop
 80017c4:	37b8      	adds	r7, #184	; 0xb8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40013800 	.word	0x40013800
 80017d0:	40021000 	.word	0x40021000
 80017d4:	48000400 	.word	0x48000400
 80017d8:	40004800 	.word	0x40004800
 80017dc:	48000c00 	.word	0x48000c00

080017e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017e4:	e7fe      	b.n	80017e4 <NMI_Handler+0x4>

080017e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ea:	e7fe      	b.n	80017ea <HardFault_Handler+0x4>

080017ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <MemManage_Handler+0x4>

080017f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f6:	e7fe      	b.n	80017f6 <BusFault_Handler+0x4>

080017f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017fc:	e7fe      	b.n	80017fc <UsageFault_Handler+0x4>

080017fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800182c:	f000 f96a 	bl	8001b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}

08001834 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001838:	2020      	movs	r0, #32
 800183a:	f000 fd9f 	bl	800237c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800183e:	2040      	movs	r0, #64	; 0x40
 8001840:	f000 fd9c 	bl	800237c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001844:	2080      	movs	r0, #128	; 0x80
 8001846:	f000 fd99 	bl	800237c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800184a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800184e:	f000 fd95 	bl	800237c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}

08001856 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800185a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800185e:	f000 fd8d 	bl	800237c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001862:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001866:	f000 fd89 	bl	800237c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800186a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800186e:	f000 fd85 	bl	800237c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001872:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001876:	f000 fd81 	bl	800237c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800187a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800187e:	f000 fd7d 	bl	800237c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800188c:	4802      	ldr	r0, [pc, #8]	; (8001898 <OTG_FS_IRQHandler+0x10>)
 800188e:	f001 fd03 	bl	8003298 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	200008f8 	.word	0x200008f8

0800189c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	e00a      	b.n	80018c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018ae:	f3af 8000 	nop.w
 80018b2:	4601      	mov	r1, r0
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	1c5a      	adds	r2, r3, #1
 80018b8:	60ba      	str	r2, [r7, #8]
 80018ba:	b2ca      	uxtb	r2, r1
 80018bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	3301      	adds	r3, #1
 80018c2:	617b      	str	r3, [r7, #20]
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	dbf0      	blt.n	80018ae <_read+0x12>
  }

  return len;
 80018cc:	687b      	ldr	r3, [r7, #4]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b086      	sub	sp, #24
 80018da:	af00      	add	r7, sp, #0
 80018dc:	60f8      	str	r0, [r7, #12]
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	e009      	b.n	80018fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	60ba      	str	r2, [r7, #8]
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	3301      	adds	r3, #1
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	429a      	cmp	r2, r3
 8001902:	dbf1      	blt.n	80018e8 <_write+0x12>
  }
  return len;
 8001904:	687b      	ldr	r3, [r7, #4]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <_close>:

int _close(int file)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001916:	f04f 33ff 	mov.w	r3, #4294967295
}
 800191a:	4618      	mov	r0, r3
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001936:	605a      	str	r2, [r3, #4]
  return 0;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <_isatty>:

int _isatty(int file)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800194e:	2301      	movs	r3, #1
}
 8001950:	4618      	mov	r0, r3
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001980:	4a14      	ldr	r2, [pc, #80]	; (80019d4 <_sbrk+0x5c>)
 8001982:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <_sbrk+0x60>)
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800198c:	4b13      	ldr	r3, [pc, #76]	; (80019dc <_sbrk+0x64>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d102      	bne.n	800199a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <_sbrk+0x64>)
 8001996:	4a12      	ldr	r2, [pc, #72]	; (80019e0 <_sbrk+0x68>)
 8001998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <_sbrk+0x64>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d207      	bcs.n	80019b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019a8:	f008 fef8 	bl	800a79c <__errno>
 80019ac:	4603      	mov	r3, r0
 80019ae:	220c      	movs	r2, #12
 80019b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019b2:	f04f 33ff 	mov.w	r3, #4294967295
 80019b6:	e009      	b.n	80019cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b8:	4b08      	ldr	r3, [pc, #32]	; (80019dc <_sbrk+0x64>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019be:	4b07      	ldr	r3, [pc, #28]	; (80019dc <_sbrk+0x64>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4413      	add	r3, r2
 80019c6:	4a05      	ldr	r2, [pc, #20]	; (80019dc <_sbrk+0x64>)
 80019c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ca:	68fb      	ldr	r3, [r7, #12]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20018000 	.word	0x20018000
 80019d8:	00000400 	.word	0x00000400
 80019dc:	200003ec 	.word	0x200003ec
 80019e0:	20000f70 	.word	0x20000f70

080019e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <SystemInit+0x20>)
 80019ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ee:	4a05      	ldr	r2, [pc, #20]	; (8001a04 <SystemInit+0x20>)
 80019f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a0c:	f7ff ffea 	bl	80019e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a10:	480c      	ldr	r0, [pc, #48]	; (8001a44 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a12:	490d      	ldr	r1, [pc, #52]	; (8001a48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a14:	4a0d      	ldr	r2, [pc, #52]	; (8001a4c <LoopForever+0xe>)
  movs r3, #0
 8001a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a18:	e002      	b.n	8001a20 <LoopCopyDataInit>

08001a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a1e:	3304      	adds	r3, #4

08001a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a24:	d3f9      	bcc.n	8001a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a26:	4a0a      	ldr	r2, [pc, #40]	; (8001a50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a28:	4c0a      	ldr	r4, [pc, #40]	; (8001a54 <LoopForever+0x16>)
  movs r3, #0
 8001a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a2c:	e001      	b.n	8001a32 <LoopFillZerobss>

08001a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a30:	3204      	adds	r2, #4

08001a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a34:	d3fb      	bcc.n	8001a2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a36:	f008 feb7 	bl	800a7a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a3a:	f7ff f8eb 	bl	8000c14 <main>

08001a3e <LoopForever>:

LoopForever:
    b LoopForever
 8001a3e:	e7fe      	b.n	8001a3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a40:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a48:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 8001a4c:	0800b450 	.word	0x0800b450
  ldr r2, =_sbss
 8001a50:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8001a54:	20000f6c 	.word	0x20000f6c

08001a58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a58:	e7fe      	b.n	8001a58 <ADC1_2_IRQHandler>

08001a5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a60:	2300      	movs	r3, #0
 8001a62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a64:	2003      	movs	r0, #3
 8001a66:	f000 f961 	bl	8001d2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	f000 f80e 	bl	8001a8c <HAL_InitTick>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d002      	beq.n	8001a7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	71fb      	strb	r3, [r7, #7]
 8001a7a:	e001      	b.n	8001a80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a7c:	f7ff fc9e 	bl	80013bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a80:	79fb      	ldrb	r3, [r7, #7]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a94:	2300      	movs	r3, #0
 8001a96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a98:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <HAL_InitTick+0x6c>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d023      	beq.n	8001ae8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001aa0:	4b16      	ldr	r3, [pc, #88]	; (8001afc <HAL_InitTick+0x70>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <HAL_InitTick+0x6c>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 f96d 	bl	8001d96 <HAL_SYSTICK_Config>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10f      	bne.n	8001ae2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b0f      	cmp	r3, #15
 8001ac6:	d809      	bhi.n	8001adc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad0:	f000 f937 	bl	8001d42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ad4:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <HAL_InitTick+0x74>)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	e007      	b.n	8001aec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	73fb      	strb	r3, [r7, #15]
 8001ae0:	e004      	b.n	8001aec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	73fb      	strb	r3, [r7, #15]
 8001ae6:	e001      	b.n	8001aec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000008 	.word	0x20000008
 8001afc:	20000000 	.word	0x20000000
 8001b00:	20000004 	.word	0x20000004

08001b04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_IncTick+0x20>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_IncTick+0x24>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4413      	add	r3, r2
 8001b14:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <HAL_IncTick+0x24>)
 8001b16:	6013      	str	r3, [r2, #0]
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	20000008 	.word	0x20000008
 8001b28:	200003f0 	.word	0x200003f0

08001b2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b30:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <HAL_GetTick+0x14>)
 8001b32:	681b      	ldr	r3, [r3, #0]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	200003f0 	.word	0x200003f0

08001b44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b4c:	f7ff ffee 	bl	8001b2c <HAL_GetTick>
 8001b50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b5c:	d005      	beq.n	8001b6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <HAL_Delay+0x44>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	461a      	mov	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4413      	add	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b6a:	bf00      	nop
 8001b6c:	f7ff ffde 	bl	8001b2c <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d8f7      	bhi.n	8001b6c <HAL_Delay+0x28>
  {
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	bf00      	nop
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000008 	.word	0x20000008

08001b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bbe:	4a04      	ldr	r2, [pc, #16]	; (8001bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	60d3      	str	r3, [r2, #12]
}
 8001bc4:	bf00      	nop
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd8:	4b04      	ldr	r3, [pc, #16]	; (8001bec <__NVIC_GetPriorityGrouping+0x18>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	0a1b      	lsrs	r3, r3, #8
 8001bde:	f003 0307 	and.w	r3, r3, #7
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	db0b      	blt.n	8001c1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	f003 021f 	and.w	r2, r3, #31
 8001c08:	4907      	ldr	r1, [pc, #28]	; (8001c28 <__NVIC_EnableIRQ+0x38>)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	095b      	lsrs	r3, r3, #5
 8001c10:	2001      	movs	r0, #1
 8001c12:	fa00 f202 	lsl.w	r2, r0, r2
 8001c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	e000e100 	.word	0xe000e100

08001c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	6039      	str	r1, [r7, #0]
 8001c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	db0a      	blt.n	8001c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	490c      	ldr	r1, [pc, #48]	; (8001c78 <__NVIC_SetPriority+0x4c>)
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	0112      	lsls	r2, r2, #4
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	440b      	add	r3, r1
 8001c50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c54:	e00a      	b.n	8001c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	4908      	ldr	r1, [pc, #32]	; (8001c7c <__NVIC_SetPriority+0x50>)
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	3b04      	subs	r3, #4
 8001c64:	0112      	lsls	r2, r2, #4
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	440b      	add	r3, r1
 8001c6a:	761a      	strb	r2, [r3, #24]
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000e100 	.word	0xe000e100
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b089      	sub	sp, #36	; 0x24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f1c3 0307 	rsb	r3, r3, #7
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	bf28      	it	cs
 8001c9e:	2304      	movcs	r3, #4
 8001ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	2b06      	cmp	r3, #6
 8001ca8:	d902      	bls.n	8001cb0 <NVIC_EncodePriority+0x30>
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3b03      	subs	r3, #3
 8001cae:	e000      	b.n	8001cb2 <NVIC_EncodePriority+0x32>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43da      	mvns	r2, r3
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd2:	43d9      	mvns	r1, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd8:	4313      	orrs	r3, r2
         );
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3724      	adds	r7, #36	; 0x24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
	...

08001ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf8:	d301      	bcc.n	8001cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e00f      	b.n	8001d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cfe:	4a0a      	ldr	r2, [pc, #40]	; (8001d28 <SysTick_Config+0x40>)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d06:	210f      	movs	r1, #15
 8001d08:	f04f 30ff 	mov.w	r0, #4294967295
 8001d0c:	f7ff ff8e 	bl	8001c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <SysTick_Config+0x40>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d16:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <SysTick_Config+0x40>)
 8001d18:	2207      	movs	r2, #7
 8001d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	e000e010 	.word	0xe000e010

08001d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff ff29 	bl	8001b8c <__NVIC_SetPriorityGrouping>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b086      	sub	sp, #24
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	4603      	mov	r3, r0
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
 8001d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d54:	f7ff ff3e 	bl	8001bd4 <__NVIC_GetPriorityGrouping>
 8001d58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	68b9      	ldr	r1, [r7, #8]
 8001d5e:	6978      	ldr	r0, [r7, #20]
 8001d60:	f7ff ff8e 	bl	8001c80 <NVIC_EncodePriority>
 8001d64:	4602      	mov	r2, r0
 8001d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ff5d 	bl	8001c2c <__NVIC_SetPriority>
}
 8001d72:	bf00      	nop
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	4603      	mov	r3, r0
 8001d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff31 	bl	8001bf0 <__NVIC_EnableIRQ>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7ff ffa2 	bl	8001ce8 <SysTick_Config>
 8001da4:	4603      	mov	r3, r0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e0ac      	b.n	8001f1c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f000 f8b2 	bl	8001f30 <DFSDM_GetChannelFromInstance>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	4a55      	ldr	r2, [pc, #340]	; (8001f24 <HAL_DFSDM_ChannelInit+0x174>)
 8001dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e09f      	b.n	8001f1c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff fb11 	bl	8001404 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001de2:	4b51      	ldr	r3, [pc, #324]	; (8001f28 <HAL_DFSDM_ChannelInit+0x178>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	3301      	adds	r3, #1
 8001de8:	4a4f      	ldr	r2, [pc, #316]	; (8001f28 <HAL_DFSDM_ChannelInit+0x178>)
 8001dea:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001dec:	4b4e      	ldr	r3, [pc, #312]	; (8001f28 <HAL_DFSDM_ChannelInit+0x178>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d125      	bne.n	8001e40 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001df4:	4b4d      	ldr	r3, [pc, #308]	; (8001f2c <HAL_DFSDM_ChannelInit+0x17c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a4c      	ldr	r2, [pc, #304]	; (8001f2c <HAL_DFSDM_ChannelInit+0x17c>)
 8001dfa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001dfe:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001e00:	4b4a      	ldr	r3, [pc, #296]	; (8001f2c <HAL_DFSDM_ChannelInit+0x17c>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	4948      	ldr	r1, [pc, #288]	; (8001f2c <HAL_DFSDM_ChannelInit+0x17c>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001e0e:	4b47      	ldr	r3, [pc, #284]	; (8001f2c <HAL_DFSDM_ChannelInit+0x17c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a46      	ldr	r2, [pc, #280]	; (8001f2c <HAL_DFSDM_ChannelInit+0x17c>)
 8001e14:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001e18:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	791b      	ldrb	r3, [r3, #4]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d108      	bne.n	8001e34 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001e22:	4b42      	ldr	r3, [pc, #264]	; (8001f2c <HAL_DFSDM_ChannelInit+0x17c>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	041b      	lsls	r3, r3, #16
 8001e2e:	493f      	ldr	r1, [pc, #252]	; (8001f2c <HAL_DFSDM_ChannelInit+0x17c>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001e34:	4b3d      	ldr	r3, [pc, #244]	; (8001f2c <HAL_DFSDM_ChannelInit+0x17c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a3c      	ldr	r2, [pc, #240]	; (8001f2c <HAL_DFSDM_ChannelInit+0x17c>)
 8001e3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e3e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001e4e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6819      	ldr	r1, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001e5e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001e64:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 020f 	bic.w	r2, r2, #15
 8001e7c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6819      	ldr	r1, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001ea4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6899      	ldr	r1, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f002 0207 	and.w	r2, r2, #7
 8001ed0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6859      	ldr	r1, [r3, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001edc:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001efc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 f810 	bl	8001f30 <DFSDM_GetChannelFromInstance>
 8001f10:	4602      	mov	r2, r0
 8001f12:	4904      	ldr	r1, [pc, #16]	; (8001f24 <HAL_DFSDM_ChannelInit+0x174>)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	200003f8 	.word	0x200003f8
 8001f28:	200003f4 	.word	0x200003f4
 8001f2c:	40016000 	.word	0x40016000

08001f30 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a1c      	ldr	r2, [pc, #112]	; (8001fac <DFSDM_GetChannelFromInstance+0x7c>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d102      	bne.n	8001f46 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	e02b      	b.n	8001f9e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a19      	ldr	r2, [pc, #100]	; (8001fb0 <DFSDM_GetChannelFromInstance+0x80>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d102      	bne.n	8001f54 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	e024      	b.n	8001f9e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a17      	ldr	r2, [pc, #92]	; (8001fb4 <DFSDM_GetChannelFromInstance+0x84>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d102      	bne.n	8001f62 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	e01d      	b.n	8001f9e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a14      	ldr	r2, [pc, #80]	; (8001fb8 <DFSDM_GetChannelFromInstance+0x88>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d102      	bne.n	8001f70 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001f6a:	2304      	movs	r3, #4
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	e016      	b.n	8001f9e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a12      	ldr	r2, [pc, #72]	; (8001fbc <DFSDM_GetChannelFromInstance+0x8c>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d102      	bne.n	8001f7e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001f78:	2305      	movs	r3, #5
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	e00f      	b.n	8001f9e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a0f      	ldr	r2, [pc, #60]	; (8001fc0 <DFSDM_GetChannelFromInstance+0x90>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d102      	bne.n	8001f8c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001f86:	2306      	movs	r3, #6
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	e008      	b.n	8001f9e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a0d      	ldr	r2, [pc, #52]	; (8001fc4 <DFSDM_GetChannelFromInstance+0x94>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d102      	bne.n	8001f9a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001f94:	2307      	movs	r3, #7
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	e001      	b.n	8001f9e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	40016000 	.word	0x40016000
 8001fb0:	40016020 	.word	0x40016020
 8001fb4:	40016040 	.word	0x40016040
 8001fb8:	40016080 	.word	0x40016080
 8001fbc:	400160a0 	.word	0x400160a0
 8001fc0:	400160c0 	.word	0x400160c0
 8001fc4:	400160e0 	.word	0x400160e0

08001fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b087      	sub	sp, #28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fd6:	e17f      	b.n	80022d8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	2101      	movs	r1, #1
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 8171 	beq.w	80022d2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d005      	beq.n	8002008 <HAL_GPIO_Init+0x40>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d130      	bne.n	800206a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	2203      	movs	r2, #3
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4013      	ands	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4313      	orrs	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800203e:	2201      	movs	r2, #1
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	4013      	ands	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	091b      	lsrs	r3, r3, #4
 8002054:	f003 0201 	and.w	r2, r3, #1
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4313      	orrs	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	2b03      	cmp	r3, #3
 8002074:	d118      	bne.n	80020a8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800207c:	2201      	movs	r2, #1
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	4013      	ands	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	08db      	lsrs	r3, r3, #3
 8002092:	f003 0201 	and.w	r2, r3, #1
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	4313      	orrs	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 0303 	and.w	r3, r3, #3
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d017      	beq.n	80020e4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	2203      	movs	r2, #3
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	4013      	ands	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	4313      	orrs	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d123      	bne.n	8002138 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	08da      	lsrs	r2, r3, #3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3208      	adds	r2, #8
 80020f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	220f      	movs	r2, #15
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4013      	ands	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	691a      	ldr	r2, [r3, #16]
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	4313      	orrs	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	08da      	lsrs	r2, r3, #3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	3208      	adds	r2, #8
 8002132:	6939      	ldr	r1, [r7, #16]
 8002134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	2203      	movs	r2, #3
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	4013      	ands	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 0203 	and.w	r2, r3, #3
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	4313      	orrs	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 80ac 	beq.w	80022d2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800217a:	4b5f      	ldr	r3, [pc, #380]	; (80022f8 <HAL_GPIO_Init+0x330>)
 800217c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800217e:	4a5e      	ldr	r2, [pc, #376]	; (80022f8 <HAL_GPIO_Init+0x330>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	6613      	str	r3, [r2, #96]	; 0x60
 8002186:	4b5c      	ldr	r3, [pc, #368]	; (80022f8 <HAL_GPIO_Init+0x330>)
 8002188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002192:	4a5a      	ldr	r2, [pc, #360]	; (80022fc <HAL_GPIO_Init+0x334>)
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	089b      	lsrs	r3, r3, #2
 8002198:	3302      	adds	r3, #2
 800219a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800219e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	220f      	movs	r2, #15
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43db      	mvns	r3, r3
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	4013      	ands	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021bc:	d025      	beq.n	800220a <HAL_GPIO_Init+0x242>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a4f      	ldr	r2, [pc, #316]	; (8002300 <HAL_GPIO_Init+0x338>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d01f      	beq.n	8002206 <HAL_GPIO_Init+0x23e>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a4e      	ldr	r2, [pc, #312]	; (8002304 <HAL_GPIO_Init+0x33c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d019      	beq.n	8002202 <HAL_GPIO_Init+0x23a>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a4d      	ldr	r2, [pc, #308]	; (8002308 <HAL_GPIO_Init+0x340>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d013      	beq.n	80021fe <HAL_GPIO_Init+0x236>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a4c      	ldr	r2, [pc, #304]	; (800230c <HAL_GPIO_Init+0x344>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d00d      	beq.n	80021fa <HAL_GPIO_Init+0x232>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a4b      	ldr	r2, [pc, #300]	; (8002310 <HAL_GPIO_Init+0x348>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d007      	beq.n	80021f6 <HAL_GPIO_Init+0x22e>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a4a      	ldr	r2, [pc, #296]	; (8002314 <HAL_GPIO_Init+0x34c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d101      	bne.n	80021f2 <HAL_GPIO_Init+0x22a>
 80021ee:	2306      	movs	r3, #6
 80021f0:	e00c      	b.n	800220c <HAL_GPIO_Init+0x244>
 80021f2:	2307      	movs	r3, #7
 80021f4:	e00a      	b.n	800220c <HAL_GPIO_Init+0x244>
 80021f6:	2305      	movs	r3, #5
 80021f8:	e008      	b.n	800220c <HAL_GPIO_Init+0x244>
 80021fa:	2304      	movs	r3, #4
 80021fc:	e006      	b.n	800220c <HAL_GPIO_Init+0x244>
 80021fe:	2303      	movs	r3, #3
 8002200:	e004      	b.n	800220c <HAL_GPIO_Init+0x244>
 8002202:	2302      	movs	r3, #2
 8002204:	e002      	b.n	800220c <HAL_GPIO_Init+0x244>
 8002206:	2301      	movs	r3, #1
 8002208:	e000      	b.n	800220c <HAL_GPIO_Init+0x244>
 800220a:	2300      	movs	r3, #0
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	f002 0203 	and.w	r2, r2, #3
 8002212:	0092      	lsls	r2, r2, #2
 8002214:	4093      	lsls	r3, r2
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	4313      	orrs	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800221c:	4937      	ldr	r1, [pc, #220]	; (80022fc <HAL_GPIO_Init+0x334>)
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	089b      	lsrs	r3, r3, #2
 8002222:	3302      	adds	r3, #2
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800222a:	4b3b      	ldr	r3, [pc, #236]	; (8002318 <HAL_GPIO_Init+0x350>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	43db      	mvns	r3, r3
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	4013      	ands	r3, r2
 8002238:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4313      	orrs	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800224e:	4a32      	ldr	r2, [pc, #200]	; (8002318 <HAL_GPIO_Init+0x350>)
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002254:	4b30      	ldr	r3, [pc, #192]	; (8002318 <HAL_GPIO_Init+0x350>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	43db      	mvns	r3, r3
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	4013      	ands	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	4313      	orrs	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002278:	4a27      	ldr	r2, [pc, #156]	; (8002318 <HAL_GPIO_Init+0x350>)
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800227e:	4b26      	ldr	r3, [pc, #152]	; (8002318 <HAL_GPIO_Init+0x350>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	43db      	mvns	r3, r3
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	4013      	ands	r3, r2
 800228c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4313      	orrs	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022a2:	4a1d      	ldr	r2, [pc, #116]	; (8002318 <HAL_GPIO_Init+0x350>)
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80022a8:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <HAL_GPIO_Init+0x350>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	43db      	mvns	r3, r3
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4013      	ands	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022cc:	4a12      	ldr	r2, [pc, #72]	; (8002318 <HAL_GPIO_Init+0x350>)
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	3301      	adds	r3, #1
 80022d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	fa22 f303 	lsr.w	r3, r2, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f47f ae78 	bne.w	8001fd8 <HAL_GPIO_Init+0x10>
  }
}
 80022e8:	bf00      	nop
 80022ea:	bf00      	nop
 80022ec:	371c      	adds	r7, #28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	40021000 	.word	0x40021000
 80022fc:	40010000 	.word	0x40010000
 8002300:	48000400 	.word	0x48000400
 8002304:	48000800 	.word	0x48000800
 8002308:	48000c00 	.word	0x48000c00
 800230c:	48001000 	.word	0x48001000
 8002310:	48001400 	.word	0x48001400
 8002314:	48001800 	.word	0x48001800
 8002318:	40010400 	.word	0x40010400

0800231c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691a      	ldr	r2, [r3, #16]
 800232c:	887b      	ldrh	r3, [r7, #2]
 800232e:	4013      	ands	r3, r2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d002      	beq.n	800233a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002334:	2301      	movs	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
 8002338:	e001      	b.n	800233e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800233a:	2300      	movs	r3, #0
 800233c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800233e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	807b      	strh	r3, [r7, #2]
 8002358:	4613      	mov	r3, r2
 800235a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800235c:	787b      	ldrb	r3, [r7, #1]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002362:	887a      	ldrh	r2, [r7, #2]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002368:	e002      	b.n	8002370 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800236a:	887a      	ldrh	r2, [r7, #2]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002386:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	88fb      	ldrh	r3, [r7, #6]
 800238c:	4013      	ands	r3, r2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d006      	beq.n	80023a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002392:	4a05      	ldr	r2, [pc, #20]	; (80023a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002394:	88fb      	ldrh	r3, [r7, #6]
 8002396:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002398:	88fb      	ldrh	r3, [r7, #6]
 800239a:	4618      	mov	r0, r3
 800239c:	f000 f806 	bl	80023ac <HAL_GPIO_EXTI_Callback>
  }
}
 80023a0:	bf00      	nop
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40010400 	.word	0x40010400

080023ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e08d      	b.n	80024f0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d106      	bne.n	80023ee <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff f86f 	bl	80014cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2224      	movs	r2, #36	; 0x24
 80023f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 0201 	bic.w	r2, r2, #1
 8002404:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002412:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002422:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d107      	bne.n	800243c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002438:	609a      	str	r2, [r3, #8]
 800243a:	e006      	b.n	800244a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002448:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	2b02      	cmp	r3, #2
 8002450:	d108      	bne.n	8002464 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	e007      	b.n	8002474 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002472:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6812      	ldr	r2, [r2, #0]
 800247e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002486:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002496:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691a      	ldr	r2, [r3, #16]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69d9      	ldr	r1, [r3, #28]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a1a      	ldr	r2, [r3, #32]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	430a      	orrs	r2, r1
 80024c0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f042 0201 	orr.w	r2, r2, #1
 80024d0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2220      	movs	r2, #32
 80024dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b088      	sub	sp, #32
 80024fc:	af02      	add	r7, sp, #8
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	4608      	mov	r0, r1
 8002502:	4611      	mov	r1, r2
 8002504:	461a      	mov	r2, r3
 8002506:	4603      	mov	r3, r0
 8002508:	817b      	strh	r3, [r7, #10]
 800250a:	460b      	mov	r3, r1
 800250c:	813b      	strh	r3, [r7, #8]
 800250e:	4613      	mov	r3, r2
 8002510:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b20      	cmp	r3, #32
 800251c:	f040 80f9 	bne.w	8002712 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002520:	6a3b      	ldr	r3, [r7, #32]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <HAL_I2C_Mem_Write+0x34>
 8002526:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002528:	2b00      	cmp	r3, #0
 800252a:	d105      	bne.n	8002538 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002532:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e0ed      	b.n	8002714 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800253e:	2b01      	cmp	r3, #1
 8002540:	d101      	bne.n	8002546 <HAL_I2C_Mem_Write+0x4e>
 8002542:	2302      	movs	r3, #2
 8002544:	e0e6      	b.n	8002714 <HAL_I2C_Mem_Write+0x21c>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800254e:	f7ff faed 	bl	8001b2c <HAL_GetTick>
 8002552:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	2319      	movs	r3, #25
 800255a:	2201      	movs	r2, #1
 800255c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 fac3 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0d1      	b.n	8002714 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2221      	movs	r2, #33	; 0x21
 8002574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2240      	movs	r2, #64	; 0x40
 800257c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6a3a      	ldr	r2, [r7, #32]
 800258a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002590:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002598:	88f8      	ldrh	r0, [r7, #6]
 800259a:	893a      	ldrh	r2, [r7, #8]
 800259c:	8979      	ldrh	r1, [r7, #10]
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	9301      	str	r3, [sp, #4]
 80025a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	4603      	mov	r3, r0
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 f9d3 	bl	8002954 <I2C_RequestMemoryWrite>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e0a9      	b.n	8002714 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	2bff      	cmp	r3, #255	; 0xff
 80025c8:	d90e      	bls.n	80025e8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	22ff      	movs	r2, #255	; 0xff
 80025ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	8979      	ldrh	r1, [r7, #10]
 80025d8:	2300      	movs	r3, #0
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 fc3d 	bl	8002e60 <I2C_TransferConfig>
 80025e6:	e00f      	b.n	8002608 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	8979      	ldrh	r1, [r7, #10]
 80025fa:	2300      	movs	r3, #0
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 fc2c 	bl	8002e60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 fabc 	bl	8002b8a <I2C_WaitOnTXISFlagUntilTimeout>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e07b      	b.n	8002714 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	781a      	ldrb	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	1c5a      	adds	r2, r3, #1
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002636:	b29b      	uxth	r3, r3
 8002638:	3b01      	subs	r3, #1
 800263a:	b29a      	uxth	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002644:	3b01      	subs	r3, #1
 8002646:	b29a      	uxth	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002650:	b29b      	uxth	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d034      	beq.n	80026c0 <HAL_I2C_Mem_Write+0x1c8>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265a:	2b00      	cmp	r3, #0
 800265c:	d130      	bne.n	80026c0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002664:	2200      	movs	r2, #0
 8002666:	2180      	movs	r1, #128	; 0x80
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 fa3f 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e04d      	b.n	8002714 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267c:	b29b      	uxth	r3, r3
 800267e:	2bff      	cmp	r3, #255	; 0xff
 8002680:	d90e      	bls.n	80026a0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	22ff      	movs	r2, #255	; 0xff
 8002686:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268c:	b2da      	uxtb	r2, r3
 800268e:	8979      	ldrh	r1, [r7, #10]
 8002690:	2300      	movs	r3, #0
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 fbe1 	bl	8002e60 <I2C_TransferConfig>
 800269e:	e00f      	b.n	80026c0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ae:	b2da      	uxtb	r2, r3
 80026b0:	8979      	ldrh	r1, [r7, #10]
 80026b2:	2300      	movs	r3, #0
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 fbd0 	bl	8002e60 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d19e      	bne.n	8002608 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 faa2 	bl	8002c18 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e01a      	b.n	8002714 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2220      	movs	r2, #32
 80026e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6859      	ldr	r1, [r3, #4]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	4b0a      	ldr	r3, [pc, #40]	; (800271c <HAL_I2C_Mem_Write+0x224>)
 80026f2:	400b      	ands	r3, r1
 80026f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2220      	movs	r2, #32
 80026fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800270e:	2300      	movs	r3, #0
 8002710:	e000      	b.n	8002714 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002712:	2302      	movs	r3, #2
  }
}
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	fe00e800 	.word	0xfe00e800

08002720 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af02      	add	r7, sp, #8
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	4608      	mov	r0, r1
 800272a:	4611      	mov	r1, r2
 800272c:	461a      	mov	r2, r3
 800272e:	4603      	mov	r3, r0
 8002730:	817b      	strh	r3, [r7, #10]
 8002732:	460b      	mov	r3, r1
 8002734:	813b      	strh	r3, [r7, #8]
 8002736:	4613      	mov	r3, r2
 8002738:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b20      	cmp	r3, #32
 8002744:	f040 80fd 	bne.w	8002942 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002748:	6a3b      	ldr	r3, [r7, #32]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d002      	beq.n	8002754 <HAL_I2C_Mem_Read+0x34>
 800274e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002750:	2b00      	cmp	r3, #0
 8002752:	d105      	bne.n	8002760 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800275a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e0f1      	b.n	8002944 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002766:	2b01      	cmp	r3, #1
 8002768:	d101      	bne.n	800276e <HAL_I2C_Mem_Read+0x4e>
 800276a:	2302      	movs	r3, #2
 800276c:	e0ea      	b.n	8002944 <HAL_I2C_Mem_Read+0x224>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002776:	f7ff f9d9 	bl	8001b2c <HAL_GetTick>
 800277a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	2319      	movs	r3, #25
 8002782:	2201      	movs	r2, #1
 8002784:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 f9af 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e0d5      	b.n	8002944 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2222      	movs	r2, #34	; 0x22
 800279c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2240      	movs	r2, #64	; 0x40
 80027a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6a3a      	ldr	r2, [r7, #32]
 80027b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027c0:	88f8      	ldrh	r0, [r7, #6]
 80027c2:	893a      	ldrh	r2, [r7, #8]
 80027c4:	8979      	ldrh	r1, [r7, #10]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	9301      	str	r3, [sp, #4]
 80027ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	4603      	mov	r3, r0
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f000 f913 	bl	80029fc <I2C_RequestMemoryRead>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d005      	beq.n	80027e8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e0ad      	b.n	8002944 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	2bff      	cmp	r3, #255	; 0xff
 80027f0:	d90e      	bls.n	8002810 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	22ff      	movs	r2, #255	; 0xff
 80027f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	8979      	ldrh	r1, [r7, #10]
 8002800:	4b52      	ldr	r3, [pc, #328]	; (800294c <HAL_I2C_Mem_Read+0x22c>)
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 fb29 	bl	8002e60 <I2C_TransferConfig>
 800280e:	e00f      	b.n	8002830 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002814:	b29a      	uxth	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281e:	b2da      	uxtb	r2, r3
 8002820:	8979      	ldrh	r1, [r7, #10]
 8002822:	4b4a      	ldr	r3, [pc, #296]	; (800294c <HAL_I2C_Mem_Read+0x22c>)
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f000 fb18 	bl	8002e60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002836:	2200      	movs	r2, #0
 8002838:	2104      	movs	r1, #4
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f000 f956 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e07c      	b.n	8002944 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002866:	3b01      	subs	r3, #1
 8002868:	b29a      	uxth	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002872:	b29b      	uxth	r3, r3
 8002874:	3b01      	subs	r3, #1
 8002876:	b29a      	uxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002880:	b29b      	uxth	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d034      	beq.n	80028f0 <HAL_I2C_Mem_Read+0x1d0>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288a:	2b00      	cmp	r3, #0
 800288c:	d130      	bne.n	80028f0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002894:	2200      	movs	r2, #0
 8002896:	2180      	movs	r1, #128	; 0x80
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f000 f927 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e04d      	b.n	8002944 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	2bff      	cmp	r3, #255	; 0xff
 80028b0:	d90e      	bls.n	80028d0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	22ff      	movs	r2, #255	; 0xff
 80028b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	8979      	ldrh	r1, [r7, #10]
 80028c0:	2300      	movs	r3, #0
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 fac9 	bl	8002e60 <I2C_TransferConfig>
 80028ce:	e00f      	b.n	80028f0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	8979      	ldrh	r1, [r7, #10]
 80028e2:	2300      	movs	r3, #0
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 fab8 	bl	8002e60 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d19a      	bne.n	8002830 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 f98a 	bl	8002c18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e01a      	b.n	8002944 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2220      	movs	r2, #32
 8002914:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6859      	ldr	r1, [r3, #4]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <HAL_I2C_Mem_Read+0x230>)
 8002922:	400b      	ands	r3, r1
 8002924:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2220      	movs	r2, #32
 800292a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	e000      	b.n	8002944 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002942:	2302      	movs	r3, #2
  }
}
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	80002400 	.word	0x80002400
 8002950:	fe00e800 	.word	0xfe00e800

08002954 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af02      	add	r7, sp, #8
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	4608      	mov	r0, r1
 800295e:	4611      	mov	r1, r2
 8002960:	461a      	mov	r2, r3
 8002962:	4603      	mov	r3, r0
 8002964:	817b      	strh	r3, [r7, #10]
 8002966:	460b      	mov	r3, r1
 8002968:	813b      	strh	r3, [r7, #8]
 800296a:	4613      	mov	r3, r2
 800296c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800296e:	88fb      	ldrh	r3, [r7, #6]
 8002970:	b2da      	uxtb	r2, r3
 8002972:	8979      	ldrh	r1, [r7, #10]
 8002974:	4b20      	ldr	r3, [pc, #128]	; (80029f8 <I2C_RequestMemoryWrite+0xa4>)
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 fa6f 	bl	8002e60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002982:	69fa      	ldr	r2, [r7, #28]
 8002984:	69b9      	ldr	r1, [r7, #24]
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 f8ff 	bl	8002b8a <I2C_WaitOnTXISFlagUntilTimeout>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e02c      	b.n	80029f0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002996:	88fb      	ldrh	r3, [r7, #6]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d105      	bne.n	80029a8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800299c:	893b      	ldrh	r3, [r7, #8]
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	629a      	str	r2, [r3, #40]	; 0x28
 80029a6:	e015      	b.n	80029d4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80029a8:	893b      	ldrh	r3, [r7, #8]
 80029aa:	0a1b      	lsrs	r3, r3, #8
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029b6:	69fa      	ldr	r2, [r7, #28]
 80029b8:	69b9      	ldr	r1, [r7, #24]
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 f8e5 	bl	8002b8a <I2C_WaitOnTXISFlagUntilTimeout>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e012      	b.n	80029f0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029ca:	893b      	ldrh	r3, [r7, #8]
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	2200      	movs	r2, #0
 80029dc:	2180      	movs	r1, #128	; 0x80
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 f884 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	80002000 	.word	0x80002000

080029fc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af02      	add	r7, sp, #8
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	4608      	mov	r0, r1
 8002a06:	4611      	mov	r1, r2
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	817b      	strh	r3, [r7, #10]
 8002a0e:	460b      	mov	r3, r1
 8002a10:	813b      	strh	r3, [r7, #8]
 8002a12:	4613      	mov	r3, r2
 8002a14:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002a16:	88fb      	ldrh	r3, [r7, #6]
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	8979      	ldrh	r1, [r7, #10]
 8002a1c:	4b20      	ldr	r3, [pc, #128]	; (8002aa0 <I2C_RequestMemoryRead+0xa4>)
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	2300      	movs	r3, #0
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 fa1c 	bl	8002e60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a28:	69fa      	ldr	r2, [r7, #28]
 8002a2a:	69b9      	ldr	r1, [r7, #24]
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f000 f8ac 	bl	8002b8a <I2C_WaitOnTXISFlagUntilTimeout>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e02c      	b.n	8002a96 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a3c:	88fb      	ldrh	r3, [r7, #6]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d105      	bne.n	8002a4e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a42:	893b      	ldrh	r3, [r7, #8]
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	629a      	str	r2, [r3, #40]	; 0x28
 8002a4c:	e015      	b.n	8002a7a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a4e:	893b      	ldrh	r3, [r7, #8]
 8002a50:	0a1b      	lsrs	r3, r3, #8
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a5c:	69fa      	ldr	r2, [r7, #28]
 8002a5e:	69b9      	ldr	r1, [r7, #24]
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 f892 	bl	8002b8a <I2C_WaitOnTXISFlagUntilTimeout>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e012      	b.n	8002a96 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a70:	893b      	ldrh	r3, [r7, #8]
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	2200      	movs	r2, #0
 8002a82:	2140      	movs	r1, #64	; 0x40
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 f831 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e000      	b.n	8002a96 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	80002000 	.word	0x80002000

08002aa4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d103      	bne.n	8002ac2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d007      	beq.n	8002ae0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	699a      	ldr	r2, [r3, #24]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0201 	orr.w	r2, r2, #1
 8002ade:	619a      	str	r2, [r3, #24]
  }
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	4613      	mov	r3, r2
 8002afa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002afc:	e031      	b.n	8002b62 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b04:	d02d      	beq.n	8002b62 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b06:	f7ff f811 	bl	8001b2c <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d302      	bcc.n	8002b1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d122      	bne.n	8002b62 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699a      	ldr	r2, [r3, #24]
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	4013      	ands	r3, r2
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	bf0c      	ite	eq
 8002b2c:	2301      	moveq	r3, #1
 8002b2e:	2300      	movne	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	461a      	mov	r2, r3
 8002b34:	79fb      	ldrb	r3, [r7, #7]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d113      	bne.n	8002b62 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3e:	f043 0220 	orr.w	r2, r3, #32
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2220      	movs	r2, #32
 8002b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e00f      	b.n	8002b82 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	699a      	ldr	r2, [r3, #24]
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	bf0c      	ite	eq
 8002b72:	2301      	moveq	r3, #1
 8002b74:	2300      	movne	r3, #0
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	461a      	mov	r2, r3
 8002b7a:	79fb      	ldrb	r3, [r7, #7]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d0be      	beq.n	8002afe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b084      	sub	sp, #16
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b96:	e033      	b.n	8002c00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	68b9      	ldr	r1, [r7, #8]
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f000 f87f 	bl	8002ca0 <I2C_IsErrorOccurred>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e031      	b.n	8002c10 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb2:	d025      	beq.n	8002c00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb4:	f7fe ffba 	bl	8001b2c <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d302      	bcc.n	8002bca <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d11a      	bne.n	8002c00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d013      	beq.n	8002c00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bdc:	f043 0220 	orr.w	r2, r3, #32
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2220      	movs	r2, #32
 8002be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e007      	b.n	8002c10 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d1c4      	bne.n	8002b98 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c24:	e02f      	b.n	8002c86 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	68b9      	ldr	r1, [r7, #8]
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 f838 	bl	8002ca0 <I2C_IsErrorOccurred>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e02d      	b.n	8002c96 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c3a:	f7fe ff77 	bl	8001b2c <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d302      	bcc.n	8002c50 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d11a      	bne.n	8002c86 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	f003 0320 	and.w	r3, r3, #32
 8002c5a:	2b20      	cmp	r3, #32
 8002c5c:	d013      	beq.n	8002c86 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c62:	f043 0220 	orr.w	r2, r3, #32
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e007      	b.n	8002c96 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	f003 0320 	and.w	r3, r3, #32
 8002c90:	2b20      	cmp	r3, #32
 8002c92:	d1c8      	bne.n	8002c26 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08a      	sub	sp, #40	; 0x28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cac:	2300      	movs	r3, #0
 8002cae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	f003 0310 	and.w	r3, r3, #16
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d068      	beq.n	8002d9e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2210      	movs	r2, #16
 8002cd2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cd4:	e049      	b.n	8002d6a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cdc:	d045      	beq.n	8002d6a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002cde:	f7fe ff25 	bl	8001b2c <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d302      	bcc.n	8002cf4 <I2C_IsErrorOccurred+0x54>
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d13a      	bne.n	8002d6a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cfe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d06:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d16:	d121      	bne.n	8002d5c <I2C_IsErrorOccurred+0xbc>
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d1e:	d01d      	beq.n	8002d5c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002d20:	7cfb      	ldrb	r3, [r7, #19]
 8002d22:	2b20      	cmp	r3, #32
 8002d24:	d01a      	beq.n	8002d5c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d34:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d36:	f7fe fef9 	bl	8001b2c <HAL_GetTick>
 8002d3a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d3c:	e00e      	b.n	8002d5c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d3e:	f7fe fef5 	bl	8001b2c <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b19      	cmp	r3, #25
 8002d4a:	d907      	bls.n	8002d5c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	f043 0320 	orr.w	r3, r3, #32
 8002d52:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002d5a:	e006      	b.n	8002d6a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	f003 0320 	and.w	r3, r3, #32
 8002d66:	2b20      	cmp	r3, #32
 8002d68:	d1e9      	bne.n	8002d3e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	f003 0320 	and.w	r3, r3, #32
 8002d74:	2b20      	cmp	r3, #32
 8002d76:	d003      	beq.n	8002d80 <I2C_IsErrorOccurred+0xe0>
 8002d78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0aa      	beq.n	8002cd6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002d80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d103      	bne.n	8002d90 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	f043 0304 	orr.w	r3, r3, #4
 8002d96:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00b      	beq.n	8002dc8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	f043 0301 	orr.w	r3, r3, #1
 8002db6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dc0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00b      	beq.n	8002dea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	f043 0308 	orr.w	r3, r3, #8
 8002dd8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002de2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00b      	beq.n	8002e0c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002df4:	6a3b      	ldr	r3, [r7, #32]
 8002df6:	f043 0302 	orr.w	r3, r3, #2
 8002dfa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d01c      	beq.n	8002e4e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f7ff fe45 	bl	8002aa4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6859      	ldr	r1, [r3, #4]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	4b0d      	ldr	r3, [pc, #52]	; (8002e5c <I2C_IsErrorOccurred+0x1bc>)
 8002e26:	400b      	ands	r3, r1
 8002e28:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	431a      	orrs	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002e4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3728      	adds	r7, #40	; 0x28
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	fe00e800 	.word	0xfe00e800

08002e60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b087      	sub	sp, #28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	607b      	str	r3, [r7, #4]
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	817b      	strh	r3, [r7, #10]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e72:	897b      	ldrh	r3, [r7, #10]
 8002e74:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e78:	7a7b      	ldrb	r3, [r7, #9]
 8002e7a:	041b      	lsls	r3, r3, #16
 8002e7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e80:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e86:	6a3b      	ldr	r3, [r7, #32]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e8e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	0d5b      	lsrs	r3, r3, #21
 8002e9a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002e9e:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <I2C_TransferConfig+0x60>)
 8002ea0:	430b      	orrs	r3, r1
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	ea02 0103 	and.w	r1, r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002eb2:	bf00      	nop
 8002eb4:	371c      	adds	r7, #28
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	03ff63ff 	.word	0x03ff63ff

08002ec4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b20      	cmp	r3, #32
 8002ed8:	d138      	bne.n	8002f4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d101      	bne.n	8002ee8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	e032      	b.n	8002f4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2224      	movs	r2, #36	; 0x24
 8002ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0201 	bic.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6819      	ldr	r1, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0201 	orr.w	r2, r2, #1
 8002f36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	e000      	b.n	8002f4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f4c:	2302      	movs	r3, #2
  }
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b085      	sub	sp, #20
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
 8002f62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b20      	cmp	r3, #32
 8002f6e:	d139      	bne.n	8002fe4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d101      	bne.n	8002f7e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	e033      	b.n	8002fe6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2224      	movs	r2, #36	; 0x24
 8002f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 0201 	bic.w	r2, r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002fac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	021b      	lsls	r3, r3, #8
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0201 	orr.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	e000      	b.n	8002fe6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002fe4:	2302      	movs	r3, #2
  }
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ff2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ff4:	b08f      	sub	sp, #60	; 0x3c
 8002ff6:	af0a      	add	r7, sp, #40	; 0x28
 8002ff8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d101      	bne.n	8003004 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e116      	b.n	8003232 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f006 fe14 	bl	8009c4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2203      	movs	r2, #3
 8003028:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003034:	2b00      	cmp	r3, #0
 8003036:	d102      	bne.n	800303e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f003 fc09 	bl	800685a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	603b      	str	r3, [r7, #0]
 800304e:	687e      	ldr	r6, [r7, #4]
 8003050:	466d      	mov	r5, sp
 8003052:	f106 0410 	add.w	r4, r6, #16
 8003056:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003058:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800305a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800305c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800305e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003062:	e885 0003 	stmia.w	r5, {r0, r1}
 8003066:	1d33      	adds	r3, r6, #4
 8003068:	cb0e      	ldmia	r3, {r1, r2, r3}
 800306a:	6838      	ldr	r0, [r7, #0]
 800306c:	f003 fb1b 	bl	80066a6 <USB_CoreInit>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d005      	beq.n	8003082 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2202      	movs	r2, #2
 800307a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e0d7      	b.n	8003232 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2100      	movs	r1, #0
 8003088:	4618      	mov	r0, r3
 800308a:	f003 fbf7 	bl	800687c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800308e:	2300      	movs	r3, #0
 8003090:	73fb      	strb	r3, [r7, #15]
 8003092:	e04a      	b.n	800312a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003094:	7bfa      	ldrb	r2, [r7, #15]
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	4613      	mov	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	4413      	add	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	333d      	adds	r3, #61	; 0x3d
 80030a4:	2201      	movs	r2, #1
 80030a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030a8:	7bfa      	ldrb	r2, [r7, #15]
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	4613      	mov	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	4413      	add	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	440b      	add	r3, r1
 80030b6:	333c      	adds	r3, #60	; 0x3c
 80030b8:	7bfa      	ldrb	r2, [r7, #15]
 80030ba:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030bc:	7bfa      	ldrb	r2, [r7, #15]
 80030be:	7bfb      	ldrb	r3, [r7, #15]
 80030c0:	b298      	uxth	r0, r3
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	4613      	mov	r3, r2
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	4413      	add	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	440b      	add	r3, r1
 80030ce:	3356      	adds	r3, #86	; 0x56
 80030d0:	4602      	mov	r2, r0
 80030d2:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030d4:	7bfa      	ldrb	r2, [r7, #15]
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	4413      	add	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	3340      	adds	r3, #64	; 0x40
 80030e4:	2200      	movs	r2, #0
 80030e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030e8:	7bfa      	ldrb	r2, [r7, #15]
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	4613      	mov	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	3344      	adds	r3, #68	; 0x44
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030fc:	7bfa      	ldrb	r2, [r7, #15]
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	4613      	mov	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4413      	add	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	3348      	adds	r3, #72	; 0x48
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003110:	7bfa      	ldrb	r2, [r7, #15]
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	4613      	mov	r3, r2
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	4413      	add	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	334c      	adds	r3, #76	; 0x4c
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003124:	7bfb      	ldrb	r3, [r7, #15]
 8003126:	3301      	adds	r3, #1
 8003128:	73fb      	strb	r3, [r7, #15]
 800312a:	7bfa      	ldrb	r2, [r7, #15]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	429a      	cmp	r2, r3
 8003132:	d3af      	bcc.n	8003094 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003134:	2300      	movs	r3, #0
 8003136:	73fb      	strb	r3, [r7, #15]
 8003138:	e044      	b.n	80031c4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800313a:	7bfa      	ldrb	r2, [r7, #15]
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	4413      	add	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	440b      	add	r3, r1
 8003148:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800314c:	2200      	movs	r2, #0
 800314e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003150:	7bfa      	ldrb	r2, [r7, #15]
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003162:	7bfa      	ldrb	r2, [r7, #15]
 8003164:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003166:	7bfa      	ldrb	r2, [r7, #15]
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	4613      	mov	r3, r2
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	4413      	add	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	440b      	add	r3, r1
 8003174:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003178:	2200      	movs	r2, #0
 800317a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800317c:	7bfa      	ldrb	r2, [r7, #15]
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	4613      	mov	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	4413      	add	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800318e:	2200      	movs	r2, #0
 8003190:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003192:	7bfa      	ldrb	r2, [r7, #15]
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	4613      	mov	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	4413      	add	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	440b      	add	r3, r1
 80031a0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031a8:	7bfa      	ldrb	r2, [r7, #15]
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	4413      	add	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031be:	7bfb      	ldrb	r3, [r7, #15]
 80031c0:	3301      	adds	r3, #1
 80031c2:	73fb      	strb	r3, [r7, #15]
 80031c4:	7bfa      	ldrb	r2, [r7, #15]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d3b5      	bcc.n	800313a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	603b      	str	r3, [r7, #0]
 80031d4:	687e      	ldr	r6, [r7, #4]
 80031d6:	466d      	mov	r5, sp
 80031d8:	f106 0410 	add.w	r4, r6, #16
 80031dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80031ec:	1d33      	adds	r3, r6, #4
 80031ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031f0:	6838      	ldr	r0, [r7, #0]
 80031f2:	f003 fb8f 	bl	8006914 <USB_DevInit>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d005      	beq.n	8003208 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2202      	movs	r2, #2
 8003200:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e014      	b.n	8003232 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	2b01      	cmp	r3, #1
 800321e:	d102      	bne.n	8003226 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f001 f851 	bl	80042c8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f004 fb3d 	bl	80078aa <USB_DevDisconnect>

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800323a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b084      	sub	sp, #16
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800324e:	2b01      	cmp	r3, #1
 8003250:	d101      	bne.n	8003256 <HAL_PCD_Start+0x1c>
 8003252:	2302      	movs	r3, #2
 8003254:	e01c      	b.n	8003290 <HAL_PCD_Start+0x56>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003262:	2b01      	cmp	r3, #1
 8003264:	d105      	bne.n	8003272 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f003 fade 	bl	8006838 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f004 faf1 	bl	8007868 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003298:	b590      	push	{r4, r7, lr}
 800329a:	b08d      	sub	sp, #52	; 0x34
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f004 fbaf 	bl	8007a12 <USB_GetMode>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f040 847e 	bne.w	8003bb8 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f004 fb13 	bl	80078ec <USB_ReadInterrupts>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 8474 	beq.w	8003bb6 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	0a1b      	lsrs	r3, r3, #8
 80032d8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f004 fb00 	bl	80078ec <USB_ReadInterrupts>
 80032ec:	4603      	mov	r3, r0
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d107      	bne.n	8003306 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	695a      	ldr	r2, [r3, #20]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f002 0202 	and.w	r2, r2, #2
 8003304:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f004 faee 	bl	80078ec <USB_ReadInterrupts>
 8003310:	4603      	mov	r3, r0
 8003312:	f003 0310 	and.w	r3, r3, #16
 8003316:	2b10      	cmp	r3, #16
 8003318:	d161      	bne.n	80033de <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	699a      	ldr	r2, [r3, #24]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0210 	bic.w	r2, r2, #16
 8003328:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	f003 020f 	and.w	r2, r3, #15
 8003336:	4613      	mov	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	4413      	add	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	4413      	add	r3, r2
 8003346:	3304      	adds	r3, #4
 8003348:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	0c5b      	lsrs	r3, r3, #17
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	2b02      	cmp	r3, #2
 8003354:	d124      	bne.n	80033a0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800335c:	4013      	ands	r3, r2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d035      	beq.n	80033ce <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	091b      	lsrs	r3, r3, #4
 800336a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800336c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003370:	b29b      	uxth	r3, r3
 8003372:	461a      	mov	r2, r3
 8003374:	6a38      	ldr	r0, [r7, #32]
 8003376:	f004 f925 	bl	80075c4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	091b      	lsrs	r3, r3, #4
 8003382:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003386:	441a      	add	r2, r3
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	695a      	ldr	r2, [r3, #20]
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	091b      	lsrs	r3, r3, #4
 8003394:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003398:	441a      	add	r2, r3
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	615a      	str	r2, [r3, #20]
 800339e:	e016      	b.n	80033ce <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	0c5b      	lsrs	r3, r3, #17
 80033a4:	f003 030f 	and.w	r3, r3, #15
 80033a8:	2b06      	cmp	r3, #6
 80033aa:	d110      	bne.n	80033ce <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033b2:	2208      	movs	r2, #8
 80033b4:	4619      	mov	r1, r3
 80033b6:	6a38      	ldr	r0, [r7, #32]
 80033b8:	f004 f904 	bl	80075c4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	695a      	ldr	r2, [r3, #20]
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	091b      	lsrs	r3, r3, #4
 80033c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033c8:	441a      	add	r2, r3
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	699a      	ldr	r2, [r3, #24]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f042 0210 	orr.w	r2, r2, #16
 80033dc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f004 fa82 	bl	80078ec <USB_ReadInterrupts>
 80033e8:	4603      	mov	r3, r0
 80033ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033f2:	f040 80a7 	bne.w	8003544 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f004 fa87 	bl	8007912 <USB_ReadDevAllOutEpInterrupt>
 8003404:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003406:	e099      	b.n	800353c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 808e 	beq.w	8003530 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	4611      	mov	r1, r2
 800341e:	4618      	mov	r0, r3
 8003420:	f004 faab 	bl	800797a <USB_ReadDevOutEPInterrupt>
 8003424:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00c      	beq.n	800344a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	015a      	lsls	r2, r3, #5
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	4413      	add	r3, r2
 8003438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800343c:	461a      	mov	r2, r3
 800343e:	2301      	movs	r3, #1
 8003440:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003442:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 fe65 	bl	8004114 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	f003 0308 	and.w	r3, r3, #8
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00c      	beq.n	800346e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003456:	015a      	lsls	r2, r3, #5
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	4413      	add	r3, r2
 800345c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003460:	461a      	mov	r2, r3
 8003462:	2308      	movs	r3, #8
 8003464:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003466:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 fea1 	bl	80041b0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	f003 0310 	and.w	r3, r3, #16
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347a:	015a      	lsls	r2, r3, #5
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	4413      	add	r3, r2
 8003480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003484:	461a      	mov	r2, r3
 8003486:	2310      	movs	r3, #16
 8003488:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d030      	beq.n	80034f6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003494:	6a3b      	ldr	r3, [r7, #32]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349c:	2b80      	cmp	r3, #128	; 0x80
 800349e:	d109      	bne.n	80034b4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	69fa      	ldr	r2, [r7, #28]
 80034aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034b2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80034b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b6:	4613      	mov	r3, r2
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	4413      	add	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	4413      	add	r3, r2
 80034c6:	3304      	adds	r3, #4
 80034c8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	78db      	ldrb	r3, [r3, #3]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d108      	bne.n	80034e4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2200      	movs	r2, #0
 80034d6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80034d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	4619      	mov	r1, r3
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f006 fd1a 	bl	8009f18 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e6:	015a      	lsls	r2, r3, #5
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	4413      	add	r3, r2
 80034ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034f0:	461a      	mov	r2, r3
 80034f2:	2302      	movs	r3, #2
 80034f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	f003 0320 	and.w	r3, r3, #32
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d008      	beq.n	8003512 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	015a      	lsls	r2, r3, #5
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	4413      	add	r3, r2
 8003508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800350c:	461a      	mov	r2, r3
 800350e:	2320      	movs	r3, #32
 8003510:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d009      	beq.n	8003530 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	4413      	add	r3, r2
 8003524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003528:	461a      	mov	r2, r3
 800352a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800352e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	3301      	adds	r3, #1
 8003534:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003538:	085b      	lsrs	r3, r3, #1
 800353a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800353c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353e:	2b00      	cmp	r3, #0
 8003540:	f47f af62 	bne.w	8003408 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4618      	mov	r0, r3
 800354a:	f004 f9cf 	bl	80078ec <USB_ReadInterrupts>
 800354e:	4603      	mov	r3, r0
 8003550:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003554:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003558:	f040 80a4 	bne.w	80036a4 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4618      	mov	r0, r3
 8003562:	f004 f9f0 	bl	8007946 <USB_ReadDevAllInEpInterrupt>
 8003566:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003568:	2300      	movs	r3, #0
 800356a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800356c:	e096      	b.n	800369c <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800356e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 808b 	beq.w	8003690 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003580:	b2d2      	uxtb	r2, r2
 8003582:	4611      	mov	r1, r2
 8003584:	4618      	mov	r0, r3
 8003586:	f004 fa16 	bl	80079b6 <USB_ReadDevInEPInterrupt>
 800358a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d020      	beq.n	80035d8 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	f003 030f 	and.w	r3, r3, #15
 800359c:	2201      	movs	r2, #1
 800359e:	fa02 f303 	lsl.w	r3, r2, r3
 80035a2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	43db      	mvns	r3, r3
 80035b0:	69f9      	ldr	r1, [r7, #28]
 80035b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035b6:	4013      	ands	r3, r2
 80035b8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	015a      	lsls	r2, r3, #5
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	4413      	add	r3, r2
 80035c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035c6:	461a      	mov	r2, r3
 80035c8:	2301      	movs	r3, #1
 80035ca:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	4619      	mov	r1, r3
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f006 fc0b 	bl	8009dee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	f003 0308 	and.w	r3, r3, #8
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d008      	beq.n	80035f4 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	015a      	lsls	r2, r3, #5
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	4413      	add	r3, r2
 80035ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ee:	461a      	mov	r2, r3
 80035f0:	2308      	movs	r3, #8
 80035f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	f003 0310 	and.w	r3, r3, #16
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d008      	beq.n	8003610 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	4413      	add	r3, r2
 8003606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800360a:	461a      	mov	r2, r3
 800360c:	2310      	movs	r3, #16
 800360e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003616:	2b00      	cmp	r3, #0
 8003618:	d008      	beq.n	800362c <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	015a      	lsls	r2, r3, #5
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	4413      	add	r3, r2
 8003622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003626:	461a      	mov	r2, r3
 8003628:	2340      	movs	r3, #64	; 0x40
 800362a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d023      	beq.n	800367e <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003636:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003638:	6a38      	ldr	r0, [r7, #32]
 800363a:	f003 faad 	bl	8006b98 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800363e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003640:	4613      	mov	r3, r2
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	4413      	add	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	3338      	adds	r3, #56	; 0x38
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	4413      	add	r3, r2
 800364e:	3304      	adds	r3, #4
 8003650:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	78db      	ldrb	r3, [r3, #3]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d108      	bne.n	800366c <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	2200      	movs	r2, #0
 800365e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	b2db      	uxtb	r3, r3
 8003664:	4619      	mov	r1, r3
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f006 fc68 	bl	8009f3c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800366c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366e:	015a      	lsls	r2, r3, #5
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	4413      	add	r3, r2
 8003674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003678:	461a      	mov	r2, r3
 800367a:	2302      	movs	r3, #2
 800367c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003688:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 fcba 	bl	8004004 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	3301      	adds	r3, #1
 8003694:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003698:	085b      	lsrs	r3, r3, #1
 800369a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800369c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f47f af65 	bne.w	800356e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f004 f91f 	bl	80078ec <USB_ReadInterrupts>
 80036ae:	4603      	mov	r3, r0
 80036b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036b8:	d122      	bne.n	8003700 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	69fa      	ldr	r2, [r7, #28]
 80036c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036c8:	f023 0301 	bic.w	r3, r3, #1
 80036cc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d108      	bne.n	80036ea <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80036e0:	2100      	movs	r1, #0
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f006 fe88 	bl	800a3f8 <HAL_PCDEx_LPM_Callback>
 80036e8:	e002      	b.n	80036f0 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f006 fbec 	bl	8009ec8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	695a      	ldr	r2, [r3, #20]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80036fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f004 f8f1 	bl	80078ec <USB_ReadInterrupts>
 800370a:	4603      	mov	r3, r0
 800370c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003710:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003714:	d112      	bne.n	800373c <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b01      	cmp	r3, #1
 8003724:	d102      	bne.n	800372c <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f006 fba8 	bl	8009e7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695a      	ldr	r2, [r3, #20]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800373a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	f004 f8d3 	bl	80078ec <USB_ReadInterrupts>
 8003746:	4603      	mov	r3, r0
 8003748:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800374c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003750:	d121      	bne.n	8003796 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695a      	ldr	r2, [r3, #20]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003760:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003768:	2b00      	cmp	r3, #0
 800376a:	d111      	bne.n	8003790 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800377a:	089b      	lsrs	r3, r3, #2
 800377c:	f003 020f 	and.w	r2, r3, #15
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003786:	2101      	movs	r1, #1
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f006 fe35 	bl	800a3f8 <HAL_PCDEx_LPM_Callback>
 800378e:	e002      	b.n	8003796 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f006 fb73 	bl	8009e7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f004 f8a6 	bl	80078ec <USB_ReadInterrupts>
 80037a0:	4603      	mov	r3, r0
 80037a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037aa:	f040 80b5 	bne.w	8003918 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	69fa      	ldr	r2, [r7, #28]
 80037b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037bc:	f023 0301 	bic.w	r3, r3, #1
 80037c0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2110      	movs	r1, #16
 80037c8:	4618      	mov	r0, r3
 80037ca:	f003 f9e5 	bl	8006b98 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ce:	2300      	movs	r3, #0
 80037d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037d2:	e046      	b.n	8003862 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80037d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d6:	015a      	lsls	r2, r3, #5
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e0:	461a      	mov	r2, r3
 80037e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037e6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80037e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ea:	015a      	lsls	r2, r3, #5
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	4413      	add	r3, r2
 80037f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037f8:	0151      	lsls	r1, r2, #5
 80037fa:	69fa      	ldr	r2, [r7, #28]
 80037fc:	440a      	add	r2, r1
 80037fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003802:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003806:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380a:	015a      	lsls	r2, r3, #5
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	4413      	add	r3, r2
 8003810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003814:	461a      	mov	r2, r3
 8003816:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800381a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800381c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	4413      	add	r3, r2
 8003824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800382c:	0151      	lsls	r1, r2, #5
 800382e:	69fa      	ldr	r2, [r7, #28]
 8003830:	440a      	add	r2, r1
 8003832:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003836:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800383a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800383c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800383e:	015a      	lsls	r2, r3, #5
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	4413      	add	r3, r2
 8003844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800384c:	0151      	lsls	r1, r2, #5
 800384e:	69fa      	ldr	r2, [r7, #28]
 8003850:	440a      	add	r2, r1
 8003852:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003856:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800385a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800385c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385e:	3301      	adds	r3, #1
 8003860:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003868:	429a      	cmp	r2, r3
 800386a:	d3b3      	bcc.n	80037d4 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	69fa      	ldr	r2, [r7, #28]
 8003876:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800387a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800387e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003884:	2b00      	cmp	r3, #0
 8003886:	d016      	beq.n	80038b6 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800388e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003892:	69fa      	ldr	r2, [r7, #28]
 8003894:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003898:	f043 030b 	orr.w	r3, r3, #11
 800389c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a8:	69fa      	ldr	r2, [r7, #28]
 80038aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038ae:	f043 030b 	orr.w	r3, r3, #11
 80038b2:	6453      	str	r3, [r2, #68]	; 0x44
 80038b4:	e015      	b.n	80038e2 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	69fa      	ldr	r2, [r7, #28]
 80038c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80038c8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80038cc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	69fa      	ldr	r2, [r7, #28]
 80038d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038dc:	f043 030b 	orr.w	r3, r3, #11
 80038e0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	69fa      	ldr	r2, [r7, #28]
 80038ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038f0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80038f4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003900:	4619      	mov	r1, r3
 8003902:	4610      	mov	r0, r2
 8003904:	f004 f8b6 	bl	8007a74 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	695a      	ldr	r2, [r3, #20]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003916:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f003 ffe5 	bl	80078ec <USB_ReadInterrupts>
 8003922:	4603      	mov	r3, r0
 8003924:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003928:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800392c:	d124      	bne.n	8003978 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f004 f87b 	bl	8007a2e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4618      	mov	r0, r3
 800393e:	f003 f9a8 	bl	8006c92 <USB_GetDevSpeed>
 8003942:	4603      	mov	r3, r0
 8003944:	461a      	mov	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681c      	ldr	r4, [r3, #0]
 800394e:	f001 fb87 	bl	8005060 <HAL_RCC_GetHCLKFreq>
 8003952:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003958:	b2db      	uxtb	r3, r3
 800395a:	461a      	mov	r2, r3
 800395c:	4620      	mov	r0, r4
 800395e:	f002 fecf 	bl	8006700 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f006 fa6b 	bl	8009e3e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695a      	ldr	r2, [r3, #20]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003976:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4618      	mov	r0, r3
 800397e:	f003 ffb5 	bl	80078ec <USB_ReadInterrupts>
 8003982:	4603      	mov	r3, r0
 8003984:	f003 0308 	and.w	r3, r3, #8
 8003988:	2b08      	cmp	r3, #8
 800398a:	d10a      	bne.n	80039a2 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f006 fa48 	bl	8009e22 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695a      	ldr	r2, [r3, #20]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f002 0208 	and.w	r2, r2, #8
 80039a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f003 ffa0 	bl	80078ec <USB_ReadInterrupts>
 80039ac:	4603      	mov	r3, r0
 80039ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b2:	2b80      	cmp	r3, #128	; 0x80
 80039b4:	d122      	bne.n	80039fc <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039c2:	2301      	movs	r3, #1
 80039c4:	627b      	str	r3, [r7, #36]	; 0x24
 80039c6:	e014      	b.n	80039f2 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80039c8:	6879      	ldr	r1, [r7, #4]
 80039ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039cc:	4613      	mov	r3, r2
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	4413      	add	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d105      	bne.n	80039ec <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	4619      	mov	r1, r3
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 fadb 	bl	8003fa2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	3301      	adds	r3, #1
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d3e5      	bcc.n	80039c8 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f003 ff73 	bl	80078ec <USB_ReadInterrupts>
 8003a06:	4603      	mov	r3, r0
 8003a08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a10:	d13b      	bne.n	8003a8a <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a12:	2301      	movs	r3, #1
 8003a14:	627b      	str	r3, [r7, #36]	; 0x24
 8003a16:	e02b      	b.n	8003a70 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	4413      	add	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	3340      	adds	r3, #64	; 0x40
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d115      	bne.n	8003a6a <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003a3e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	da12      	bge.n	8003a6a <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003a44:	6879      	ldr	r1, [r7, #4]
 8003a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a48:	4613      	mov	r3, r2
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	4413      	add	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	440b      	add	r3, r1
 8003a52:	333f      	adds	r3, #63	; 0x3f
 8003a54:	2201      	movs	r2, #1
 8003a56:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	4619      	mov	r1, r3
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 fa9c 	bl	8003fa2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d3ce      	bcc.n	8003a18 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695a      	ldr	r2, [r3, #20]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003a88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f003 ff2c 	bl	80078ec <USB_ReadInterrupts>
 8003a94:	4603      	mov	r3, r0
 8003a96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a9e:	d155      	bne.n	8003b4c <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa4:	e045      	b.n	8003b32 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	015a      	lsls	r2, r3, #5
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	4413      	add	r3, r2
 8003aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aba:	4613      	mov	r3, r2
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	4413      	add	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	440b      	add	r3, r1
 8003ac4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d12e      	bne.n	8003b2c <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ace:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	da2b      	bge.n	8003b2c <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003ae0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d121      	bne.n	8003b2c <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aec:	4613      	mov	r3, r2
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	4413      	add	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003afa:	2201      	movs	r2, #1
 8003afc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003b06:	6a3b      	ldr	r3, [r7, #32]
 8003b08:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10a      	bne.n	8003b2c <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	69fa      	ldr	r2, [r7, #28]
 8003b20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b28:	6053      	str	r3, [r2, #4]
            break;
 8003b2a:	e007      	b.n	8003b3c <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	3301      	adds	r3, #1
 8003b30:	627b      	str	r3, [r7, #36]	; 0x24
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d3b4      	bcc.n	8003aa6 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	695a      	ldr	r2, [r3, #20]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003b4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f003 fecb 	bl	80078ec <USB_ReadInterrupts>
 8003b56:	4603      	mov	r3, r0
 8003b58:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b60:	d10a      	bne.n	8003b78 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f006 f9fc 	bl	8009f60 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	695a      	ldr	r2, [r3, #20]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003b76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f003 feb5 	bl	80078ec <USB_ReadInterrupts>
 8003b82:	4603      	mov	r3, r0
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d115      	bne.n	8003bb8 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	f003 0304 	and.w	r3, r3, #4
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d002      	beq.n	8003ba4 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f006 f9ec 	bl	8009f7c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6859      	ldr	r1, [r3, #4]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	605a      	str	r2, [r3, #4]
 8003bb4:	e000      	b.n	8003bb8 <HAL_PCD_IRQHandler+0x920>
      return;
 8003bb6:	bf00      	nop
    }
  }
}
 8003bb8:	3734      	adds	r7, #52	; 0x34
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd90      	pop	{r4, r7, pc}

08003bbe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b082      	sub	sp, #8
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d101      	bne.n	8003bd8 <HAL_PCD_SetAddress+0x1a>
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	e013      	b.n	8003c00 <HAL_PCD_SetAddress+0x42>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	78fa      	ldrb	r2, [r7, #3]
 8003be4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	78fa      	ldrb	r2, [r7, #3]
 8003bee:	4611      	mov	r1, r2
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f003 fe13 	bl	800781c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	4608      	mov	r0, r1
 8003c12:	4611      	mov	r1, r2
 8003c14:	461a      	mov	r2, r3
 8003c16:	4603      	mov	r3, r0
 8003c18:	70fb      	strb	r3, [r7, #3]
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	803b      	strh	r3, [r7, #0]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003c22:	2300      	movs	r3, #0
 8003c24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	da0f      	bge.n	8003c4e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c2e:	78fb      	ldrb	r3, [r7, #3]
 8003c30:	f003 020f 	and.w	r2, r3, #15
 8003c34:	4613      	mov	r3, r2
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	4413      	add	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	3338      	adds	r3, #56	; 0x38
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	4413      	add	r3, r2
 8003c42:	3304      	adds	r3, #4
 8003c44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	705a      	strb	r2, [r3, #1]
 8003c4c:	e00f      	b.n	8003c6e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c4e:	78fb      	ldrb	r3, [r7, #3]
 8003c50:	f003 020f 	and.w	r2, r3, #15
 8003c54:	4613      	mov	r3, r2
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	4413      	add	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	4413      	add	r3, r2
 8003c64:	3304      	adds	r3, #4
 8003c66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c6e:	78fb      	ldrb	r3, [r7, #3]
 8003c70:	f003 030f 	and.w	r3, r3, #15
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003c7a:	883a      	ldrh	r2, [r7, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	78ba      	ldrb	r2, [r7, #2]
 8003c84:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	785b      	ldrb	r3, [r3, #1]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d004      	beq.n	8003c98 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c98:	78bb      	ldrb	r3, [r7, #2]
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d102      	bne.n	8003ca4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d101      	bne.n	8003cb2 <HAL_PCD_EP_Open+0xaa>
 8003cae:	2302      	movs	r3, #2
 8003cb0:	e00e      	b.n	8003cd0 <HAL_PCD_EP_Open+0xc8>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68f9      	ldr	r1, [r7, #12]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f003 f805 	bl	8006cd0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003cce:	7afb      	ldrb	r3, [r7, #11]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ce4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	da0f      	bge.n	8003d0c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cec:	78fb      	ldrb	r3, [r7, #3]
 8003cee:	f003 020f 	and.w	r2, r3, #15
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	4413      	add	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	3338      	adds	r3, #56	; 0x38
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	4413      	add	r3, r2
 8003d00:	3304      	adds	r3, #4
 8003d02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2201      	movs	r2, #1
 8003d08:	705a      	strb	r2, [r3, #1]
 8003d0a:	e00f      	b.n	8003d2c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d0c:	78fb      	ldrb	r3, [r7, #3]
 8003d0e:	f003 020f 	and.w	r2, r3, #15
 8003d12:	4613      	mov	r3, r2
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	4413      	add	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	4413      	add	r3, r2
 8003d22:	3304      	adds	r3, #4
 8003d24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d2c:	78fb      	ldrb	r3, [r7, #3]
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d101      	bne.n	8003d46 <HAL_PCD_EP_Close+0x6e>
 8003d42:	2302      	movs	r3, #2
 8003d44:	e00e      	b.n	8003d64 <HAL_PCD_EP_Close+0x8c>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68f9      	ldr	r1, [r7, #12]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f003 f843 	bl	8006de0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	607a      	str	r2, [r7, #4]
 8003d76:	603b      	str	r3, [r7, #0]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d7c:	7afb      	ldrb	r3, [r7, #11]
 8003d7e:	f003 020f 	and.w	r2, r3, #15
 8003d82:	4613      	mov	r3, r2
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	4413      	add	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	4413      	add	r3, r2
 8003d92:	3304      	adds	r3, #4
 8003d94:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2200      	movs	r2, #0
 8003da6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	2200      	movs	r2, #0
 8003dac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dae:	7afb      	ldrb	r3, [r7, #11]
 8003db0:	f003 030f 	and.w	r3, r3, #15
 8003db4:	b2da      	uxtb	r2, r3
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6979      	ldr	r1, [r7, #20]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f003 f8e9 	bl	8006f98 <USB_EPStartXfer>

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3718      	adds	r7, #24
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	607a      	str	r2, [r7, #4]
 8003dda:	603b      	str	r3, [r7, #0]
 8003ddc:	460b      	mov	r3, r1
 8003dde:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003de0:	7afb      	ldrb	r3, [r7, #11]
 8003de2:	f003 020f 	and.w	r2, r3, #15
 8003de6:	4613      	mov	r3, r2
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	4413      	add	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	3338      	adds	r3, #56	; 0x38
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	4413      	add	r3, r2
 8003df4:	3304      	adds	r3, #4
 8003df6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	2200      	movs	r2, #0
 8003e08:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e10:	7afb      	ldrb	r3, [r7, #11]
 8003e12:	f003 030f 	and.w	r3, r3, #15
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6979      	ldr	r1, [r7, #20]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f003 f8b8 	bl	8006f98 <USB_EPStartXfer>

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3718      	adds	r7, #24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b084      	sub	sp, #16
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003e3e:	78fb      	ldrb	r3, [r7, #3]
 8003e40:	f003 020f 	and.w	r2, r3, #15
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d901      	bls.n	8003e50 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e04e      	b.n	8003eee <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	da0f      	bge.n	8003e78 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e58:	78fb      	ldrb	r3, [r7, #3]
 8003e5a:	f003 020f 	and.w	r2, r3, #15
 8003e5e:	4613      	mov	r3, r2
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	4413      	add	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	3338      	adds	r3, #56	; 0x38
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	3304      	adds	r3, #4
 8003e6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2201      	movs	r2, #1
 8003e74:	705a      	strb	r2, [r3, #1]
 8003e76:	e00d      	b.n	8003e94 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e78:	78fa      	ldrb	r2, [r7, #3]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	4413      	add	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	4413      	add	r3, r2
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2201      	movs	r2, #1
 8003e98:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e9a:	78fb      	ldrb	r3, [r7, #3]
 8003e9c:	f003 030f 	and.w	r3, r3, #15
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d101      	bne.n	8003eb4 <HAL_PCD_EP_SetStall+0x82>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e01c      	b.n	8003eee <HAL_PCD_EP_SetStall+0xbc>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68f9      	ldr	r1, [r7, #12]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f003 fbd6 	bl	8007674 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ec8:	78fb      	ldrb	r3, [r7, #3]
 8003eca:	f003 030f 	and.w	r3, r3, #15
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d108      	bne.n	8003ee4 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003edc:	4619      	mov	r1, r3
 8003ede:	4610      	mov	r0, r2
 8003ee0:	f003 fdc8 	bl	8007a74 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b084      	sub	sp, #16
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
 8003efe:	460b      	mov	r3, r1
 8003f00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003f02:	78fb      	ldrb	r3, [r7, #3]
 8003f04:	f003 020f 	and.w	r2, r3, #15
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d901      	bls.n	8003f14 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e042      	b.n	8003f9a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	da0f      	bge.n	8003f3c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f1c:	78fb      	ldrb	r3, [r7, #3]
 8003f1e:	f003 020f 	and.w	r2, r3, #15
 8003f22:	4613      	mov	r3, r2
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	4413      	add	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	3338      	adds	r3, #56	; 0x38
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	4413      	add	r3, r2
 8003f30:	3304      	adds	r3, #4
 8003f32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2201      	movs	r2, #1
 8003f38:	705a      	strb	r2, [r3, #1]
 8003f3a:	e00f      	b.n	8003f5c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f3c:	78fb      	ldrb	r3, [r7, #3]
 8003f3e:	f003 020f 	and.w	r2, r3, #15
 8003f42:	4613      	mov	r3, r2
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	4413      	add	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	4413      	add	r3, r2
 8003f52:	3304      	adds	r3, #4
 8003f54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f62:	78fb      	ldrb	r3, [r7, #3]
 8003f64:	f003 030f 	and.w	r3, r3, #15
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d101      	bne.n	8003f7c <HAL_PCD_EP_ClrStall+0x86>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e00e      	b.n	8003f9a <HAL_PCD_EP_ClrStall+0xa4>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68f9      	ldr	r1, [r7, #12]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f003 fbe0 	bl	8007750 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b084      	sub	sp, #16
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
 8003faa:	460b      	mov	r3, r1
 8003fac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003fae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	da0c      	bge.n	8003fd0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fb6:	78fb      	ldrb	r3, [r7, #3]
 8003fb8:	f003 020f 	and.w	r2, r3, #15
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	4413      	add	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	3338      	adds	r3, #56	; 0x38
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	4413      	add	r3, r2
 8003fca:	3304      	adds	r3, #4
 8003fcc:	60fb      	str	r3, [r7, #12]
 8003fce:	e00c      	b.n	8003fea <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fd0:	78fb      	ldrb	r3, [r7, #3]
 8003fd2:	f003 020f 	and.w	r2, r3, #15
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	4413      	add	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68f9      	ldr	r1, [r7, #12]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f003 fa03 	bl	80073fc <USB_EPStopXfer>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003ffa:	7afb      	ldrb	r3, [r7, #11]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b088      	sub	sp, #32
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	4613      	mov	r3, r2
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	4413      	add	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	3338      	adds	r3, #56	; 0x38
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	4413      	add	r3, r2
 8004028:	3304      	adds	r3, #4
 800402a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	695a      	ldr	r2, [r3, #20]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	429a      	cmp	r2, r3
 8004036:	d901      	bls.n	800403c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e067      	b.n	800410c <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	69fa      	ldr	r2, [r7, #28]
 800404e:	429a      	cmp	r2, r3
 8004050:	d902      	bls.n	8004058 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	3303      	adds	r3, #3
 800405c:	089b      	lsrs	r3, r3, #2
 800405e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004060:	e026      	b.n	80040b0 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	691a      	ldr	r2, [r3, #16]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	69fa      	ldr	r2, [r7, #28]
 8004074:	429a      	cmp	r2, r3
 8004076:	d902      	bls.n	800407e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	3303      	adds	r3, #3
 8004082:	089b      	lsrs	r3, r3, #2
 8004084:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	68d9      	ldr	r1, [r3, #12]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	b2da      	uxtb	r2, r3
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	b29b      	uxth	r3, r3
 8004092:	6978      	ldr	r0, [r7, #20]
 8004094:	f003 fa5c 	bl	8007550 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	68da      	ldr	r2, [r3, #12]
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	441a      	add	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	695a      	ldr	r2, [r3, #20]
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	441a      	add	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	015a      	lsls	r2, r3, #5
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d809      	bhi.n	80040da <PCD_WriteEmptyTxFifo+0xd6>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	695a      	ldr	r2, [r3, #20]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d203      	bcs.n	80040da <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1c3      	bne.n	8004062 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	691a      	ldr	r2, [r3, #16]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d811      	bhi.n	800410a <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	f003 030f 	and.w	r3, r3, #15
 80040ec:	2201      	movs	r2, #1
 80040ee:	fa02 f303 	lsl.w	r3, r2, r3
 80040f2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	43db      	mvns	r3, r3
 8004100:	6939      	ldr	r1, [r7, #16]
 8004102:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004106:	4013      	ands	r3, r2
 8004108:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3720      	adds	r7, #32
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	333c      	adds	r3, #60	; 0x3c
 800412c:	3304      	adds	r3, #4
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	015a      	lsls	r2, r3, #5
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	4413      	add	r3, r2
 800413a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	4a19      	ldr	r2, [pc, #100]	; (80041ac <PCD_EP_OutXfrComplete_int+0x98>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d124      	bne.n	8004194 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00a      	beq.n	800416a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	015a      	lsls	r2, r3, #5
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	4413      	add	r3, r2
 800415c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004160:	461a      	mov	r2, r3
 8004162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004166:	6093      	str	r3, [r2, #8]
 8004168:	e01a      	b.n	80041a0 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	f003 0320 	and.w	r3, r3, #32
 8004170:	2b00      	cmp	r3, #0
 8004172:	d008      	beq.n	8004186 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	015a      	lsls	r2, r3, #5
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	4413      	add	r3, r2
 800417c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004180:	461a      	mov	r2, r3
 8004182:	2320      	movs	r3, #32
 8004184:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	b2db      	uxtb	r3, r3
 800418a:	4619      	mov	r1, r3
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f005 fe13 	bl	8009db8 <HAL_PCD_DataOutStageCallback>
 8004192:	e005      	b.n	80041a0 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	b2db      	uxtb	r3, r3
 8004198:	4619      	mov	r1, r3
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f005 fe0c 	bl	8009db8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3718      	adds	r7, #24
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	4f54310a 	.word	0x4f54310a

080041b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	333c      	adds	r3, #60	; 0x3c
 80041c8:	3304      	adds	r3, #4
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	015a      	lsls	r2, r3, #5
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	4413      	add	r3, r2
 80041d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	4a0c      	ldr	r2, [pc, #48]	; (8004214 <PCD_EP_OutSetupPacket_int+0x64>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d90e      	bls.n	8004204 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d009      	beq.n	8004204 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	015a      	lsls	r2, r3, #5
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	4413      	add	r3, r2
 80041f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041fc:	461a      	mov	r2, r3
 80041fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004202:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f005 fdc5 	bl	8009d94 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3718      	adds	r7, #24
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	4f54300a 	.word	0x4f54300a

08004218 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	460b      	mov	r3, r1
 8004222:	70fb      	strb	r3, [r7, #3]
 8004224:	4613      	mov	r3, r2
 8004226:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004230:	78fb      	ldrb	r3, [r7, #3]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d107      	bne.n	8004246 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004236:	883b      	ldrh	r3, [r7, #0]
 8004238:	0419      	lsls	r1, r3, #16
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	430a      	orrs	r2, r1
 8004242:	629a      	str	r2, [r3, #40]	; 0x28
 8004244:	e028      	b.n	8004298 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424c:	0c1b      	lsrs	r3, r3, #16
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	4413      	add	r3, r2
 8004252:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004254:	2300      	movs	r3, #0
 8004256:	73fb      	strb	r3, [r7, #15]
 8004258:	e00d      	b.n	8004276 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	7bfb      	ldrb	r3, [r7, #15]
 8004260:	3340      	adds	r3, #64	; 0x40
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	0c1b      	lsrs	r3, r3, #16
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	4413      	add	r3, r2
 800426e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004270:	7bfb      	ldrb	r3, [r7, #15]
 8004272:	3301      	adds	r3, #1
 8004274:	73fb      	strb	r3, [r7, #15]
 8004276:	7bfa      	ldrb	r2, [r7, #15]
 8004278:	78fb      	ldrb	r3, [r7, #3]
 800427a:	3b01      	subs	r3, #1
 800427c:	429a      	cmp	r2, r3
 800427e:	d3ec      	bcc.n	800425a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004280:	883b      	ldrh	r3, [r7, #0]
 8004282:	0418      	lsls	r0, r3, #16
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6819      	ldr	r1, [r3, #0]
 8004288:	78fb      	ldrb	r3, [r7, #3]
 800428a:	3b01      	subs	r3, #1
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	4302      	orrs	r2, r0
 8004290:	3340      	adds	r3, #64	; 0x40
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	440b      	add	r3, r1
 8004296:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b083      	sub	sp, #12
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
 80042ae:	460b      	mov	r3, r1
 80042b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	887a      	ldrh	r2, [r7, #2]
 80042b8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042fa:	f043 0303 	orr.w	r3, r3, #3
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3714      	adds	r7, #20
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004314:	4b05      	ldr	r3, [pc, #20]	; (800432c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a04      	ldr	r2, [pc, #16]	; (800432c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800431a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800431e:	6013      	str	r3, [r2, #0]
}
 8004320:	bf00      	nop
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	40007000 	.word	0x40007000

08004330 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004334:	4b04      	ldr	r3, [pc, #16]	; (8004348 <HAL_PWREx_GetVoltageRange+0x18>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800433c:	4618      	mov	r0, r3
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	40007000 	.word	0x40007000

0800434c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800435a:	d130      	bne.n	80043be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800435c:	4b23      	ldr	r3, [pc, #140]	; (80043ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004368:	d038      	beq.n	80043dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800436a:	4b20      	ldr	r3, [pc, #128]	; (80043ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004372:	4a1e      	ldr	r2, [pc, #120]	; (80043ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004374:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004378:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800437a:	4b1d      	ldr	r3, [pc, #116]	; (80043f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2232      	movs	r2, #50	; 0x32
 8004380:	fb02 f303 	mul.w	r3, r2, r3
 8004384:	4a1b      	ldr	r2, [pc, #108]	; (80043f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004386:	fba2 2303 	umull	r2, r3, r2, r3
 800438a:	0c9b      	lsrs	r3, r3, #18
 800438c:	3301      	adds	r3, #1
 800438e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004390:	e002      	b.n	8004398 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	3b01      	subs	r3, #1
 8004396:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004398:	4b14      	ldr	r3, [pc, #80]	; (80043ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043a4:	d102      	bne.n	80043ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1f2      	bne.n	8004392 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043ac:	4b0f      	ldr	r3, [pc, #60]	; (80043ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043b8:	d110      	bne.n	80043dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e00f      	b.n	80043de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80043be:	4b0b      	ldr	r3, [pc, #44]	; (80043ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ca:	d007      	beq.n	80043dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80043cc:	4b07      	ldr	r3, [pc, #28]	; (80043ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043d4:	4a05      	ldr	r2, [pc, #20]	; (80043ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3714      	adds	r7, #20
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	40007000 	.word	0x40007000
 80043f0:	20000000 	.word	0x20000000
 80043f4:	431bde83 	.word	0x431bde83

080043f8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80043fc:	4b05      	ldr	r3, [pc, #20]	; (8004414 <HAL_PWREx_EnableVddUSB+0x1c>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	4a04      	ldr	r2, [pc, #16]	; (8004414 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004402:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004406:	6053      	str	r3, [r2, #4]
}
 8004408:	bf00      	nop
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	40007000 	.word	0x40007000

08004418 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af02      	add	r7, sp, #8
 800441e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004420:	f7fd fb84 	bl	8001b2c <HAL_GetTick>
 8004424:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e063      	b.n	80044f8 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10b      	bne.n	8004454 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7fd f89f 	bl	8001588 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800444a:	f241 3188 	movw	r1, #5000	; 0x1388
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f858 	bl	8004504 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	3b01      	subs	r3, #1
 8004464:	021a      	lsls	r2, r3, #8
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	2120      	movs	r1, #32
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f850 	bl	8004520 <QSPI_WaitFlagStateUntilTimeout>
 8004480:	4603      	mov	r3, r0
 8004482:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004484:	7afb      	ldrb	r3, [r7, #11]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d131      	bne.n	80044ee <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004494:	f023 0310 	bic.w	r3, r3, #16
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	6852      	ldr	r2, [r2, #4]
 800449c:	0611      	lsls	r1, r2, #24
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	68d2      	ldr	r2, [r2, #12]
 80044a2:	4311      	orrs	r1, r2
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	6812      	ldr	r2, [r2, #0]
 80044a8:	430b      	orrs	r3, r1
 80044aa:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	4b13      	ldr	r3, [pc, #76]	; (8004500 <HAL_QSPI_Init+0xe8>)
 80044b4:	4013      	ands	r3, r2
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6912      	ldr	r2, [r2, #16]
 80044ba:	0411      	lsls	r1, r2, #16
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6952      	ldr	r2, [r2, #20]
 80044c0:	4311      	orrs	r1, r2
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6992      	ldr	r2, [r2, #24]
 80044c6:	4311      	orrs	r1, r2
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	6812      	ldr	r2, [r2, #0]
 80044cc:	430b      	orrs	r3, r1
 80044ce:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0201 	orr.w	r2, r2, #1
 80044de:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80044f6:	7afb      	ldrb	r3, [r7, #11]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	ffe0f8fe 	.word	0xffe0f8fe

08004504 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	603b      	str	r3, [r7, #0]
 800452c:	4613      	mov	r3, r2
 800452e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004530:	e01a      	b.n	8004568 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004538:	d016      	beq.n	8004568 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800453a:	f7fd faf7 	bl	8001b2c <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	429a      	cmp	r2, r3
 8004548:	d302      	bcc.n	8004550 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10b      	bne.n	8004568 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2204      	movs	r2, #4
 8004554:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800455c:	f043 0201 	orr.w	r2, r3, #1
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e00e      	b.n	8004586 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689a      	ldr	r2, [r3, #8]
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	4013      	ands	r3, r2
 8004572:	2b00      	cmp	r3, #0
 8004574:	bf14      	ite	ne
 8004576:	2301      	movne	r3, #1
 8004578:	2300      	moveq	r3, #0
 800457a:	b2db      	uxtb	r3, r3
 800457c:	461a      	mov	r2, r3
 800457e:	79fb      	ldrb	r3, [r7, #7]
 8004580:	429a      	cmp	r2, r3
 8004582:	d1d6      	bne.n	8004532 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
	...

08004590 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b088      	sub	sp, #32
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e3ca      	b.n	8004d38 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045a2:	4b97      	ldr	r3, [pc, #604]	; (8004800 <HAL_RCC_OscConfig+0x270>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f003 030c 	and.w	r3, r3, #12
 80045aa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045ac:	4b94      	ldr	r3, [pc, #592]	; (8004800 <HAL_RCC_OscConfig+0x270>)
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f003 0303 	and.w	r3, r3, #3
 80045b4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0310 	and.w	r3, r3, #16
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 80e4 	beq.w	800478c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d007      	beq.n	80045da <HAL_RCC_OscConfig+0x4a>
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	2b0c      	cmp	r3, #12
 80045ce:	f040 808b 	bne.w	80046e8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	f040 8087 	bne.w	80046e8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045da:	4b89      	ldr	r3, [pc, #548]	; (8004800 <HAL_RCC_OscConfig+0x270>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d005      	beq.n	80045f2 <HAL_RCC_OscConfig+0x62>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e3a2      	b.n	8004d38 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1a      	ldr	r2, [r3, #32]
 80045f6:	4b82      	ldr	r3, [pc, #520]	; (8004800 <HAL_RCC_OscConfig+0x270>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0308 	and.w	r3, r3, #8
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d004      	beq.n	800460c <HAL_RCC_OscConfig+0x7c>
 8004602:	4b7f      	ldr	r3, [pc, #508]	; (8004800 <HAL_RCC_OscConfig+0x270>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800460a:	e005      	b.n	8004618 <HAL_RCC_OscConfig+0x88>
 800460c:	4b7c      	ldr	r3, [pc, #496]	; (8004800 <HAL_RCC_OscConfig+0x270>)
 800460e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004612:	091b      	lsrs	r3, r3, #4
 8004614:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004618:	4293      	cmp	r3, r2
 800461a:	d223      	bcs.n	8004664 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	4618      	mov	r0, r3
 8004622:	f000 fd55 	bl	80050d0 <RCC_SetFlashLatencyFromMSIRange>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e383      	b.n	8004d38 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004630:	4b73      	ldr	r3, [pc, #460]	; (8004800 <HAL_RCC_OscConfig+0x270>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a72      	ldr	r2, [pc, #456]	; (8004800 <HAL_RCC_OscConfig+0x270>)
 8004636:	f043 0308 	orr.w	r3, r3, #8
 800463a:	6013      	str	r3, [r2, #0]
 800463c:	4b70      	ldr	r3, [pc, #448]	; (8004800 <HAL_RCC_OscConfig+0x270>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	496d      	ldr	r1, [pc, #436]	; (8004800 <HAL_RCC_OscConfig+0x270>)
 800464a:	4313      	orrs	r3, r2
 800464c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800464e:	4b6c      	ldr	r3, [pc, #432]	; (8004800 <HAL_RCC_OscConfig+0x270>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	021b      	lsls	r3, r3, #8
 800465c:	4968      	ldr	r1, [pc, #416]	; (8004800 <HAL_RCC_OscConfig+0x270>)
 800465e:	4313      	orrs	r3, r2
 8004660:	604b      	str	r3, [r1, #4]
 8004662:	e025      	b.n	80046b0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004664:	4b66      	ldr	r3, [pc, #408]	; (8004800 <HAL_RCC_OscConfig+0x270>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a65      	ldr	r2, [pc, #404]	; (8004800 <HAL_RCC_OscConfig+0x270>)
 800466a:	f043 0308 	orr.w	r3, r3, #8
 800466e:	6013      	str	r3, [r2, #0]
 8004670:	4b63      	ldr	r3, [pc, #396]	; (8004800 <HAL_RCC_OscConfig+0x270>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	4960      	ldr	r1, [pc, #384]	; (8004800 <HAL_RCC_OscConfig+0x270>)
 800467e:	4313      	orrs	r3, r2
 8004680:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004682:	4b5f      	ldr	r3, [pc, #380]	; (8004800 <HAL_RCC_OscConfig+0x270>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	69db      	ldr	r3, [r3, #28]
 800468e:	021b      	lsls	r3, r3, #8
 8004690:	495b      	ldr	r1, [pc, #364]	; (8004800 <HAL_RCC_OscConfig+0x270>)
 8004692:	4313      	orrs	r3, r2
 8004694:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d109      	bne.n	80046b0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 fd15 	bl	80050d0 <RCC_SetFlashLatencyFromMSIRange>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d001      	beq.n	80046b0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e343      	b.n	8004d38 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046b0:	f000 fc4a 	bl	8004f48 <HAL_RCC_GetSysClockFreq>
 80046b4:	4602      	mov	r2, r0
 80046b6:	4b52      	ldr	r3, [pc, #328]	; (8004800 <HAL_RCC_OscConfig+0x270>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	091b      	lsrs	r3, r3, #4
 80046bc:	f003 030f 	and.w	r3, r3, #15
 80046c0:	4950      	ldr	r1, [pc, #320]	; (8004804 <HAL_RCC_OscConfig+0x274>)
 80046c2:	5ccb      	ldrb	r3, [r1, r3]
 80046c4:	f003 031f 	and.w	r3, r3, #31
 80046c8:	fa22 f303 	lsr.w	r3, r2, r3
 80046cc:	4a4e      	ldr	r2, [pc, #312]	; (8004808 <HAL_RCC_OscConfig+0x278>)
 80046ce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80046d0:	4b4e      	ldr	r3, [pc, #312]	; (800480c <HAL_RCC_OscConfig+0x27c>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7fd f9d9 	bl	8001a8c <HAL_InitTick>
 80046da:	4603      	mov	r3, r0
 80046dc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80046de:	7bfb      	ldrb	r3, [r7, #15]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d052      	beq.n	800478a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80046e4:	7bfb      	ldrb	r3, [r7, #15]
 80046e6:	e327      	b.n	8004d38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d032      	beq.n	8004756 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80046f0:	4b43      	ldr	r3, [pc, #268]	; (8004800 <HAL_RCC_OscConfig+0x270>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a42      	ldr	r2, [pc, #264]	; (8004800 <HAL_RCC_OscConfig+0x270>)
 80046f6:	f043 0301 	orr.w	r3, r3, #1
 80046fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046fc:	f7fd fa16 	bl	8001b2c <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004704:	f7fd fa12 	bl	8001b2c <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e310      	b.n	8004d38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004716:	4b3a      	ldr	r3, [pc, #232]	; (8004800 <HAL_RCC_OscConfig+0x270>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d0f0      	beq.n	8004704 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004722:	4b37      	ldr	r3, [pc, #220]	; (8004800 <HAL_RCC_OscConfig+0x270>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a36      	ldr	r2, [pc, #216]	; (8004800 <HAL_RCC_OscConfig+0x270>)
 8004728:	f043 0308 	orr.w	r3, r3, #8
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	4b34      	ldr	r3, [pc, #208]	; (8004800 <HAL_RCC_OscConfig+0x270>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	4931      	ldr	r1, [pc, #196]	; (8004800 <HAL_RCC_OscConfig+0x270>)
 800473c:	4313      	orrs	r3, r2
 800473e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004740:	4b2f      	ldr	r3, [pc, #188]	; (8004800 <HAL_RCC_OscConfig+0x270>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	69db      	ldr	r3, [r3, #28]
 800474c:	021b      	lsls	r3, r3, #8
 800474e:	492c      	ldr	r1, [pc, #176]	; (8004800 <HAL_RCC_OscConfig+0x270>)
 8004750:	4313      	orrs	r3, r2
 8004752:	604b      	str	r3, [r1, #4]
 8004754:	e01a      	b.n	800478c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004756:	4b2a      	ldr	r3, [pc, #168]	; (8004800 <HAL_RCC_OscConfig+0x270>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a29      	ldr	r2, [pc, #164]	; (8004800 <HAL_RCC_OscConfig+0x270>)
 800475c:	f023 0301 	bic.w	r3, r3, #1
 8004760:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004762:	f7fd f9e3 	bl	8001b2c <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004768:	e008      	b.n	800477c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800476a:	f7fd f9df 	bl	8001b2c <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e2dd      	b.n	8004d38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800477c:	4b20      	ldr	r3, [pc, #128]	; (8004800 <HAL_RCC_OscConfig+0x270>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1f0      	bne.n	800476a <HAL_RCC_OscConfig+0x1da>
 8004788:	e000      	b.n	800478c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800478a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b00      	cmp	r3, #0
 8004796:	d074      	beq.n	8004882 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	2b08      	cmp	r3, #8
 800479c:	d005      	beq.n	80047aa <HAL_RCC_OscConfig+0x21a>
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	2b0c      	cmp	r3, #12
 80047a2:	d10e      	bne.n	80047c2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	2b03      	cmp	r3, #3
 80047a8:	d10b      	bne.n	80047c2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047aa:	4b15      	ldr	r3, [pc, #84]	; (8004800 <HAL_RCC_OscConfig+0x270>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d064      	beq.n	8004880 <HAL_RCC_OscConfig+0x2f0>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d160      	bne.n	8004880 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e2ba      	b.n	8004d38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ca:	d106      	bne.n	80047da <HAL_RCC_OscConfig+0x24a>
 80047cc:	4b0c      	ldr	r3, [pc, #48]	; (8004800 <HAL_RCC_OscConfig+0x270>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a0b      	ldr	r2, [pc, #44]	; (8004800 <HAL_RCC_OscConfig+0x270>)
 80047d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047d6:	6013      	str	r3, [r2, #0]
 80047d8:	e026      	b.n	8004828 <HAL_RCC_OscConfig+0x298>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047e2:	d115      	bne.n	8004810 <HAL_RCC_OscConfig+0x280>
 80047e4:	4b06      	ldr	r3, [pc, #24]	; (8004800 <HAL_RCC_OscConfig+0x270>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a05      	ldr	r2, [pc, #20]	; (8004800 <HAL_RCC_OscConfig+0x270>)
 80047ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047ee:	6013      	str	r3, [r2, #0]
 80047f0:	4b03      	ldr	r3, [pc, #12]	; (8004800 <HAL_RCC_OscConfig+0x270>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a02      	ldr	r2, [pc, #8]	; (8004800 <HAL_RCC_OscConfig+0x270>)
 80047f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047fa:	6013      	str	r3, [r2, #0]
 80047fc:	e014      	b.n	8004828 <HAL_RCC_OscConfig+0x298>
 80047fe:	bf00      	nop
 8004800:	40021000 	.word	0x40021000
 8004804:	0800b3c4 	.word	0x0800b3c4
 8004808:	20000000 	.word	0x20000000
 800480c:	20000004 	.word	0x20000004
 8004810:	4ba0      	ldr	r3, [pc, #640]	; (8004a94 <HAL_RCC_OscConfig+0x504>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a9f      	ldr	r2, [pc, #636]	; (8004a94 <HAL_RCC_OscConfig+0x504>)
 8004816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800481a:	6013      	str	r3, [r2, #0]
 800481c:	4b9d      	ldr	r3, [pc, #628]	; (8004a94 <HAL_RCC_OscConfig+0x504>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a9c      	ldr	r2, [pc, #624]	; (8004a94 <HAL_RCC_OscConfig+0x504>)
 8004822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004826:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d013      	beq.n	8004858 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004830:	f7fd f97c 	bl	8001b2c <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004838:	f7fd f978 	bl	8001b2c <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b64      	cmp	r3, #100	; 0x64
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e276      	b.n	8004d38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800484a:	4b92      	ldr	r3, [pc, #584]	; (8004a94 <HAL_RCC_OscConfig+0x504>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d0f0      	beq.n	8004838 <HAL_RCC_OscConfig+0x2a8>
 8004856:	e014      	b.n	8004882 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004858:	f7fd f968 	bl	8001b2c <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004860:	f7fd f964 	bl	8001b2c <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b64      	cmp	r3, #100	; 0x64
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e262      	b.n	8004d38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004872:	4b88      	ldr	r3, [pc, #544]	; (8004a94 <HAL_RCC_OscConfig+0x504>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1f0      	bne.n	8004860 <HAL_RCC_OscConfig+0x2d0>
 800487e:	e000      	b.n	8004882 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d060      	beq.n	8004950 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	2b04      	cmp	r3, #4
 8004892:	d005      	beq.n	80048a0 <HAL_RCC_OscConfig+0x310>
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	2b0c      	cmp	r3, #12
 8004898:	d119      	bne.n	80048ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	2b02      	cmp	r3, #2
 800489e:	d116      	bne.n	80048ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048a0:	4b7c      	ldr	r3, [pc, #496]	; (8004a94 <HAL_RCC_OscConfig+0x504>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d005      	beq.n	80048b8 <HAL_RCC_OscConfig+0x328>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d101      	bne.n	80048b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e23f      	b.n	8004d38 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048b8:	4b76      	ldr	r3, [pc, #472]	; (8004a94 <HAL_RCC_OscConfig+0x504>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	061b      	lsls	r3, r3, #24
 80048c6:	4973      	ldr	r1, [pc, #460]	; (8004a94 <HAL_RCC_OscConfig+0x504>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048cc:	e040      	b.n	8004950 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d023      	beq.n	800491e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048d6:	4b6f      	ldr	r3, [pc, #444]	; (8004a94 <HAL_RCC_OscConfig+0x504>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a6e      	ldr	r2, [pc, #440]	; (8004a94 <HAL_RCC_OscConfig+0x504>)
 80048dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e2:	f7fd f923 	bl	8001b2c <HAL_GetTick>
 80048e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048e8:	e008      	b.n	80048fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048ea:	f7fd f91f 	bl	8001b2c <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e21d      	b.n	8004d38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048fc:	4b65      	ldr	r3, [pc, #404]	; (8004a94 <HAL_RCC_OscConfig+0x504>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0f0      	beq.n	80048ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004908:	4b62      	ldr	r3, [pc, #392]	; (8004a94 <HAL_RCC_OscConfig+0x504>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	061b      	lsls	r3, r3, #24
 8004916:	495f      	ldr	r1, [pc, #380]	; (8004a94 <HAL_RCC_OscConfig+0x504>)
 8004918:	4313      	orrs	r3, r2
 800491a:	604b      	str	r3, [r1, #4]
 800491c:	e018      	b.n	8004950 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800491e:	4b5d      	ldr	r3, [pc, #372]	; (8004a94 <HAL_RCC_OscConfig+0x504>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a5c      	ldr	r2, [pc, #368]	; (8004a94 <HAL_RCC_OscConfig+0x504>)
 8004924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004928:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492a:	f7fd f8ff 	bl	8001b2c <HAL_GetTick>
 800492e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004930:	e008      	b.n	8004944 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004932:	f7fd f8fb 	bl	8001b2c <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b02      	cmp	r3, #2
 800493e:	d901      	bls.n	8004944 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e1f9      	b.n	8004d38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004944:	4b53      	ldr	r3, [pc, #332]	; (8004a94 <HAL_RCC_OscConfig+0x504>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1f0      	bne.n	8004932 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0308 	and.w	r3, r3, #8
 8004958:	2b00      	cmp	r3, #0
 800495a:	d03c      	beq.n	80049d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d01c      	beq.n	800499e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004964:	4b4b      	ldr	r3, [pc, #300]	; (8004a94 <HAL_RCC_OscConfig+0x504>)
 8004966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800496a:	4a4a      	ldr	r2, [pc, #296]	; (8004a94 <HAL_RCC_OscConfig+0x504>)
 800496c:	f043 0301 	orr.w	r3, r3, #1
 8004970:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004974:	f7fd f8da 	bl	8001b2c <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800497c:	f7fd f8d6 	bl	8001b2c <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e1d4      	b.n	8004d38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800498e:	4b41      	ldr	r3, [pc, #260]	; (8004a94 <HAL_RCC_OscConfig+0x504>)
 8004990:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d0ef      	beq.n	800497c <HAL_RCC_OscConfig+0x3ec>
 800499c:	e01b      	b.n	80049d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800499e:	4b3d      	ldr	r3, [pc, #244]	; (8004a94 <HAL_RCC_OscConfig+0x504>)
 80049a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049a4:	4a3b      	ldr	r2, [pc, #236]	; (8004a94 <HAL_RCC_OscConfig+0x504>)
 80049a6:	f023 0301 	bic.w	r3, r3, #1
 80049aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ae:	f7fd f8bd 	bl	8001b2c <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049b4:	e008      	b.n	80049c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049b6:	f7fd f8b9 	bl	8001b2c <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e1b7      	b.n	8004d38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049c8:	4b32      	ldr	r3, [pc, #200]	; (8004a94 <HAL_RCC_OscConfig+0x504>)
 80049ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1ef      	bne.n	80049b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0304 	and.w	r3, r3, #4
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 80a6 	beq.w	8004b30 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049e4:	2300      	movs	r3, #0
 80049e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80049e8:	4b2a      	ldr	r3, [pc, #168]	; (8004a94 <HAL_RCC_OscConfig+0x504>)
 80049ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10d      	bne.n	8004a10 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049f4:	4b27      	ldr	r3, [pc, #156]	; (8004a94 <HAL_RCC_OscConfig+0x504>)
 80049f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f8:	4a26      	ldr	r2, [pc, #152]	; (8004a94 <HAL_RCC_OscConfig+0x504>)
 80049fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049fe:	6593      	str	r3, [r2, #88]	; 0x58
 8004a00:	4b24      	ldr	r3, [pc, #144]	; (8004a94 <HAL_RCC_OscConfig+0x504>)
 8004a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a08:	60bb      	str	r3, [r7, #8]
 8004a0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a10:	4b21      	ldr	r3, [pc, #132]	; (8004a98 <HAL_RCC_OscConfig+0x508>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d118      	bne.n	8004a4e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a1c:	4b1e      	ldr	r3, [pc, #120]	; (8004a98 <HAL_RCC_OscConfig+0x508>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a1d      	ldr	r2, [pc, #116]	; (8004a98 <HAL_RCC_OscConfig+0x508>)
 8004a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a28:	f7fd f880 	bl	8001b2c <HAL_GetTick>
 8004a2c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a2e:	e008      	b.n	8004a42 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a30:	f7fd f87c 	bl	8001b2c <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e17a      	b.n	8004d38 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a42:	4b15      	ldr	r3, [pc, #84]	; (8004a98 <HAL_RCC_OscConfig+0x508>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0f0      	beq.n	8004a30 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d108      	bne.n	8004a68 <HAL_RCC_OscConfig+0x4d8>
 8004a56:	4b0f      	ldr	r3, [pc, #60]	; (8004a94 <HAL_RCC_OscConfig+0x504>)
 8004a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a5c:	4a0d      	ldr	r2, [pc, #52]	; (8004a94 <HAL_RCC_OscConfig+0x504>)
 8004a5e:	f043 0301 	orr.w	r3, r3, #1
 8004a62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a66:	e029      	b.n	8004abc <HAL_RCC_OscConfig+0x52c>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	2b05      	cmp	r3, #5
 8004a6e:	d115      	bne.n	8004a9c <HAL_RCC_OscConfig+0x50c>
 8004a70:	4b08      	ldr	r3, [pc, #32]	; (8004a94 <HAL_RCC_OscConfig+0x504>)
 8004a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a76:	4a07      	ldr	r2, [pc, #28]	; (8004a94 <HAL_RCC_OscConfig+0x504>)
 8004a78:	f043 0304 	orr.w	r3, r3, #4
 8004a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a80:	4b04      	ldr	r3, [pc, #16]	; (8004a94 <HAL_RCC_OscConfig+0x504>)
 8004a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a86:	4a03      	ldr	r2, [pc, #12]	; (8004a94 <HAL_RCC_OscConfig+0x504>)
 8004a88:	f043 0301 	orr.w	r3, r3, #1
 8004a8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a90:	e014      	b.n	8004abc <HAL_RCC_OscConfig+0x52c>
 8004a92:	bf00      	nop
 8004a94:	40021000 	.word	0x40021000
 8004a98:	40007000 	.word	0x40007000
 8004a9c:	4b9c      	ldr	r3, [pc, #624]	; (8004d10 <HAL_RCC_OscConfig+0x780>)
 8004a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa2:	4a9b      	ldr	r2, [pc, #620]	; (8004d10 <HAL_RCC_OscConfig+0x780>)
 8004aa4:	f023 0301 	bic.w	r3, r3, #1
 8004aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004aac:	4b98      	ldr	r3, [pc, #608]	; (8004d10 <HAL_RCC_OscConfig+0x780>)
 8004aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab2:	4a97      	ldr	r2, [pc, #604]	; (8004d10 <HAL_RCC_OscConfig+0x780>)
 8004ab4:	f023 0304 	bic.w	r3, r3, #4
 8004ab8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d016      	beq.n	8004af2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac4:	f7fd f832 	bl	8001b2c <HAL_GetTick>
 8004ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004aca:	e00a      	b.n	8004ae2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004acc:	f7fd f82e 	bl	8001b2c <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e12a      	b.n	8004d38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ae2:	4b8b      	ldr	r3, [pc, #556]	; (8004d10 <HAL_RCC_OscConfig+0x780>)
 8004ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d0ed      	beq.n	8004acc <HAL_RCC_OscConfig+0x53c>
 8004af0:	e015      	b.n	8004b1e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af2:	f7fd f81b 	bl	8001b2c <HAL_GetTick>
 8004af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004af8:	e00a      	b.n	8004b10 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004afa:	f7fd f817 	bl	8001b2c <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d901      	bls.n	8004b10 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e113      	b.n	8004d38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b10:	4b7f      	ldr	r3, [pc, #508]	; (8004d10 <HAL_RCC_OscConfig+0x780>)
 8004b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1ed      	bne.n	8004afa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b1e:	7ffb      	ldrb	r3, [r7, #31]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d105      	bne.n	8004b30 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b24:	4b7a      	ldr	r3, [pc, #488]	; (8004d10 <HAL_RCC_OscConfig+0x780>)
 8004b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b28:	4a79      	ldr	r2, [pc, #484]	; (8004d10 <HAL_RCC_OscConfig+0x780>)
 8004b2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b2e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f000 80fe 	beq.w	8004d36 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	f040 80d0 	bne.w	8004ce4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004b44:	4b72      	ldr	r3, [pc, #456]	; (8004d10 <HAL_RCC_OscConfig+0x780>)
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f003 0203 	and.w	r2, r3, #3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d130      	bne.n	8004bba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b62:	3b01      	subs	r3, #1
 8004b64:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d127      	bne.n	8004bba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b74:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d11f      	bne.n	8004bba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b84:	2a07      	cmp	r2, #7
 8004b86:	bf14      	ite	ne
 8004b88:	2201      	movne	r2, #1
 8004b8a:	2200      	moveq	r2, #0
 8004b8c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d113      	bne.n	8004bba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9c:	085b      	lsrs	r3, r3, #1
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d109      	bne.n	8004bba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb0:	085b      	lsrs	r3, r3, #1
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d06e      	beq.n	8004c98 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	2b0c      	cmp	r3, #12
 8004bbe:	d069      	beq.n	8004c94 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004bc0:	4b53      	ldr	r3, [pc, #332]	; (8004d10 <HAL_RCC_OscConfig+0x780>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d105      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004bcc:	4b50      	ldr	r3, [pc, #320]	; (8004d10 <HAL_RCC_OscConfig+0x780>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d001      	beq.n	8004bdc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e0ad      	b.n	8004d38 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004bdc:	4b4c      	ldr	r3, [pc, #304]	; (8004d10 <HAL_RCC_OscConfig+0x780>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a4b      	ldr	r2, [pc, #300]	; (8004d10 <HAL_RCC_OscConfig+0x780>)
 8004be2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004be6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004be8:	f7fc ffa0 	bl	8001b2c <HAL_GetTick>
 8004bec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bee:	e008      	b.n	8004c02 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf0:	f7fc ff9c 	bl	8001b2c <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e09a      	b.n	8004d38 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c02:	4b43      	ldr	r3, [pc, #268]	; (8004d10 <HAL_RCC_OscConfig+0x780>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1f0      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c0e:	4b40      	ldr	r3, [pc, #256]	; (8004d10 <HAL_RCC_OscConfig+0x780>)
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	4b40      	ldr	r3, [pc, #256]	; (8004d14 <HAL_RCC_OscConfig+0x784>)
 8004c14:	4013      	ands	r3, r2
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c1e:	3a01      	subs	r2, #1
 8004c20:	0112      	lsls	r2, r2, #4
 8004c22:	4311      	orrs	r1, r2
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c28:	0212      	lsls	r2, r2, #8
 8004c2a:	4311      	orrs	r1, r2
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c30:	0852      	lsrs	r2, r2, #1
 8004c32:	3a01      	subs	r2, #1
 8004c34:	0552      	lsls	r2, r2, #21
 8004c36:	4311      	orrs	r1, r2
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c3c:	0852      	lsrs	r2, r2, #1
 8004c3e:	3a01      	subs	r2, #1
 8004c40:	0652      	lsls	r2, r2, #25
 8004c42:	4311      	orrs	r1, r2
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c48:	0912      	lsrs	r2, r2, #4
 8004c4a:	0452      	lsls	r2, r2, #17
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	4930      	ldr	r1, [pc, #192]	; (8004d10 <HAL_RCC_OscConfig+0x780>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004c54:	4b2e      	ldr	r3, [pc, #184]	; (8004d10 <HAL_RCC_OscConfig+0x780>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a2d      	ldr	r2, [pc, #180]	; (8004d10 <HAL_RCC_OscConfig+0x780>)
 8004c5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c5e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c60:	4b2b      	ldr	r3, [pc, #172]	; (8004d10 <HAL_RCC_OscConfig+0x780>)
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	4a2a      	ldr	r2, [pc, #168]	; (8004d10 <HAL_RCC_OscConfig+0x780>)
 8004c66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c6a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c6c:	f7fc ff5e 	bl	8001b2c <HAL_GetTick>
 8004c70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c72:	e008      	b.n	8004c86 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c74:	f7fc ff5a 	bl	8001b2c <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e058      	b.n	8004d38 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c86:	4b22      	ldr	r3, [pc, #136]	; (8004d10 <HAL_RCC_OscConfig+0x780>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d0f0      	beq.n	8004c74 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c92:	e050      	b.n	8004d36 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e04f      	b.n	8004d38 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c98:	4b1d      	ldr	r3, [pc, #116]	; (8004d10 <HAL_RCC_OscConfig+0x780>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d148      	bne.n	8004d36 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004ca4:	4b1a      	ldr	r3, [pc, #104]	; (8004d10 <HAL_RCC_OscConfig+0x780>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a19      	ldr	r2, [pc, #100]	; (8004d10 <HAL_RCC_OscConfig+0x780>)
 8004caa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cb0:	4b17      	ldr	r3, [pc, #92]	; (8004d10 <HAL_RCC_OscConfig+0x780>)
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	4a16      	ldr	r2, [pc, #88]	; (8004d10 <HAL_RCC_OscConfig+0x780>)
 8004cb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004cbc:	f7fc ff36 	bl	8001b2c <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cc4:	f7fc ff32 	bl	8001b2c <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e030      	b.n	8004d38 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cd6:	4b0e      	ldr	r3, [pc, #56]	; (8004d10 <HAL_RCC_OscConfig+0x780>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d0f0      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x734>
 8004ce2:	e028      	b.n	8004d36 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	2b0c      	cmp	r3, #12
 8004ce8:	d023      	beq.n	8004d32 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cea:	4b09      	ldr	r3, [pc, #36]	; (8004d10 <HAL_RCC_OscConfig+0x780>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a08      	ldr	r2, [pc, #32]	; (8004d10 <HAL_RCC_OscConfig+0x780>)
 8004cf0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf6:	f7fc ff19 	bl	8001b2c <HAL_GetTick>
 8004cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cfc:	e00c      	b.n	8004d18 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cfe:	f7fc ff15 	bl	8001b2c <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d905      	bls.n	8004d18 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e013      	b.n	8004d38 <HAL_RCC_OscConfig+0x7a8>
 8004d10:	40021000 	.word	0x40021000
 8004d14:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d18:	4b09      	ldr	r3, [pc, #36]	; (8004d40 <HAL_RCC_OscConfig+0x7b0>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1ec      	bne.n	8004cfe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004d24:	4b06      	ldr	r3, [pc, #24]	; (8004d40 <HAL_RCC_OscConfig+0x7b0>)
 8004d26:	68da      	ldr	r2, [r3, #12]
 8004d28:	4905      	ldr	r1, [pc, #20]	; (8004d40 <HAL_RCC_OscConfig+0x7b0>)
 8004d2a:	4b06      	ldr	r3, [pc, #24]	; (8004d44 <HAL_RCC_OscConfig+0x7b4>)
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	60cb      	str	r3, [r1, #12]
 8004d30:	e001      	b.n	8004d36 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e000      	b.n	8004d38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3720      	adds	r7, #32
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	40021000 	.word	0x40021000
 8004d44:	feeefffc 	.word	0xfeeefffc

08004d48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d101      	bne.n	8004d5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e0e7      	b.n	8004f2c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d5c:	4b75      	ldr	r3, [pc, #468]	; (8004f34 <HAL_RCC_ClockConfig+0x1ec>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0307 	and.w	r3, r3, #7
 8004d64:	683a      	ldr	r2, [r7, #0]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d910      	bls.n	8004d8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d6a:	4b72      	ldr	r3, [pc, #456]	; (8004f34 <HAL_RCC_ClockConfig+0x1ec>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f023 0207 	bic.w	r2, r3, #7
 8004d72:	4970      	ldr	r1, [pc, #448]	; (8004f34 <HAL_RCC_ClockConfig+0x1ec>)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d7a:	4b6e      	ldr	r3, [pc, #440]	; (8004f34 <HAL_RCC_ClockConfig+0x1ec>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0307 	and.w	r3, r3, #7
 8004d82:	683a      	ldr	r2, [r7, #0]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d001      	beq.n	8004d8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e0cf      	b.n	8004f2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d010      	beq.n	8004dba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689a      	ldr	r2, [r3, #8]
 8004d9c:	4b66      	ldr	r3, [pc, #408]	; (8004f38 <HAL_RCC_ClockConfig+0x1f0>)
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d908      	bls.n	8004dba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004da8:	4b63      	ldr	r3, [pc, #396]	; (8004f38 <HAL_RCC_ClockConfig+0x1f0>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	4960      	ldr	r1, [pc, #384]	; (8004f38 <HAL_RCC_ClockConfig+0x1f0>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d04c      	beq.n	8004e60 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	2b03      	cmp	r3, #3
 8004dcc:	d107      	bne.n	8004dde <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dce:	4b5a      	ldr	r3, [pc, #360]	; (8004f38 <HAL_RCC_ClockConfig+0x1f0>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d121      	bne.n	8004e1e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e0a6      	b.n	8004f2c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d107      	bne.n	8004df6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004de6:	4b54      	ldr	r3, [pc, #336]	; (8004f38 <HAL_RCC_ClockConfig+0x1f0>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d115      	bne.n	8004e1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e09a      	b.n	8004f2c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d107      	bne.n	8004e0e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004dfe:	4b4e      	ldr	r3, [pc, #312]	; (8004f38 <HAL_RCC_ClockConfig+0x1f0>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d109      	bne.n	8004e1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e08e      	b.n	8004f2c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e0e:	4b4a      	ldr	r3, [pc, #296]	; (8004f38 <HAL_RCC_ClockConfig+0x1f0>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e086      	b.n	8004f2c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e1e:	4b46      	ldr	r3, [pc, #280]	; (8004f38 <HAL_RCC_ClockConfig+0x1f0>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f023 0203 	bic.w	r2, r3, #3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	4943      	ldr	r1, [pc, #268]	; (8004f38 <HAL_RCC_ClockConfig+0x1f0>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e30:	f7fc fe7c 	bl	8001b2c <HAL_GetTick>
 8004e34:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e36:	e00a      	b.n	8004e4e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e38:	f7fc fe78 	bl	8001b2c <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e06e      	b.n	8004f2c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e4e:	4b3a      	ldr	r3, [pc, #232]	; (8004f38 <HAL_RCC_ClockConfig+0x1f0>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f003 020c 	and.w	r2, r3, #12
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d1eb      	bne.n	8004e38 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d010      	beq.n	8004e8e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	4b31      	ldr	r3, [pc, #196]	; (8004f38 <HAL_RCC_ClockConfig+0x1f0>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d208      	bcs.n	8004e8e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e7c:	4b2e      	ldr	r3, [pc, #184]	; (8004f38 <HAL_RCC_ClockConfig+0x1f0>)
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	492b      	ldr	r1, [pc, #172]	; (8004f38 <HAL_RCC_ClockConfig+0x1f0>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e8e:	4b29      	ldr	r3, [pc, #164]	; (8004f34 <HAL_RCC_ClockConfig+0x1ec>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0307 	and.w	r3, r3, #7
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d210      	bcs.n	8004ebe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e9c:	4b25      	ldr	r3, [pc, #148]	; (8004f34 <HAL_RCC_ClockConfig+0x1ec>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f023 0207 	bic.w	r2, r3, #7
 8004ea4:	4923      	ldr	r1, [pc, #140]	; (8004f34 <HAL_RCC_ClockConfig+0x1ec>)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eac:	4b21      	ldr	r3, [pc, #132]	; (8004f34 <HAL_RCC_ClockConfig+0x1ec>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0307 	and.w	r3, r3, #7
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d001      	beq.n	8004ebe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e036      	b.n	8004f2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0304 	and.w	r3, r3, #4
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d008      	beq.n	8004edc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004eca:	4b1b      	ldr	r3, [pc, #108]	; (8004f38 <HAL_RCC_ClockConfig+0x1f0>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	4918      	ldr	r1, [pc, #96]	; (8004f38 <HAL_RCC_ClockConfig+0x1f0>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0308 	and.w	r3, r3, #8
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d009      	beq.n	8004efc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ee8:	4b13      	ldr	r3, [pc, #76]	; (8004f38 <HAL_RCC_ClockConfig+0x1f0>)
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	00db      	lsls	r3, r3, #3
 8004ef6:	4910      	ldr	r1, [pc, #64]	; (8004f38 <HAL_RCC_ClockConfig+0x1f0>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004efc:	f000 f824 	bl	8004f48 <HAL_RCC_GetSysClockFreq>
 8004f00:	4602      	mov	r2, r0
 8004f02:	4b0d      	ldr	r3, [pc, #52]	; (8004f38 <HAL_RCC_ClockConfig+0x1f0>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	091b      	lsrs	r3, r3, #4
 8004f08:	f003 030f 	and.w	r3, r3, #15
 8004f0c:	490b      	ldr	r1, [pc, #44]	; (8004f3c <HAL_RCC_ClockConfig+0x1f4>)
 8004f0e:	5ccb      	ldrb	r3, [r1, r3]
 8004f10:	f003 031f 	and.w	r3, r3, #31
 8004f14:	fa22 f303 	lsr.w	r3, r2, r3
 8004f18:	4a09      	ldr	r2, [pc, #36]	; (8004f40 <HAL_RCC_ClockConfig+0x1f8>)
 8004f1a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f1c:	4b09      	ldr	r3, [pc, #36]	; (8004f44 <HAL_RCC_ClockConfig+0x1fc>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7fc fdb3 	bl	8001a8c <HAL_InitTick>
 8004f26:	4603      	mov	r3, r0
 8004f28:	72fb      	strb	r3, [r7, #11]

  return status;
 8004f2a:	7afb      	ldrb	r3, [r7, #11]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3710      	adds	r7, #16
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	40022000 	.word	0x40022000
 8004f38:	40021000 	.word	0x40021000
 8004f3c:	0800b3c4 	.word	0x0800b3c4
 8004f40:	20000000 	.word	0x20000000
 8004f44:	20000004 	.word	0x20000004

08004f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b089      	sub	sp, #36	; 0x24
 8004f4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	61fb      	str	r3, [r7, #28]
 8004f52:	2300      	movs	r3, #0
 8004f54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f56:	4b3e      	ldr	r3, [pc, #248]	; (8005050 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f003 030c 	and.w	r3, r3, #12
 8004f5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f60:	4b3b      	ldr	r3, [pc, #236]	; (8005050 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	f003 0303 	and.w	r3, r3, #3
 8004f68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d005      	beq.n	8004f7c <HAL_RCC_GetSysClockFreq+0x34>
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	2b0c      	cmp	r3, #12
 8004f74:	d121      	bne.n	8004fba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d11e      	bne.n	8004fba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004f7c:	4b34      	ldr	r3, [pc, #208]	; (8005050 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0308 	and.w	r3, r3, #8
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d107      	bne.n	8004f98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f88:	4b31      	ldr	r3, [pc, #196]	; (8005050 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f8e:	0a1b      	lsrs	r3, r3, #8
 8004f90:	f003 030f 	and.w	r3, r3, #15
 8004f94:	61fb      	str	r3, [r7, #28]
 8004f96:	e005      	b.n	8004fa4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004f98:	4b2d      	ldr	r3, [pc, #180]	; (8005050 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	091b      	lsrs	r3, r3, #4
 8004f9e:	f003 030f 	and.w	r3, r3, #15
 8004fa2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004fa4:	4a2b      	ldr	r2, [pc, #172]	; (8005054 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10d      	bne.n	8004fd0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fb8:	e00a      	b.n	8004fd0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	2b04      	cmp	r3, #4
 8004fbe:	d102      	bne.n	8004fc6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004fc0:	4b25      	ldr	r3, [pc, #148]	; (8005058 <HAL_RCC_GetSysClockFreq+0x110>)
 8004fc2:	61bb      	str	r3, [r7, #24]
 8004fc4:	e004      	b.n	8004fd0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	2b08      	cmp	r3, #8
 8004fca:	d101      	bne.n	8004fd0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004fcc:	4b23      	ldr	r3, [pc, #140]	; (800505c <HAL_RCC_GetSysClockFreq+0x114>)
 8004fce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	2b0c      	cmp	r3, #12
 8004fd4:	d134      	bne.n	8005040 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004fd6:	4b1e      	ldr	r3, [pc, #120]	; (8005050 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	f003 0303 	and.w	r3, r3, #3
 8004fde:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d003      	beq.n	8004fee <HAL_RCC_GetSysClockFreq+0xa6>
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	2b03      	cmp	r3, #3
 8004fea:	d003      	beq.n	8004ff4 <HAL_RCC_GetSysClockFreq+0xac>
 8004fec:	e005      	b.n	8004ffa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004fee:	4b1a      	ldr	r3, [pc, #104]	; (8005058 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ff0:	617b      	str	r3, [r7, #20]
      break;
 8004ff2:	e005      	b.n	8005000 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ff4:	4b19      	ldr	r3, [pc, #100]	; (800505c <HAL_RCC_GetSysClockFreq+0x114>)
 8004ff6:	617b      	str	r3, [r7, #20]
      break;
 8004ff8:	e002      	b.n	8005000 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	617b      	str	r3, [r7, #20]
      break;
 8004ffe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005000:	4b13      	ldr	r3, [pc, #76]	; (8005050 <HAL_RCC_GetSysClockFreq+0x108>)
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	091b      	lsrs	r3, r3, #4
 8005006:	f003 0307 	and.w	r3, r3, #7
 800500a:	3301      	adds	r3, #1
 800500c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800500e:	4b10      	ldr	r3, [pc, #64]	; (8005050 <HAL_RCC_GetSysClockFreq+0x108>)
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	0a1b      	lsrs	r3, r3, #8
 8005014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	fb03 f202 	mul.w	r2, r3, r2
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	fbb2 f3f3 	udiv	r3, r2, r3
 8005024:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005026:	4b0a      	ldr	r3, [pc, #40]	; (8005050 <HAL_RCC_GetSysClockFreq+0x108>)
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	0e5b      	lsrs	r3, r3, #25
 800502c:	f003 0303 	and.w	r3, r3, #3
 8005030:	3301      	adds	r3, #1
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	fbb2 f3f3 	udiv	r3, r2, r3
 800503e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005040:	69bb      	ldr	r3, [r7, #24]
}
 8005042:	4618      	mov	r0, r3
 8005044:	3724      	adds	r7, #36	; 0x24
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	40021000 	.word	0x40021000
 8005054:	0800b3dc 	.word	0x0800b3dc
 8005058:	00f42400 	.word	0x00f42400
 800505c:	007a1200 	.word	0x007a1200

08005060 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005060:	b480      	push	{r7}
 8005062:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005064:	4b03      	ldr	r3, [pc, #12]	; (8005074 <HAL_RCC_GetHCLKFreq+0x14>)
 8005066:	681b      	ldr	r3, [r3, #0]
}
 8005068:	4618      	mov	r0, r3
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	20000000 	.word	0x20000000

08005078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800507c:	f7ff fff0 	bl	8005060 <HAL_RCC_GetHCLKFreq>
 8005080:	4602      	mov	r2, r0
 8005082:	4b06      	ldr	r3, [pc, #24]	; (800509c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	0a1b      	lsrs	r3, r3, #8
 8005088:	f003 0307 	and.w	r3, r3, #7
 800508c:	4904      	ldr	r1, [pc, #16]	; (80050a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800508e:	5ccb      	ldrb	r3, [r1, r3]
 8005090:	f003 031f 	and.w	r3, r3, #31
 8005094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005098:	4618      	mov	r0, r3
 800509a:	bd80      	pop	{r7, pc}
 800509c:	40021000 	.word	0x40021000
 80050a0:	0800b3d4 	.word	0x0800b3d4

080050a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80050a8:	f7ff ffda 	bl	8005060 <HAL_RCC_GetHCLKFreq>
 80050ac:	4602      	mov	r2, r0
 80050ae:	4b06      	ldr	r3, [pc, #24]	; (80050c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	0adb      	lsrs	r3, r3, #11
 80050b4:	f003 0307 	and.w	r3, r3, #7
 80050b8:	4904      	ldr	r1, [pc, #16]	; (80050cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80050ba:	5ccb      	ldrb	r3, [r1, r3]
 80050bc:	f003 031f 	and.w	r3, r3, #31
 80050c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	40021000 	.word	0x40021000
 80050cc:	0800b3d4 	.word	0x0800b3d4

080050d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80050d8:	2300      	movs	r3, #0
 80050da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80050dc:	4b2a      	ldr	r3, [pc, #168]	; (8005188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d003      	beq.n	80050f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80050e8:	f7ff f922 	bl	8004330 <HAL_PWREx_GetVoltageRange>
 80050ec:	6178      	str	r0, [r7, #20]
 80050ee:	e014      	b.n	800511a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80050f0:	4b25      	ldr	r3, [pc, #148]	; (8005188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f4:	4a24      	ldr	r2, [pc, #144]	; (8005188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050fa:	6593      	str	r3, [r2, #88]	; 0x58
 80050fc:	4b22      	ldr	r3, [pc, #136]	; (8005188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005104:	60fb      	str	r3, [r7, #12]
 8005106:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005108:	f7ff f912 	bl	8004330 <HAL_PWREx_GetVoltageRange>
 800510c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800510e:	4b1e      	ldr	r3, [pc, #120]	; (8005188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005112:	4a1d      	ldr	r2, [pc, #116]	; (8005188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005114:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005118:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005120:	d10b      	bne.n	800513a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2b80      	cmp	r3, #128	; 0x80
 8005126:	d919      	bls.n	800515c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2ba0      	cmp	r3, #160	; 0xa0
 800512c:	d902      	bls.n	8005134 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800512e:	2302      	movs	r3, #2
 8005130:	613b      	str	r3, [r7, #16]
 8005132:	e013      	b.n	800515c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005134:	2301      	movs	r3, #1
 8005136:	613b      	str	r3, [r7, #16]
 8005138:	e010      	b.n	800515c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b80      	cmp	r3, #128	; 0x80
 800513e:	d902      	bls.n	8005146 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005140:	2303      	movs	r3, #3
 8005142:	613b      	str	r3, [r7, #16]
 8005144:	e00a      	b.n	800515c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2b80      	cmp	r3, #128	; 0x80
 800514a:	d102      	bne.n	8005152 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800514c:	2302      	movs	r3, #2
 800514e:	613b      	str	r3, [r7, #16]
 8005150:	e004      	b.n	800515c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b70      	cmp	r3, #112	; 0x70
 8005156:	d101      	bne.n	800515c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005158:	2301      	movs	r3, #1
 800515a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800515c:	4b0b      	ldr	r3, [pc, #44]	; (800518c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f023 0207 	bic.w	r2, r3, #7
 8005164:	4909      	ldr	r1, [pc, #36]	; (800518c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	4313      	orrs	r3, r2
 800516a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800516c:	4b07      	ldr	r3, [pc, #28]	; (800518c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0307 	and.w	r3, r3, #7
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	429a      	cmp	r2, r3
 8005178:	d001      	beq.n	800517e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e000      	b.n	8005180 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3718      	adds	r7, #24
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	40021000 	.word	0x40021000
 800518c:	40022000 	.word	0x40022000

08005190 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005198:	2300      	movs	r3, #0
 800519a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800519c:	2300      	movs	r3, #0
 800519e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d041      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80051b4:	d02a      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80051b6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80051ba:	d824      	bhi.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80051bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051c0:	d008      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80051c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051c6:	d81e      	bhi.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00a      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80051cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051d0:	d010      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80051d2:	e018      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051d4:	4b86      	ldr	r3, [pc, #536]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	4a85      	ldr	r2, [pc, #532]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051e0:	e015      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	3304      	adds	r3, #4
 80051e6:	2100      	movs	r1, #0
 80051e8:	4618      	mov	r0, r3
 80051ea:	f000 facb 	bl	8005784 <RCCEx_PLLSAI1_Config>
 80051ee:	4603      	mov	r3, r0
 80051f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051f2:	e00c      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	3320      	adds	r3, #32
 80051f8:	2100      	movs	r1, #0
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 fbb6 	bl	800596c <RCCEx_PLLSAI2_Config>
 8005200:	4603      	mov	r3, r0
 8005202:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005204:	e003      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	74fb      	strb	r3, [r7, #19]
      break;
 800520a:	e000      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800520c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800520e:	7cfb      	ldrb	r3, [r7, #19]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10b      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005214:	4b76      	ldr	r3, [pc, #472]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005222:	4973      	ldr	r1, [pc, #460]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005224:	4313      	orrs	r3, r2
 8005226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800522a:	e001      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800522c:	7cfb      	ldrb	r3, [r7, #19]
 800522e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d041      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005240:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005244:	d02a      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005246:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800524a:	d824      	bhi.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800524c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005250:	d008      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005252:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005256:	d81e      	bhi.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00a      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800525c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005260:	d010      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005262:	e018      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005264:	4b62      	ldr	r3, [pc, #392]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	4a61      	ldr	r2, [pc, #388]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800526a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800526e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005270:	e015      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	3304      	adds	r3, #4
 8005276:	2100      	movs	r1, #0
 8005278:	4618      	mov	r0, r3
 800527a:	f000 fa83 	bl	8005784 <RCCEx_PLLSAI1_Config>
 800527e:	4603      	mov	r3, r0
 8005280:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005282:	e00c      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3320      	adds	r3, #32
 8005288:	2100      	movs	r1, #0
 800528a:	4618      	mov	r0, r3
 800528c:	f000 fb6e 	bl	800596c <RCCEx_PLLSAI2_Config>
 8005290:	4603      	mov	r3, r0
 8005292:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005294:	e003      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	74fb      	strb	r3, [r7, #19]
      break;
 800529a:	e000      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800529c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800529e:	7cfb      	ldrb	r3, [r7, #19]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10b      	bne.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80052a4:	4b52      	ldr	r3, [pc, #328]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052b2:	494f      	ldr	r1, [pc, #316]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80052ba:	e001      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052bc:	7cfb      	ldrb	r3, [r7, #19]
 80052be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 80a0 	beq.w	800540e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052ce:	2300      	movs	r3, #0
 80052d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80052d2:	4b47      	ldr	r3, [pc, #284]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80052de:	2301      	movs	r3, #1
 80052e0:	e000      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80052e2:	2300      	movs	r3, #0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00d      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052e8:	4b41      	ldr	r3, [pc, #260]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ec:	4a40      	ldr	r2, [pc, #256]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052f2:	6593      	str	r3, [r2, #88]	; 0x58
 80052f4:	4b3e      	ldr	r3, [pc, #248]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052fc:	60bb      	str	r3, [r7, #8]
 80052fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005300:	2301      	movs	r3, #1
 8005302:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005304:	4b3b      	ldr	r3, [pc, #236]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a3a      	ldr	r2, [pc, #232]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800530a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800530e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005310:	f7fc fc0c 	bl	8001b2c <HAL_GetTick>
 8005314:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005316:	e009      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005318:	f7fc fc08 	bl	8001b2c <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b02      	cmp	r3, #2
 8005324:	d902      	bls.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	74fb      	strb	r3, [r7, #19]
        break;
 800532a:	e005      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800532c:	4b31      	ldr	r3, [pc, #196]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005334:	2b00      	cmp	r3, #0
 8005336:	d0ef      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005338:	7cfb      	ldrb	r3, [r7, #19]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d15c      	bne.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800533e:	4b2c      	ldr	r3, [pc, #176]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005344:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005348:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d01f      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	429a      	cmp	r2, r3
 800535a:	d019      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800535c:	4b24      	ldr	r3, [pc, #144]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800535e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005366:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005368:	4b21      	ldr	r3, [pc, #132]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800536a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800536e:	4a20      	ldr	r2, [pc, #128]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005374:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005378:	4b1d      	ldr	r3, [pc, #116]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800537a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800537e:	4a1c      	ldr	r2, [pc, #112]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005384:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005388:	4a19      	ldr	r2, [pc, #100]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d016      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800539a:	f7fc fbc7 	bl	8001b2c <HAL_GetTick>
 800539e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053a0:	e00b      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053a2:	f7fc fbc3 	bl	8001b2c <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d902      	bls.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	74fb      	strb	r3, [r7, #19]
            break;
 80053b8:	e006      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053ba:	4b0d      	ldr	r3, [pc, #52]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d0ec      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80053c8:	7cfb      	ldrb	r3, [r7, #19]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10c      	bne.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053ce:	4b08      	ldr	r3, [pc, #32]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053de:	4904      	ldr	r1, [pc, #16]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80053e6:	e009      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053e8:	7cfb      	ldrb	r3, [r7, #19]
 80053ea:	74bb      	strb	r3, [r7, #18]
 80053ec:	e006      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80053ee:	bf00      	nop
 80053f0:	40021000 	.word	0x40021000
 80053f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f8:	7cfb      	ldrb	r3, [r7, #19]
 80053fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053fc:	7c7b      	ldrb	r3, [r7, #17]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d105      	bne.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005402:	4b9e      	ldr	r3, [pc, #632]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005406:	4a9d      	ldr	r2, [pc, #628]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005408:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800540c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00a      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800541a:	4b98      	ldr	r3, [pc, #608]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800541c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005420:	f023 0203 	bic.w	r2, r3, #3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005428:	4994      	ldr	r1, [pc, #592]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800542a:	4313      	orrs	r3, r2
 800542c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0302 	and.w	r3, r3, #2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00a      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800543c:	4b8f      	ldr	r3, [pc, #572]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800543e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005442:	f023 020c 	bic.w	r2, r3, #12
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800544a:	498c      	ldr	r1, [pc, #560]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800544c:	4313      	orrs	r3, r2
 800544e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0304 	and.w	r3, r3, #4
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00a      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800545e:	4b87      	ldr	r3, [pc, #540]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005464:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546c:	4983      	ldr	r1, [pc, #524]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800546e:	4313      	orrs	r3, r2
 8005470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0308 	and.w	r3, r3, #8
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00a      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005480:	4b7e      	ldr	r3, [pc, #504]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005486:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800548e:	497b      	ldr	r1, [pc, #492]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005490:	4313      	orrs	r3, r2
 8005492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0310 	and.w	r3, r3, #16
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00a      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80054a2:	4b76      	ldr	r3, [pc, #472]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054b0:	4972      	ldr	r1, [pc, #456]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0320 	and.w	r3, r3, #32
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00a      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054c4:	4b6d      	ldr	r3, [pc, #436]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054d2:	496a      	ldr	r1, [pc, #424]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00a      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054e6:	4b65      	ldr	r3, [pc, #404]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054f4:	4961      	ldr	r1, [pc, #388]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00a      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005508:	4b5c      	ldr	r3, [pc, #368]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800550a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800550e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005516:	4959      	ldr	r1, [pc, #356]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005518:	4313      	orrs	r3, r2
 800551a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00a      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800552a:	4b54      	ldr	r3, [pc, #336]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800552c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005530:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005538:	4950      	ldr	r1, [pc, #320]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800553a:	4313      	orrs	r3, r2
 800553c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00a      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800554c:	4b4b      	ldr	r3, [pc, #300]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800554e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005552:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555a:	4948      	ldr	r1, [pc, #288]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800555c:	4313      	orrs	r3, r2
 800555e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00a      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800556e:	4b43      	ldr	r3, [pc, #268]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005574:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800557c:	493f      	ldr	r1, [pc, #252]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800557e:	4313      	orrs	r3, r2
 8005580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d028      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005590:	4b3a      	ldr	r3, [pc, #232]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005596:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800559e:	4937      	ldr	r1, [pc, #220]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055ae:	d106      	bne.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055b0:	4b32      	ldr	r3, [pc, #200]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	4a31      	ldr	r2, [pc, #196]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055ba:	60d3      	str	r3, [r2, #12]
 80055bc:	e011      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055c6:	d10c      	bne.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	3304      	adds	r3, #4
 80055cc:	2101      	movs	r1, #1
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 f8d8 	bl	8005784 <RCCEx_PLLSAI1_Config>
 80055d4:	4603      	mov	r3, r0
 80055d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80055d8:	7cfb      	ldrb	r3, [r7, #19]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d001      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80055de:	7cfb      	ldrb	r3, [r7, #19]
 80055e0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d028      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80055ee:	4b23      	ldr	r3, [pc, #140]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fc:	491f      	ldr	r1, [pc, #124]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005608:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800560c:	d106      	bne.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800560e:	4b1b      	ldr	r3, [pc, #108]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	4a1a      	ldr	r2, [pc, #104]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005614:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005618:	60d3      	str	r3, [r2, #12]
 800561a:	e011      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005620:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005624:	d10c      	bne.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	3304      	adds	r3, #4
 800562a:	2101      	movs	r1, #1
 800562c:	4618      	mov	r0, r3
 800562e:	f000 f8a9 	bl	8005784 <RCCEx_PLLSAI1_Config>
 8005632:	4603      	mov	r3, r0
 8005634:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005636:	7cfb      	ldrb	r3, [r7, #19]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d001      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800563c:	7cfb      	ldrb	r3, [r7, #19]
 800563e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d02b      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800564c:	4b0b      	ldr	r3, [pc, #44]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800564e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005652:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800565a:	4908      	ldr	r1, [pc, #32]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800565c:	4313      	orrs	r3, r2
 800565e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005666:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800566a:	d109      	bne.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800566c:	4b03      	ldr	r3, [pc, #12]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	4a02      	ldr	r2, [pc, #8]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005672:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005676:	60d3      	str	r3, [r2, #12]
 8005678:	e014      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800567a:	bf00      	nop
 800567c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005684:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005688:	d10c      	bne.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	3304      	adds	r3, #4
 800568e:	2101      	movs	r1, #1
 8005690:	4618      	mov	r0, r3
 8005692:	f000 f877 	bl	8005784 <RCCEx_PLLSAI1_Config>
 8005696:	4603      	mov	r3, r0
 8005698:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800569a:	7cfb      	ldrb	r3, [r7, #19]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d001      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80056a0:	7cfb      	ldrb	r3, [r7, #19]
 80056a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d02f      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056b0:	4b2b      	ldr	r3, [pc, #172]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056be:	4928      	ldr	r1, [pc, #160]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056ce:	d10d      	bne.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	3304      	adds	r3, #4
 80056d4:	2102      	movs	r1, #2
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 f854 	bl	8005784 <RCCEx_PLLSAI1_Config>
 80056dc:	4603      	mov	r3, r0
 80056de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056e0:	7cfb      	ldrb	r3, [r7, #19]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d014      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80056e6:	7cfb      	ldrb	r3, [r7, #19]
 80056e8:	74bb      	strb	r3, [r7, #18]
 80056ea:	e011      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056f4:	d10c      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	3320      	adds	r3, #32
 80056fa:	2102      	movs	r1, #2
 80056fc:	4618      	mov	r0, r3
 80056fe:	f000 f935 	bl	800596c <RCCEx_PLLSAI2_Config>
 8005702:	4603      	mov	r3, r0
 8005704:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005706:	7cfb      	ldrb	r3, [r7, #19]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800570c:	7cfb      	ldrb	r3, [r7, #19]
 800570e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00a      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800571c:	4b10      	ldr	r3, [pc, #64]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800571e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005722:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800572a:	490d      	ldr	r1, [pc, #52]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800572c:	4313      	orrs	r3, r2
 800572e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00b      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800573e:	4b08      	ldr	r3, [pc, #32]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005744:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800574e:	4904      	ldr	r1, [pc, #16]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005750:	4313      	orrs	r3, r2
 8005752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005756:	7cbb      	ldrb	r3, [r7, #18]
}
 8005758:	4618      	mov	r0, r3
 800575a:	3718      	adds	r7, #24
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	40021000 	.word	0x40021000

08005764 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005764:	b480      	push	{r7}
 8005766:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005768:	4b05      	ldr	r3, [pc, #20]	; (8005780 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a04      	ldr	r2, [pc, #16]	; (8005780 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800576e:	f043 0304 	orr.w	r3, r3, #4
 8005772:	6013      	str	r3, [r2, #0]
}
 8005774:	bf00      	nop
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	40021000 	.word	0x40021000

08005784 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800578e:	2300      	movs	r3, #0
 8005790:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005792:	4b75      	ldr	r3, [pc, #468]	; (8005968 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	f003 0303 	and.w	r3, r3, #3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d018      	beq.n	80057d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800579e:	4b72      	ldr	r3, [pc, #456]	; (8005968 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	f003 0203 	and.w	r2, r3, #3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d10d      	bne.n	80057ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
       ||
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d009      	beq.n	80057ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80057b6:	4b6c      	ldr	r3, [pc, #432]	; (8005968 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	091b      	lsrs	r3, r3, #4
 80057bc:	f003 0307 	and.w	r3, r3, #7
 80057c0:	1c5a      	adds	r2, r3, #1
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
       ||
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d047      	beq.n	800585a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	73fb      	strb	r3, [r7, #15]
 80057ce:	e044      	b.n	800585a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b03      	cmp	r3, #3
 80057d6:	d018      	beq.n	800580a <RCCEx_PLLSAI1_Config+0x86>
 80057d8:	2b03      	cmp	r3, #3
 80057da:	d825      	bhi.n	8005828 <RCCEx_PLLSAI1_Config+0xa4>
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d002      	beq.n	80057e6 <RCCEx_PLLSAI1_Config+0x62>
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d009      	beq.n	80057f8 <RCCEx_PLLSAI1_Config+0x74>
 80057e4:	e020      	b.n	8005828 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057e6:	4b60      	ldr	r3, [pc, #384]	; (8005968 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d11d      	bne.n	800582e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057f6:	e01a      	b.n	800582e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80057f8:	4b5b      	ldr	r3, [pc, #364]	; (8005968 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005800:	2b00      	cmp	r3, #0
 8005802:	d116      	bne.n	8005832 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005808:	e013      	b.n	8005832 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800580a:	4b57      	ldr	r3, [pc, #348]	; (8005968 <RCCEx_PLLSAI1_Config+0x1e4>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d10f      	bne.n	8005836 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005816:	4b54      	ldr	r3, [pc, #336]	; (8005968 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d109      	bne.n	8005836 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005826:	e006      	b.n	8005836 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	73fb      	strb	r3, [r7, #15]
      break;
 800582c:	e004      	b.n	8005838 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800582e:	bf00      	nop
 8005830:	e002      	b.n	8005838 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005832:	bf00      	nop
 8005834:	e000      	b.n	8005838 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005836:	bf00      	nop
    }

    if(status == HAL_OK)
 8005838:	7bfb      	ldrb	r3, [r7, #15]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10d      	bne.n	800585a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800583e:	4b4a      	ldr	r3, [pc, #296]	; (8005968 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6819      	ldr	r1, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	3b01      	subs	r3, #1
 8005850:	011b      	lsls	r3, r3, #4
 8005852:	430b      	orrs	r3, r1
 8005854:	4944      	ldr	r1, [pc, #272]	; (8005968 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005856:	4313      	orrs	r3, r2
 8005858:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800585a:	7bfb      	ldrb	r3, [r7, #15]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d17d      	bne.n	800595c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005860:	4b41      	ldr	r3, [pc, #260]	; (8005968 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a40      	ldr	r2, [pc, #256]	; (8005968 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005866:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800586a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800586c:	f7fc f95e 	bl	8001b2c <HAL_GetTick>
 8005870:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005872:	e009      	b.n	8005888 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005874:	f7fc f95a 	bl	8001b2c <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b02      	cmp	r3, #2
 8005880:	d902      	bls.n	8005888 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	73fb      	strb	r3, [r7, #15]
        break;
 8005886:	e005      	b.n	8005894 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005888:	4b37      	ldr	r3, [pc, #220]	; (8005968 <RCCEx_PLLSAI1_Config+0x1e4>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1ef      	bne.n	8005874 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005894:	7bfb      	ldrb	r3, [r7, #15]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d160      	bne.n	800595c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d111      	bne.n	80058c4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058a0:	4b31      	ldr	r3, [pc, #196]	; (8005968 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80058a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	6892      	ldr	r2, [r2, #8]
 80058b0:	0211      	lsls	r1, r2, #8
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	68d2      	ldr	r2, [r2, #12]
 80058b6:	0912      	lsrs	r2, r2, #4
 80058b8:	0452      	lsls	r2, r2, #17
 80058ba:	430a      	orrs	r2, r1
 80058bc:	492a      	ldr	r1, [pc, #168]	; (8005968 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	610b      	str	r3, [r1, #16]
 80058c2:	e027      	b.n	8005914 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d112      	bne.n	80058f0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058ca:	4b27      	ldr	r3, [pc, #156]	; (8005968 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80058d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	6892      	ldr	r2, [r2, #8]
 80058da:	0211      	lsls	r1, r2, #8
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	6912      	ldr	r2, [r2, #16]
 80058e0:	0852      	lsrs	r2, r2, #1
 80058e2:	3a01      	subs	r2, #1
 80058e4:	0552      	lsls	r2, r2, #21
 80058e6:	430a      	orrs	r2, r1
 80058e8:	491f      	ldr	r1, [pc, #124]	; (8005968 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	610b      	str	r3, [r1, #16]
 80058ee:	e011      	b.n	8005914 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058f0:	4b1d      	ldr	r3, [pc, #116]	; (8005968 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80058f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	6892      	ldr	r2, [r2, #8]
 8005900:	0211      	lsls	r1, r2, #8
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	6952      	ldr	r2, [r2, #20]
 8005906:	0852      	lsrs	r2, r2, #1
 8005908:	3a01      	subs	r2, #1
 800590a:	0652      	lsls	r2, r2, #25
 800590c:	430a      	orrs	r2, r1
 800590e:	4916      	ldr	r1, [pc, #88]	; (8005968 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005910:	4313      	orrs	r3, r2
 8005912:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005914:	4b14      	ldr	r3, [pc, #80]	; (8005968 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a13      	ldr	r2, [pc, #76]	; (8005968 <RCCEx_PLLSAI1_Config+0x1e4>)
 800591a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800591e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005920:	f7fc f904 	bl	8001b2c <HAL_GetTick>
 8005924:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005926:	e009      	b.n	800593c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005928:	f7fc f900 	bl	8001b2c <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	2b02      	cmp	r3, #2
 8005934:	d902      	bls.n	800593c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	73fb      	strb	r3, [r7, #15]
          break;
 800593a:	e005      	b.n	8005948 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800593c:	4b0a      	ldr	r3, [pc, #40]	; (8005968 <RCCEx_PLLSAI1_Config+0x1e4>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d0ef      	beq.n	8005928 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005948:	7bfb      	ldrb	r3, [r7, #15]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d106      	bne.n	800595c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800594e:	4b06      	ldr	r3, [pc, #24]	; (8005968 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005950:	691a      	ldr	r2, [r3, #16]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	4904      	ldr	r1, [pc, #16]	; (8005968 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005958:	4313      	orrs	r3, r2
 800595a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800595c:	7bfb      	ldrb	r3, [r7, #15]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	40021000 	.word	0x40021000

0800596c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005976:	2300      	movs	r3, #0
 8005978:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800597a:	4b6a      	ldr	r3, [pc, #424]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	f003 0303 	and.w	r3, r3, #3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d018      	beq.n	80059b8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005986:	4b67      	ldr	r3, [pc, #412]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	f003 0203 	and.w	r2, r3, #3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	429a      	cmp	r2, r3
 8005994:	d10d      	bne.n	80059b2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
       ||
 800599a:	2b00      	cmp	r3, #0
 800599c:	d009      	beq.n	80059b2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800599e:	4b61      	ldr	r3, [pc, #388]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	091b      	lsrs	r3, r3, #4
 80059a4:	f003 0307 	and.w	r3, r3, #7
 80059a8:	1c5a      	adds	r2, r3, #1
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
       ||
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d047      	beq.n	8005a42 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	73fb      	strb	r3, [r7, #15]
 80059b6:	e044      	b.n	8005a42 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2b03      	cmp	r3, #3
 80059be:	d018      	beq.n	80059f2 <RCCEx_PLLSAI2_Config+0x86>
 80059c0:	2b03      	cmp	r3, #3
 80059c2:	d825      	bhi.n	8005a10 <RCCEx_PLLSAI2_Config+0xa4>
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d002      	beq.n	80059ce <RCCEx_PLLSAI2_Config+0x62>
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d009      	beq.n	80059e0 <RCCEx_PLLSAI2_Config+0x74>
 80059cc:	e020      	b.n	8005a10 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80059ce:	4b55      	ldr	r3, [pc, #340]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0302 	and.w	r3, r3, #2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d11d      	bne.n	8005a16 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059de:	e01a      	b.n	8005a16 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80059e0:	4b50      	ldr	r3, [pc, #320]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d116      	bne.n	8005a1a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059f0:	e013      	b.n	8005a1a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80059f2:	4b4c      	ldr	r3, [pc, #304]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10f      	bne.n	8005a1e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80059fe:	4b49      	ldr	r3, [pc, #292]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d109      	bne.n	8005a1e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a0e:	e006      	b.n	8005a1e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	73fb      	strb	r3, [r7, #15]
      break;
 8005a14:	e004      	b.n	8005a20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005a16:	bf00      	nop
 8005a18:	e002      	b.n	8005a20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005a1a:	bf00      	nop
 8005a1c:	e000      	b.n	8005a20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005a1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a20:	7bfb      	ldrb	r3, [r7, #15]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10d      	bne.n	8005a42 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005a26:	4b3f      	ldr	r3, [pc, #252]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6819      	ldr	r1, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	3b01      	subs	r3, #1
 8005a38:	011b      	lsls	r3, r3, #4
 8005a3a:	430b      	orrs	r3, r1
 8005a3c:	4939      	ldr	r1, [pc, #228]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005a42:	7bfb      	ldrb	r3, [r7, #15]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d167      	bne.n	8005b18 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005a48:	4b36      	ldr	r3, [pc, #216]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a35      	ldr	r2, [pc, #212]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a54:	f7fc f86a 	bl	8001b2c <HAL_GetTick>
 8005a58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a5a:	e009      	b.n	8005a70 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a5c:	f7fc f866 	bl	8001b2c <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d902      	bls.n	8005a70 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	73fb      	strb	r3, [r7, #15]
        break;
 8005a6e:	e005      	b.n	8005a7c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a70:	4b2c      	ldr	r3, [pc, #176]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1ef      	bne.n	8005a5c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005a7c:	7bfb      	ldrb	r3, [r7, #15]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d14a      	bne.n	8005b18 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d111      	bne.n	8005aac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a88:	4b26      	ldr	r3, [pc, #152]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005a90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	6892      	ldr	r2, [r2, #8]
 8005a98:	0211      	lsls	r1, r2, #8
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	68d2      	ldr	r2, [r2, #12]
 8005a9e:	0912      	lsrs	r2, r2, #4
 8005aa0:	0452      	lsls	r2, r2, #17
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	491f      	ldr	r1, [pc, #124]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	614b      	str	r3, [r1, #20]
 8005aaa:	e011      	b.n	8005ad0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005aac:	4b1d      	ldr	r3, [pc, #116]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005ab4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	6892      	ldr	r2, [r2, #8]
 8005abc:	0211      	lsls	r1, r2, #8
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	6912      	ldr	r2, [r2, #16]
 8005ac2:	0852      	lsrs	r2, r2, #1
 8005ac4:	3a01      	subs	r2, #1
 8005ac6:	0652      	lsls	r2, r2, #25
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	4916      	ldr	r1, [pc, #88]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005ad0:	4b14      	ldr	r3, [pc, #80]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a13      	ldr	r2, [pc, #76]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ada:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005adc:	f7fc f826 	bl	8001b2c <HAL_GetTick>
 8005ae0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ae2:	e009      	b.n	8005af8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ae4:	f7fc f822 	bl	8001b2c <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d902      	bls.n	8005af8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	73fb      	strb	r3, [r7, #15]
          break;
 8005af6:	e005      	b.n	8005b04 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005af8:	4b0a      	ldr	r3, [pc, #40]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d0ef      	beq.n	8005ae4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005b04:	7bfb      	ldrb	r3, [r7, #15]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d106      	bne.n	8005b18 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005b0a:	4b06      	ldr	r3, [pc, #24]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b0c:	695a      	ldr	r2, [r3, #20]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	4904      	ldr	r1, [pc, #16]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	40021000 	.word	0x40021000

08005b28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d101      	bne.n	8005b3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e095      	b.n	8005c66 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d108      	bne.n	8005b54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b4a:	d009      	beq.n	8005b60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	61da      	str	r2, [r3, #28]
 8005b52:	e005      	b.n	8005b60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d106      	bne.n	8005b80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7fb fd48 	bl	8001610 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2202      	movs	r2, #2
 8005b84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b96:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ba0:	d902      	bls.n	8005ba8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	60fb      	str	r3, [r7, #12]
 8005ba6:	e002      	b.n	8005bae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005bb6:	d007      	beq.n	8005bc8 <HAL_SPI_Init+0xa0>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bc0:	d002      	beq.n	8005bc8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005bd8:	431a      	orrs	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	f003 0302 	and.w	r3, r3, #2
 8005be2:	431a      	orrs	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	431a      	orrs	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bf6:	431a      	orrs	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	69db      	ldr	r3, [r3, #28]
 8005bfc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c00:	431a      	orrs	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a1b      	ldr	r3, [r3, #32]
 8005c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c0a:	ea42 0103 	orr.w	r1, r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c12:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	0c1b      	lsrs	r3, r3, #16
 8005c24:	f003 0204 	and.w	r2, r3, #4
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2c:	f003 0310 	and.w	r3, r3, #16
 8005c30:	431a      	orrs	r2, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c36:	f003 0308 	and.w	r3, r3, #8
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005c44:	ea42 0103 	orr.w	r1, r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	430a      	orrs	r2, r1
 8005c54:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b082      	sub	sp, #8
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d101      	bne.n	8005c80 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e040      	b.n	8005d02 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d106      	bne.n	8005c96 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f7fb fd01 	bl	8001698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2224      	movs	r2, #36	; 0x24
 8005c9a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f022 0201 	bic.w	r2, r2, #1
 8005caa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d002      	beq.n	8005cba <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 fae1 	bl	800627c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f826 	bl	8005d0c <UART_SetConfig>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d101      	bne.n	8005cca <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e01b      	b.n	8005d02 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	685a      	ldr	r2, [r3, #4]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cd8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ce8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f042 0201 	orr.w	r2, r2, #1
 8005cf8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 fb60 	bl	80063c0 <UART_CheckIdleState>
 8005d00:	4603      	mov	r3, r0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3708      	adds	r7, #8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
	...

08005d0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d10:	b08a      	sub	sp, #40	; 0x28
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	689a      	ldr	r2, [r3, #8]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	431a      	orrs	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	69db      	ldr	r3, [r3, #28]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	4ba4      	ldr	r3, [pc, #656]	; (8005fcc <UART_SetConfig+0x2c0>)
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	6812      	ldr	r2, [r2, #0]
 8005d42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d44:	430b      	orrs	r3, r1
 8005d46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	68da      	ldr	r2, [r3, #12]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a99      	ldr	r2, [pc, #612]	; (8005fd0 <UART_SetConfig+0x2c4>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d004      	beq.n	8005d78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d74:	4313      	orrs	r3, r2
 8005d76:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a90      	ldr	r2, [pc, #576]	; (8005fd4 <UART_SetConfig+0x2c8>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d126      	bne.n	8005de4 <UART_SetConfig+0xd8>
 8005d96:	4b90      	ldr	r3, [pc, #576]	; (8005fd8 <UART_SetConfig+0x2cc>)
 8005d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d9c:	f003 0303 	and.w	r3, r3, #3
 8005da0:	2b03      	cmp	r3, #3
 8005da2:	d81b      	bhi.n	8005ddc <UART_SetConfig+0xd0>
 8005da4:	a201      	add	r2, pc, #4	; (adr r2, 8005dac <UART_SetConfig+0xa0>)
 8005da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005daa:	bf00      	nop
 8005dac:	08005dbd 	.word	0x08005dbd
 8005db0:	08005dcd 	.word	0x08005dcd
 8005db4:	08005dc5 	.word	0x08005dc5
 8005db8:	08005dd5 	.word	0x08005dd5
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dc2:	e116      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dca:	e112      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005dcc:	2304      	movs	r3, #4
 8005dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dd2:	e10e      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005dd4:	2308      	movs	r3, #8
 8005dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dda:	e10a      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005ddc:	2310      	movs	r3, #16
 8005dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005de2:	e106      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a7c      	ldr	r2, [pc, #496]	; (8005fdc <UART_SetConfig+0x2d0>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d138      	bne.n	8005e60 <UART_SetConfig+0x154>
 8005dee:	4b7a      	ldr	r3, [pc, #488]	; (8005fd8 <UART_SetConfig+0x2cc>)
 8005df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df4:	f003 030c 	and.w	r3, r3, #12
 8005df8:	2b0c      	cmp	r3, #12
 8005dfa:	d82d      	bhi.n	8005e58 <UART_SetConfig+0x14c>
 8005dfc:	a201      	add	r2, pc, #4	; (adr r2, 8005e04 <UART_SetConfig+0xf8>)
 8005dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e02:	bf00      	nop
 8005e04:	08005e39 	.word	0x08005e39
 8005e08:	08005e59 	.word	0x08005e59
 8005e0c:	08005e59 	.word	0x08005e59
 8005e10:	08005e59 	.word	0x08005e59
 8005e14:	08005e49 	.word	0x08005e49
 8005e18:	08005e59 	.word	0x08005e59
 8005e1c:	08005e59 	.word	0x08005e59
 8005e20:	08005e59 	.word	0x08005e59
 8005e24:	08005e41 	.word	0x08005e41
 8005e28:	08005e59 	.word	0x08005e59
 8005e2c:	08005e59 	.word	0x08005e59
 8005e30:	08005e59 	.word	0x08005e59
 8005e34:	08005e51 	.word	0x08005e51
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e3e:	e0d8      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005e40:	2302      	movs	r3, #2
 8005e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e46:	e0d4      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005e48:	2304      	movs	r3, #4
 8005e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e4e:	e0d0      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005e50:	2308      	movs	r3, #8
 8005e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e56:	e0cc      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005e58:	2310      	movs	r3, #16
 8005e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e5e:	e0c8      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a5e      	ldr	r2, [pc, #376]	; (8005fe0 <UART_SetConfig+0x2d4>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d125      	bne.n	8005eb6 <UART_SetConfig+0x1aa>
 8005e6a:	4b5b      	ldr	r3, [pc, #364]	; (8005fd8 <UART_SetConfig+0x2cc>)
 8005e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e70:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e74:	2b30      	cmp	r3, #48	; 0x30
 8005e76:	d016      	beq.n	8005ea6 <UART_SetConfig+0x19a>
 8005e78:	2b30      	cmp	r3, #48	; 0x30
 8005e7a:	d818      	bhi.n	8005eae <UART_SetConfig+0x1a2>
 8005e7c:	2b20      	cmp	r3, #32
 8005e7e:	d00a      	beq.n	8005e96 <UART_SetConfig+0x18a>
 8005e80:	2b20      	cmp	r3, #32
 8005e82:	d814      	bhi.n	8005eae <UART_SetConfig+0x1a2>
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d002      	beq.n	8005e8e <UART_SetConfig+0x182>
 8005e88:	2b10      	cmp	r3, #16
 8005e8a:	d008      	beq.n	8005e9e <UART_SetConfig+0x192>
 8005e8c:	e00f      	b.n	8005eae <UART_SetConfig+0x1a2>
 8005e8e:	2300      	movs	r3, #0
 8005e90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e94:	e0ad      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005e96:	2302      	movs	r3, #2
 8005e98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e9c:	e0a9      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005e9e:	2304      	movs	r3, #4
 8005ea0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ea4:	e0a5      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005ea6:	2308      	movs	r3, #8
 8005ea8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eac:	e0a1      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005eae:	2310      	movs	r3, #16
 8005eb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eb4:	e09d      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a4a      	ldr	r2, [pc, #296]	; (8005fe4 <UART_SetConfig+0x2d8>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d125      	bne.n	8005f0c <UART_SetConfig+0x200>
 8005ec0:	4b45      	ldr	r3, [pc, #276]	; (8005fd8 <UART_SetConfig+0x2cc>)
 8005ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ec6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005eca:	2bc0      	cmp	r3, #192	; 0xc0
 8005ecc:	d016      	beq.n	8005efc <UART_SetConfig+0x1f0>
 8005ece:	2bc0      	cmp	r3, #192	; 0xc0
 8005ed0:	d818      	bhi.n	8005f04 <UART_SetConfig+0x1f8>
 8005ed2:	2b80      	cmp	r3, #128	; 0x80
 8005ed4:	d00a      	beq.n	8005eec <UART_SetConfig+0x1e0>
 8005ed6:	2b80      	cmp	r3, #128	; 0x80
 8005ed8:	d814      	bhi.n	8005f04 <UART_SetConfig+0x1f8>
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d002      	beq.n	8005ee4 <UART_SetConfig+0x1d8>
 8005ede:	2b40      	cmp	r3, #64	; 0x40
 8005ee0:	d008      	beq.n	8005ef4 <UART_SetConfig+0x1e8>
 8005ee2:	e00f      	b.n	8005f04 <UART_SetConfig+0x1f8>
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eea:	e082      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005eec:	2302      	movs	r3, #2
 8005eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ef2:	e07e      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005ef4:	2304      	movs	r3, #4
 8005ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005efa:	e07a      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005efc:	2308      	movs	r3, #8
 8005efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f02:	e076      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005f04:	2310      	movs	r3, #16
 8005f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f0a:	e072      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a35      	ldr	r2, [pc, #212]	; (8005fe8 <UART_SetConfig+0x2dc>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d12a      	bne.n	8005f6c <UART_SetConfig+0x260>
 8005f16:	4b30      	ldr	r3, [pc, #192]	; (8005fd8 <UART_SetConfig+0x2cc>)
 8005f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f24:	d01a      	beq.n	8005f5c <UART_SetConfig+0x250>
 8005f26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f2a:	d81b      	bhi.n	8005f64 <UART_SetConfig+0x258>
 8005f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f30:	d00c      	beq.n	8005f4c <UART_SetConfig+0x240>
 8005f32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f36:	d815      	bhi.n	8005f64 <UART_SetConfig+0x258>
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d003      	beq.n	8005f44 <UART_SetConfig+0x238>
 8005f3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f40:	d008      	beq.n	8005f54 <UART_SetConfig+0x248>
 8005f42:	e00f      	b.n	8005f64 <UART_SetConfig+0x258>
 8005f44:	2300      	movs	r3, #0
 8005f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f4a:	e052      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f52:	e04e      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005f54:	2304      	movs	r3, #4
 8005f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f5a:	e04a      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005f5c:	2308      	movs	r3, #8
 8005f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f62:	e046      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005f64:	2310      	movs	r3, #16
 8005f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f6a:	e042      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a17      	ldr	r2, [pc, #92]	; (8005fd0 <UART_SetConfig+0x2c4>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d13a      	bne.n	8005fec <UART_SetConfig+0x2e0>
 8005f76:	4b18      	ldr	r3, [pc, #96]	; (8005fd8 <UART_SetConfig+0x2cc>)
 8005f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f84:	d01a      	beq.n	8005fbc <UART_SetConfig+0x2b0>
 8005f86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f8a:	d81b      	bhi.n	8005fc4 <UART_SetConfig+0x2b8>
 8005f8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f90:	d00c      	beq.n	8005fac <UART_SetConfig+0x2a0>
 8005f92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f96:	d815      	bhi.n	8005fc4 <UART_SetConfig+0x2b8>
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d003      	beq.n	8005fa4 <UART_SetConfig+0x298>
 8005f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fa0:	d008      	beq.n	8005fb4 <UART_SetConfig+0x2a8>
 8005fa2:	e00f      	b.n	8005fc4 <UART_SetConfig+0x2b8>
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005faa:	e022      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005fac:	2302      	movs	r3, #2
 8005fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fb2:	e01e      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005fb4:	2304      	movs	r3, #4
 8005fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fba:	e01a      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005fbc:	2308      	movs	r3, #8
 8005fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fc2:	e016      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005fc4:	2310      	movs	r3, #16
 8005fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fca:	e012      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005fcc:	efff69f3 	.word	0xefff69f3
 8005fd0:	40008000 	.word	0x40008000
 8005fd4:	40013800 	.word	0x40013800
 8005fd8:	40021000 	.word	0x40021000
 8005fdc:	40004400 	.word	0x40004400
 8005fe0:	40004800 	.word	0x40004800
 8005fe4:	40004c00 	.word	0x40004c00
 8005fe8:	40005000 	.word	0x40005000
 8005fec:	2310      	movs	r3, #16
 8005fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a9f      	ldr	r2, [pc, #636]	; (8006274 <UART_SetConfig+0x568>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d17a      	bne.n	80060f2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ffc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006000:	2b08      	cmp	r3, #8
 8006002:	d824      	bhi.n	800604e <UART_SetConfig+0x342>
 8006004:	a201      	add	r2, pc, #4	; (adr r2, 800600c <UART_SetConfig+0x300>)
 8006006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600a:	bf00      	nop
 800600c:	08006031 	.word	0x08006031
 8006010:	0800604f 	.word	0x0800604f
 8006014:	08006039 	.word	0x08006039
 8006018:	0800604f 	.word	0x0800604f
 800601c:	0800603f 	.word	0x0800603f
 8006020:	0800604f 	.word	0x0800604f
 8006024:	0800604f 	.word	0x0800604f
 8006028:	0800604f 	.word	0x0800604f
 800602c:	08006047 	.word	0x08006047
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006030:	f7ff f822 	bl	8005078 <HAL_RCC_GetPCLK1Freq>
 8006034:	61f8      	str	r0, [r7, #28]
        break;
 8006036:	e010      	b.n	800605a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006038:	4b8f      	ldr	r3, [pc, #572]	; (8006278 <UART_SetConfig+0x56c>)
 800603a:	61fb      	str	r3, [r7, #28]
        break;
 800603c:	e00d      	b.n	800605a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800603e:	f7fe ff83 	bl	8004f48 <HAL_RCC_GetSysClockFreq>
 8006042:	61f8      	str	r0, [r7, #28]
        break;
 8006044:	e009      	b.n	800605a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800604a:	61fb      	str	r3, [r7, #28]
        break;
 800604c:	e005      	b.n	800605a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800604e:	2300      	movs	r3, #0
 8006050:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006058:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	2b00      	cmp	r3, #0
 800605e:	f000 80fb 	beq.w	8006258 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	685a      	ldr	r2, [r3, #4]
 8006066:	4613      	mov	r3, r2
 8006068:	005b      	lsls	r3, r3, #1
 800606a:	4413      	add	r3, r2
 800606c:	69fa      	ldr	r2, [r7, #28]
 800606e:	429a      	cmp	r2, r3
 8006070:	d305      	bcc.n	800607e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006078:	69fa      	ldr	r2, [r7, #28]
 800607a:	429a      	cmp	r2, r3
 800607c:	d903      	bls.n	8006086 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006084:	e0e8      	b.n	8006258 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	2200      	movs	r2, #0
 800608a:	461c      	mov	r4, r3
 800608c:	4615      	mov	r5, r2
 800608e:	f04f 0200 	mov.w	r2, #0
 8006092:	f04f 0300 	mov.w	r3, #0
 8006096:	022b      	lsls	r3, r5, #8
 8006098:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800609c:	0222      	lsls	r2, r4, #8
 800609e:	68f9      	ldr	r1, [r7, #12]
 80060a0:	6849      	ldr	r1, [r1, #4]
 80060a2:	0849      	lsrs	r1, r1, #1
 80060a4:	2000      	movs	r0, #0
 80060a6:	4688      	mov	r8, r1
 80060a8:	4681      	mov	r9, r0
 80060aa:	eb12 0a08 	adds.w	sl, r2, r8
 80060ae:	eb43 0b09 	adc.w	fp, r3, r9
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	603b      	str	r3, [r7, #0]
 80060ba:	607a      	str	r2, [r7, #4]
 80060bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060c0:	4650      	mov	r0, sl
 80060c2:	4659      	mov	r1, fp
 80060c4:	f7fa fbe2 	bl	800088c <__aeabi_uldivmod>
 80060c8:	4602      	mov	r2, r0
 80060ca:	460b      	mov	r3, r1
 80060cc:	4613      	mov	r3, r2
 80060ce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060d6:	d308      	bcc.n	80060ea <UART_SetConfig+0x3de>
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060de:	d204      	bcs.n	80060ea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	60da      	str	r2, [r3, #12]
 80060e8:	e0b6      	b.n	8006258 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80060f0:	e0b2      	b.n	8006258 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	69db      	ldr	r3, [r3, #28]
 80060f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060fa:	d15e      	bne.n	80061ba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80060fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006100:	2b08      	cmp	r3, #8
 8006102:	d828      	bhi.n	8006156 <UART_SetConfig+0x44a>
 8006104:	a201      	add	r2, pc, #4	; (adr r2, 800610c <UART_SetConfig+0x400>)
 8006106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800610a:	bf00      	nop
 800610c:	08006131 	.word	0x08006131
 8006110:	08006139 	.word	0x08006139
 8006114:	08006141 	.word	0x08006141
 8006118:	08006157 	.word	0x08006157
 800611c:	08006147 	.word	0x08006147
 8006120:	08006157 	.word	0x08006157
 8006124:	08006157 	.word	0x08006157
 8006128:	08006157 	.word	0x08006157
 800612c:	0800614f 	.word	0x0800614f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006130:	f7fe ffa2 	bl	8005078 <HAL_RCC_GetPCLK1Freq>
 8006134:	61f8      	str	r0, [r7, #28]
        break;
 8006136:	e014      	b.n	8006162 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006138:	f7fe ffb4 	bl	80050a4 <HAL_RCC_GetPCLK2Freq>
 800613c:	61f8      	str	r0, [r7, #28]
        break;
 800613e:	e010      	b.n	8006162 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006140:	4b4d      	ldr	r3, [pc, #308]	; (8006278 <UART_SetConfig+0x56c>)
 8006142:	61fb      	str	r3, [r7, #28]
        break;
 8006144:	e00d      	b.n	8006162 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006146:	f7fe feff 	bl	8004f48 <HAL_RCC_GetSysClockFreq>
 800614a:	61f8      	str	r0, [r7, #28]
        break;
 800614c:	e009      	b.n	8006162 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800614e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006152:	61fb      	str	r3, [r7, #28]
        break;
 8006154:	e005      	b.n	8006162 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006156:	2300      	movs	r3, #0
 8006158:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006160:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d077      	beq.n	8006258 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	005a      	lsls	r2, r3, #1
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	085b      	lsrs	r3, r3, #1
 8006172:	441a      	add	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	fbb2 f3f3 	udiv	r3, r2, r3
 800617c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	2b0f      	cmp	r3, #15
 8006182:	d916      	bls.n	80061b2 <UART_SetConfig+0x4a6>
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800618a:	d212      	bcs.n	80061b2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	b29b      	uxth	r3, r3
 8006190:	f023 030f 	bic.w	r3, r3, #15
 8006194:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	085b      	lsrs	r3, r3, #1
 800619a:	b29b      	uxth	r3, r3
 800619c:	f003 0307 	and.w	r3, r3, #7
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	8afb      	ldrh	r3, [r7, #22]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	8afa      	ldrh	r2, [r7, #22]
 80061ae:	60da      	str	r2, [r3, #12]
 80061b0:	e052      	b.n	8006258 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80061b8:	e04e      	b.n	8006258 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061be:	2b08      	cmp	r3, #8
 80061c0:	d827      	bhi.n	8006212 <UART_SetConfig+0x506>
 80061c2:	a201      	add	r2, pc, #4	; (adr r2, 80061c8 <UART_SetConfig+0x4bc>)
 80061c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c8:	080061ed 	.word	0x080061ed
 80061cc:	080061f5 	.word	0x080061f5
 80061d0:	080061fd 	.word	0x080061fd
 80061d4:	08006213 	.word	0x08006213
 80061d8:	08006203 	.word	0x08006203
 80061dc:	08006213 	.word	0x08006213
 80061e0:	08006213 	.word	0x08006213
 80061e4:	08006213 	.word	0x08006213
 80061e8:	0800620b 	.word	0x0800620b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061ec:	f7fe ff44 	bl	8005078 <HAL_RCC_GetPCLK1Freq>
 80061f0:	61f8      	str	r0, [r7, #28]
        break;
 80061f2:	e014      	b.n	800621e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061f4:	f7fe ff56 	bl	80050a4 <HAL_RCC_GetPCLK2Freq>
 80061f8:	61f8      	str	r0, [r7, #28]
        break;
 80061fa:	e010      	b.n	800621e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061fc:	4b1e      	ldr	r3, [pc, #120]	; (8006278 <UART_SetConfig+0x56c>)
 80061fe:	61fb      	str	r3, [r7, #28]
        break;
 8006200:	e00d      	b.n	800621e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006202:	f7fe fea1 	bl	8004f48 <HAL_RCC_GetSysClockFreq>
 8006206:	61f8      	str	r0, [r7, #28]
        break;
 8006208:	e009      	b.n	800621e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800620a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800620e:	61fb      	str	r3, [r7, #28]
        break;
 8006210:	e005      	b.n	800621e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006212:	2300      	movs	r3, #0
 8006214:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800621c:	bf00      	nop
    }

    if (pclk != 0U)
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d019      	beq.n	8006258 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	085a      	lsrs	r2, r3, #1
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	441a      	add	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	fbb2 f3f3 	udiv	r3, r2, r3
 8006236:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	2b0f      	cmp	r3, #15
 800623c:	d909      	bls.n	8006252 <UART_SetConfig+0x546>
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006244:	d205      	bcs.n	8006252 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	b29a      	uxth	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	60da      	str	r2, [r3, #12]
 8006250:	e002      	b.n	8006258 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006264:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006268:	4618      	mov	r0, r3
 800626a:	3728      	adds	r7, #40	; 0x28
 800626c:	46bd      	mov	sp, r7
 800626e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006272:	bf00      	nop
 8006274:	40008000 	.word	0x40008000
 8006278:	00f42400 	.word	0x00f42400

0800627c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006288:	f003 0308 	and.w	r3, r3, #8
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00a      	beq.n	80062a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	430a      	orrs	r2, r1
 80062a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00a      	beq.n	80062c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	430a      	orrs	r2, r1
 80062c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062cc:	f003 0302 	and.w	r3, r3, #2
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00a      	beq.n	80062ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	430a      	orrs	r2, r1
 80062e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ee:	f003 0304 	and.w	r3, r3, #4
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00a      	beq.n	800630c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	430a      	orrs	r2, r1
 800630a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006310:	f003 0310 	and.w	r3, r3, #16
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00a      	beq.n	800632e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	430a      	orrs	r2, r1
 800632c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006332:	f003 0320 	and.w	r3, r3, #32
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00a      	beq.n	8006350 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	430a      	orrs	r2, r1
 800634e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006358:	2b00      	cmp	r3, #0
 800635a:	d01a      	beq.n	8006392 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	430a      	orrs	r2, r1
 8006370:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006376:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800637a:	d10a      	bne.n	8006392 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	430a      	orrs	r2, r1
 8006390:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00a      	beq.n	80063b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	430a      	orrs	r2, r1
 80063b2:	605a      	str	r2, [r3, #4]
  }
}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b098      	sub	sp, #96	; 0x60
 80063c4:	af02      	add	r7, sp, #8
 80063c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063d0:	f7fb fbac 	bl	8001b2c <HAL_GetTick>
 80063d4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0308 	and.w	r3, r3, #8
 80063e0:	2b08      	cmp	r3, #8
 80063e2:	d12e      	bne.n	8006442 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063e8:	9300      	str	r3, [sp, #0]
 80063ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063ec:	2200      	movs	r2, #0
 80063ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f88c 	bl	8006510 <UART_WaitOnFlagUntilTimeout>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d021      	beq.n	8006442 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006406:	e853 3f00 	ldrex	r3, [r3]
 800640a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800640c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800640e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006412:	653b      	str	r3, [r7, #80]	; 0x50
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	461a      	mov	r2, r3
 800641a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800641c:	647b      	str	r3, [r7, #68]	; 0x44
 800641e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006420:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006422:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006424:	e841 2300 	strex	r3, r2, [r1]
 8006428:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800642a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1e6      	bne.n	80063fe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2220      	movs	r2, #32
 8006434:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e062      	b.n	8006508 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0304 	and.w	r3, r3, #4
 800644c:	2b04      	cmp	r3, #4
 800644e:	d149      	bne.n	80064e4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006450:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006454:	9300      	str	r3, [sp, #0]
 8006456:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006458:	2200      	movs	r2, #0
 800645a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f856 	bl	8006510 <UART_WaitOnFlagUntilTimeout>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d03c      	beq.n	80064e4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	e853 3f00 	ldrex	r3, [r3]
 8006476:	623b      	str	r3, [r7, #32]
   return(result);
 8006478:	6a3b      	ldr	r3, [r7, #32]
 800647a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800647e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	461a      	mov	r2, r3
 8006486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006488:	633b      	str	r3, [r7, #48]	; 0x30
 800648a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800648e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006490:	e841 2300 	strex	r3, r2, [r1]
 8006494:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006498:	2b00      	cmp	r3, #0
 800649a:	d1e6      	bne.n	800646a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	3308      	adds	r3, #8
 80064a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	e853 3f00 	ldrex	r3, [r3]
 80064aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f023 0301 	bic.w	r3, r3, #1
 80064b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	3308      	adds	r3, #8
 80064ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064bc:	61fa      	str	r2, [r7, #28]
 80064be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c0:	69b9      	ldr	r1, [r7, #24]
 80064c2:	69fa      	ldr	r2, [r7, #28]
 80064c4:	e841 2300 	strex	r3, r2, [r1]
 80064c8:	617b      	str	r3, [r7, #20]
   return(result);
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1e5      	bne.n	800649c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2220      	movs	r2, #32
 80064d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e011      	b.n	8006508 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2220      	movs	r2, #32
 80064e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2220      	movs	r2, #32
 80064ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3758      	adds	r7, #88	; 0x58
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	603b      	str	r3, [r7, #0]
 800651c:	4613      	mov	r3, r2
 800651e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006520:	e049      	b.n	80065b6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006528:	d045      	beq.n	80065b6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800652a:	f7fb faff 	bl	8001b2c <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	69ba      	ldr	r2, [r7, #24]
 8006536:	429a      	cmp	r2, r3
 8006538:	d302      	bcc.n	8006540 <UART_WaitOnFlagUntilTimeout+0x30>
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d101      	bne.n	8006544 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e048      	b.n	80065d6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0304 	and.w	r3, r3, #4
 800654e:	2b00      	cmp	r3, #0
 8006550:	d031      	beq.n	80065b6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	69db      	ldr	r3, [r3, #28]
 8006558:	f003 0308 	and.w	r3, r3, #8
 800655c:	2b08      	cmp	r3, #8
 800655e:	d110      	bne.n	8006582 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2208      	movs	r2, #8
 8006566:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f000 f838 	bl	80065de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2208      	movs	r2, #8
 8006572:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e029      	b.n	80065d6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	69db      	ldr	r3, [r3, #28]
 8006588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800658c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006590:	d111      	bne.n	80065b6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800659a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f000 f81e 	bl	80065de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2220      	movs	r2, #32
 80065a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e00f      	b.n	80065d6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	69da      	ldr	r2, [r3, #28]
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	4013      	ands	r3, r2
 80065c0:	68ba      	ldr	r2, [r7, #8]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	bf0c      	ite	eq
 80065c6:	2301      	moveq	r3, #1
 80065c8:	2300      	movne	r3, #0
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	461a      	mov	r2, r3
 80065ce:	79fb      	ldrb	r3, [r7, #7]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d0a6      	beq.n	8006522 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065de:	b480      	push	{r7}
 80065e0:	b095      	sub	sp, #84	; 0x54
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ee:	e853 3f00 	ldrex	r3, [r3]
 80065f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80065f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	461a      	mov	r2, r3
 8006602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006604:	643b      	str	r3, [r7, #64]	; 0x40
 8006606:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006608:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800660a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800660c:	e841 2300 	strex	r3, r2, [r1]
 8006610:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1e6      	bne.n	80065e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	3308      	adds	r3, #8
 800661e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006620:	6a3b      	ldr	r3, [r7, #32]
 8006622:	e853 3f00 	ldrex	r3, [r3]
 8006626:	61fb      	str	r3, [r7, #28]
   return(result);
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	f023 0301 	bic.w	r3, r3, #1
 800662e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	3308      	adds	r3, #8
 8006636:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006638:	62fa      	str	r2, [r7, #44]	; 0x2c
 800663a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800663e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006640:	e841 2300 	strex	r3, r2, [r1]
 8006644:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1e5      	bne.n	8006618 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006650:	2b01      	cmp	r3, #1
 8006652:	d118      	bne.n	8006686 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	e853 3f00 	ldrex	r3, [r3]
 8006660:	60bb      	str	r3, [r7, #8]
   return(result);
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	f023 0310 	bic.w	r3, r3, #16
 8006668:	647b      	str	r3, [r7, #68]	; 0x44
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	461a      	mov	r2, r3
 8006670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006672:	61bb      	str	r3, [r7, #24]
 8006674:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006676:	6979      	ldr	r1, [r7, #20]
 8006678:	69ba      	ldr	r2, [r7, #24]
 800667a:	e841 2300 	strex	r3, r2, [r1]
 800667e:	613b      	str	r3, [r7, #16]
   return(result);
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1e6      	bne.n	8006654 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2220      	movs	r2, #32
 800668a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	669a      	str	r2, [r3, #104]	; 0x68
}
 800669a:	bf00      	nop
 800669c:	3754      	adds	r7, #84	; 0x54
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066a6:	b084      	sub	sp, #16
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	f107 001c 	add.w	r0, r7, #28
 80066b4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f001 fa1d 	bl	8007b04 <USB_CoreReset>
 80066ca:	4603      	mov	r3, r0
 80066cc:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80066ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d106      	bne.n	80066e2 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	639a      	str	r2, [r3, #56]	; 0x38
 80066e0:	e005      	b.n	80066ee <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80066ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066fa:	b004      	add	sp, #16
 80066fc:	4770      	bx	lr
	...

08006700 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006700:	b480      	push	{r7}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	4613      	mov	r3, r2
 800670c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800670e:	79fb      	ldrb	r3, [r7, #7]
 8006710:	2b02      	cmp	r3, #2
 8006712:	d165      	bne.n	80067e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	4a3e      	ldr	r2, [pc, #248]	; (8006810 <USB_SetTurnaroundTime+0x110>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d906      	bls.n	800672a <USB_SetTurnaroundTime+0x2a>
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	4a3d      	ldr	r2, [pc, #244]	; (8006814 <USB_SetTurnaroundTime+0x114>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d202      	bcs.n	800672a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006724:	230f      	movs	r3, #15
 8006726:	617b      	str	r3, [r7, #20]
 8006728:	e05c      	b.n	80067e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	4a39      	ldr	r2, [pc, #228]	; (8006814 <USB_SetTurnaroundTime+0x114>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d306      	bcc.n	8006740 <USB_SetTurnaroundTime+0x40>
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	4a38      	ldr	r2, [pc, #224]	; (8006818 <USB_SetTurnaroundTime+0x118>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d202      	bcs.n	8006740 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800673a:	230e      	movs	r3, #14
 800673c:	617b      	str	r3, [r7, #20]
 800673e:	e051      	b.n	80067e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	4a35      	ldr	r2, [pc, #212]	; (8006818 <USB_SetTurnaroundTime+0x118>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d306      	bcc.n	8006756 <USB_SetTurnaroundTime+0x56>
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	4a34      	ldr	r2, [pc, #208]	; (800681c <USB_SetTurnaroundTime+0x11c>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d202      	bcs.n	8006756 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006750:	230d      	movs	r3, #13
 8006752:	617b      	str	r3, [r7, #20]
 8006754:	e046      	b.n	80067e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	4a30      	ldr	r2, [pc, #192]	; (800681c <USB_SetTurnaroundTime+0x11c>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d306      	bcc.n	800676c <USB_SetTurnaroundTime+0x6c>
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	4a2f      	ldr	r2, [pc, #188]	; (8006820 <USB_SetTurnaroundTime+0x120>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d802      	bhi.n	800676c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006766:	230c      	movs	r3, #12
 8006768:	617b      	str	r3, [r7, #20]
 800676a:	e03b      	b.n	80067e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	4a2c      	ldr	r2, [pc, #176]	; (8006820 <USB_SetTurnaroundTime+0x120>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d906      	bls.n	8006782 <USB_SetTurnaroundTime+0x82>
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	4a2b      	ldr	r2, [pc, #172]	; (8006824 <USB_SetTurnaroundTime+0x124>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d802      	bhi.n	8006782 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800677c:	230b      	movs	r3, #11
 800677e:	617b      	str	r3, [r7, #20]
 8006780:	e030      	b.n	80067e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	4a27      	ldr	r2, [pc, #156]	; (8006824 <USB_SetTurnaroundTime+0x124>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d906      	bls.n	8006798 <USB_SetTurnaroundTime+0x98>
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	4a26      	ldr	r2, [pc, #152]	; (8006828 <USB_SetTurnaroundTime+0x128>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d802      	bhi.n	8006798 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006792:	230a      	movs	r3, #10
 8006794:	617b      	str	r3, [r7, #20]
 8006796:	e025      	b.n	80067e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	4a23      	ldr	r2, [pc, #140]	; (8006828 <USB_SetTurnaroundTime+0x128>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d906      	bls.n	80067ae <USB_SetTurnaroundTime+0xae>
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	4a22      	ldr	r2, [pc, #136]	; (800682c <USB_SetTurnaroundTime+0x12c>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d202      	bcs.n	80067ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80067a8:	2309      	movs	r3, #9
 80067aa:	617b      	str	r3, [r7, #20]
 80067ac:	e01a      	b.n	80067e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	4a1e      	ldr	r2, [pc, #120]	; (800682c <USB_SetTurnaroundTime+0x12c>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d306      	bcc.n	80067c4 <USB_SetTurnaroundTime+0xc4>
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	4a1d      	ldr	r2, [pc, #116]	; (8006830 <USB_SetTurnaroundTime+0x130>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d802      	bhi.n	80067c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80067be:	2308      	movs	r3, #8
 80067c0:	617b      	str	r3, [r7, #20]
 80067c2:	e00f      	b.n	80067e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	4a1a      	ldr	r2, [pc, #104]	; (8006830 <USB_SetTurnaroundTime+0x130>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d906      	bls.n	80067da <USB_SetTurnaroundTime+0xda>
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	4a19      	ldr	r2, [pc, #100]	; (8006834 <USB_SetTurnaroundTime+0x134>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d202      	bcs.n	80067da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80067d4:	2307      	movs	r3, #7
 80067d6:	617b      	str	r3, [r7, #20]
 80067d8:	e004      	b.n	80067e4 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80067da:	2306      	movs	r3, #6
 80067dc:	617b      	str	r3, [r7, #20]
 80067de:	e001      	b.n	80067e4 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80067e0:	2309      	movs	r3, #9
 80067e2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	68da      	ldr	r2, [r3, #12]
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	029b      	lsls	r3, r3, #10
 80067f8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80067fc:	431a      	orrs	r2, r3
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	371c      	adds	r7, #28
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr
 8006810:	00d8acbf 	.word	0x00d8acbf
 8006814:	00e4e1c0 	.word	0x00e4e1c0
 8006818:	00f42400 	.word	0x00f42400
 800681c:	01067380 	.word	0x01067380
 8006820:	011a499f 	.word	0x011a499f
 8006824:	01312cff 	.word	0x01312cff
 8006828:	014ca43f 	.word	0x014ca43f
 800682c:	016e3600 	.word	0x016e3600
 8006830:	01a6ab1f 	.word	0x01a6ab1f
 8006834:	01e84800 	.word	0x01e84800

08006838 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	f043 0201 	orr.w	r2, r3, #1
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	370c      	adds	r7, #12
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800685a:	b480      	push	{r7}
 800685c:	b083      	sub	sp, #12
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f023 0201 	bic.w	r2, r3, #1
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	460b      	mov	r3, r1
 8006886:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006888:	2300      	movs	r3, #0
 800688a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006898:	78fb      	ldrb	r3, [r7, #3]
 800689a:	2b01      	cmp	r3, #1
 800689c:	d115      	bne.n	80068ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80068aa:	2001      	movs	r0, #1
 80068ac:	f7fb f94a 	bl	8001b44 <HAL_Delay>
      ms++;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	3301      	adds	r3, #1
 80068b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f001 f8ab 	bl	8007a12 <USB_GetMode>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d01e      	beq.n	8006900 <USB_SetCurrentMode+0x84>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2b31      	cmp	r3, #49	; 0x31
 80068c6:	d9f0      	bls.n	80068aa <USB_SetCurrentMode+0x2e>
 80068c8:	e01a      	b.n	8006900 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80068ca:	78fb      	ldrb	r3, [r7, #3]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d115      	bne.n	80068fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80068dc:	2001      	movs	r0, #1
 80068de:	f7fb f931 	bl	8001b44 <HAL_Delay>
      ms++;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	3301      	adds	r3, #1
 80068e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f001 f892 	bl	8007a12 <USB_GetMode>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d005      	beq.n	8006900 <USB_SetCurrentMode+0x84>
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2b31      	cmp	r3, #49	; 0x31
 80068f8:	d9f0      	bls.n	80068dc <USB_SetCurrentMode+0x60>
 80068fa:	e001      	b.n	8006900 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e005      	b.n	800690c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2b32      	cmp	r3, #50	; 0x32
 8006904:	d101      	bne.n	800690a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e000      	b.n	800690c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006914:	b084      	sub	sp, #16
 8006916:	b580      	push	{r7, lr}
 8006918:	b086      	sub	sp, #24
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
 800691e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006922:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006926:	2300      	movs	r3, #0
 8006928:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800692e:	2300      	movs	r3, #0
 8006930:	613b      	str	r3, [r7, #16]
 8006932:	e009      	b.n	8006948 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	3340      	adds	r3, #64	; 0x40
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	2200      	movs	r2, #0
 8006940:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	3301      	adds	r3, #1
 8006946:	613b      	str	r3, [r7, #16]
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	2b0e      	cmp	r3, #14
 800694c:	d9f2      	bls.n	8006934 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800694e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006950:	2b00      	cmp	r3, #0
 8006952:	d11c      	bne.n	800698e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006962:	f043 0302 	orr.w	r3, r3, #2
 8006966:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	601a      	str	r2, [r3, #0]
 800698c:	e005      	b.n	800699a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006992:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069a0:	461a      	mov	r2, r3
 80069a2:	2300      	movs	r3, #0
 80069a4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80069a6:	2103      	movs	r1, #3
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 f959 	bl	8006c60 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80069ae:	2110      	movs	r1, #16
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 f8f1 	bl	8006b98 <USB_FlushTxFifo>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d001      	beq.n	80069c0 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 f91d 	bl	8006c00 <USB_FlushRxFifo>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d001      	beq.n	80069d0 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069d6:	461a      	mov	r2, r3
 80069d8:	2300      	movs	r3, #0
 80069da:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069e2:	461a      	mov	r2, r3
 80069e4:	2300      	movs	r3, #0
 80069e6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ee:	461a      	mov	r2, r3
 80069f0:	2300      	movs	r3, #0
 80069f2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069f4:	2300      	movs	r3, #0
 80069f6:	613b      	str	r3, [r7, #16]
 80069f8:	e043      	b.n	8006a82 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	015a      	lsls	r2, r3, #5
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a10:	d118      	bne.n	8006a44 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d10a      	bne.n	8006a2e <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	015a      	lsls	r2, r3, #5
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	4413      	add	r3, r2
 8006a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a24:	461a      	mov	r2, r3
 8006a26:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a2a:	6013      	str	r3, [r2, #0]
 8006a2c:	e013      	b.n	8006a56 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	015a      	lsls	r2, r3, #5
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	4413      	add	r3, r2
 8006a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a40:	6013      	str	r3, [r2, #0]
 8006a42:	e008      	b.n	8006a56 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	015a      	lsls	r2, r3, #5
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a50:	461a      	mov	r2, r3
 8006a52:	2300      	movs	r3, #0
 8006a54:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	015a      	lsls	r2, r3, #5
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a62:	461a      	mov	r2, r3
 8006a64:	2300      	movs	r3, #0
 8006a66:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	015a      	lsls	r2, r3, #5
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	4413      	add	r3, r2
 8006a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a74:	461a      	mov	r2, r3
 8006a76:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	613b      	str	r3, [r7, #16]
 8006a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d3b7      	bcc.n	80069fa <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	613b      	str	r3, [r7, #16]
 8006a8e:	e043      	b.n	8006b18 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	015a      	lsls	r2, r3, #5
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	4413      	add	r3, r2
 8006a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006aa2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006aa6:	d118      	bne.n	8006ada <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10a      	bne.n	8006ac4 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	015a      	lsls	r2, r3, #5
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aba:	461a      	mov	r2, r3
 8006abc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ac0:	6013      	str	r3, [r2, #0]
 8006ac2:	e013      	b.n	8006aec <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	015a      	lsls	r2, r3, #5
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	4413      	add	r3, r2
 8006acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006ad6:	6013      	str	r3, [r2, #0]
 8006ad8:	e008      	b.n	8006aec <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	015a      	lsls	r2, r3, #5
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	2300      	movs	r3, #0
 8006aea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	015a      	lsls	r2, r3, #5
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	4413      	add	r3, r2
 8006af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af8:	461a      	mov	r2, r3
 8006afa:	2300      	movs	r3, #0
 8006afc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	015a      	lsls	r2, r3, #5
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b10:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	3301      	adds	r3, #1
 8006b16:	613b      	str	r3, [r7, #16]
 8006b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d3b7      	bcc.n	8006a90 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b32:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006b40:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	f043 0210 	orr.w	r2, r3, #16
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	699a      	ldr	r2, [r3, #24]
 8006b52:	4b10      	ldr	r3, [pc, #64]	; (8006b94 <USB_DevInit+0x280>)
 8006b54:	4313      	orrs	r3, r2
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d005      	beq.n	8006b6c <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	699b      	ldr	r3, [r3, #24]
 8006b64:	f043 0208 	orr.w	r2, r3, #8
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d107      	bne.n	8006b82 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b7a:	f043 0304 	orr.w	r3, r3, #4
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3718      	adds	r7, #24
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b8e:	b004      	add	sp, #16
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	803c3800 	.word	0x803c3800

08006b98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	4a13      	ldr	r2, [pc, #76]	; (8006bfc <USB_FlushTxFifo+0x64>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d901      	bls.n	8006bb8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e01b      	b.n	8006bf0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	daf2      	bge.n	8006ba6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	019b      	lsls	r3, r3, #6
 8006bc8:	f043 0220 	orr.w	r2, r3, #32
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	4a08      	ldr	r2, [pc, #32]	; (8006bfc <USB_FlushTxFifo+0x64>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d901      	bls.n	8006be2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e006      	b.n	8006bf0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	f003 0320 	and.w	r3, r3, #32
 8006bea:	2b20      	cmp	r3, #32
 8006bec:	d0f0      	beq.n	8006bd0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3714      	adds	r7, #20
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr
 8006bfc:	00030d40 	.word	0x00030d40

08006c00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	4a11      	ldr	r2, [pc, #68]	; (8006c5c <USB_FlushRxFifo+0x5c>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d901      	bls.n	8006c1e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e018      	b.n	8006c50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	daf2      	bge.n	8006c0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006c26:	2300      	movs	r3, #0
 8006c28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2210      	movs	r2, #16
 8006c2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	3301      	adds	r3, #1
 8006c34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	4a08      	ldr	r2, [pc, #32]	; (8006c5c <USB_FlushRxFifo+0x5c>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d901      	bls.n	8006c42 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e006      	b.n	8006c50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	f003 0310 	and.w	r3, r3, #16
 8006c4a:	2b10      	cmp	r3, #16
 8006c4c:	d0f0      	beq.n	8006c30 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3714      	adds	r7, #20
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr
 8006c5c:	00030d40 	.word	0x00030d40

08006c60 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	460b      	mov	r3, r1
 8006c6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	78fb      	ldrb	r3, [r7, #3]
 8006c7a:	68f9      	ldr	r1, [r7, #12]
 8006c7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c80:	4313      	orrs	r3, r2
 8006c82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3714      	adds	r7, #20
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006c92:	b480      	push	{r7}
 8006c94:	b087      	sub	sp, #28
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f003 0306 	and.w	r3, r3, #6
 8006caa:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	d002      	beq.n	8006cb8 <USB_GetDevSpeed+0x26>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2b06      	cmp	r3, #6
 8006cb6:	d102      	bne.n	8006cbe <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006cb8:	2302      	movs	r3, #2
 8006cba:	75fb      	strb	r3, [r7, #23]
 8006cbc:	e001      	b.n	8006cc2 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8006cbe:	230f      	movs	r3, #15
 8006cc0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	371c      	adds	r7, #28
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	785b      	ldrb	r3, [r3, #1]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d13a      	bne.n	8006d62 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cf2:	69da      	ldr	r2, [r3, #28]
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	f003 030f 	and.w	r3, r3, #15
 8006cfc:	2101      	movs	r1, #1
 8006cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	68f9      	ldr	r1, [r7, #12]
 8006d06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	015a      	lsls	r2, r3, #5
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	4413      	add	r3, r2
 8006d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d155      	bne.n	8006dd0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	015a      	lsls	r2, r3, #5
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	791b      	ldrb	r3, [r3, #4]
 8006d3e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d40:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	059b      	lsls	r3, r3, #22
 8006d46:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	68ba      	ldr	r2, [r7, #8]
 8006d4c:	0151      	lsls	r1, r2, #5
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	440a      	add	r2, r1
 8006d52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d5e:	6013      	str	r3, [r2, #0]
 8006d60:	e036      	b.n	8006dd0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d68:	69da      	ldr	r2, [r3, #28]
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	f003 030f 	and.w	r3, r3, #15
 8006d72:	2101      	movs	r1, #1
 8006d74:	fa01 f303 	lsl.w	r3, r1, r3
 8006d78:	041b      	lsls	r3, r3, #16
 8006d7a:	68f9      	ldr	r1, [r7, #12]
 8006d7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d80:	4313      	orrs	r3, r2
 8006d82:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	015a      	lsls	r2, r3, #5
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d11a      	bne.n	8006dd0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	015a      	lsls	r2, r3, #5
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	4413      	add	r3, r2
 8006da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	791b      	ldrb	r3, [r3, #4]
 8006db4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006db6:	430b      	orrs	r3, r1
 8006db8:	4313      	orrs	r3, r2
 8006dba:	68ba      	ldr	r2, [r7, #8]
 8006dbc:	0151      	lsls	r1, r2, #5
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	440a      	add	r2, r1
 8006dc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dce:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3714      	adds	r7, #20
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
	...

08006de0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	785b      	ldrb	r3, [r3, #1]
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d161      	bne.n	8006ec0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	015a      	lsls	r2, r3, #5
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	4413      	add	r3, r2
 8006e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e12:	d11f      	bne.n	8006e54 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	015a      	lsls	r2, r3, #5
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68ba      	ldr	r2, [r7, #8]
 8006e24:	0151      	lsls	r1, r2, #5
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	440a      	add	r2, r1
 8006e2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006e32:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	015a      	lsls	r2, r3, #5
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68ba      	ldr	r2, [r7, #8]
 8006e44:	0151      	lsls	r1, r2, #5
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	440a      	add	r2, r1
 8006e4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e52:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	f003 030f 	and.w	r3, r3, #15
 8006e64:	2101      	movs	r1, #1
 8006e66:	fa01 f303 	lsl.w	r3, r1, r3
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	43db      	mvns	r3, r3
 8006e6e:	68f9      	ldr	r1, [r7, #12]
 8006e70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e74:	4013      	ands	r3, r2
 8006e76:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e7e:	69da      	ldr	r2, [r3, #28]
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	f003 030f 	and.w	r3, r3, #15
 8006e88:	2101      	movs	r1, #1
 8006e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	43db      	mvns	r3, r3
 8006e92:	68f9      	ldr	r1, [r7, #12]
 8006e94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e98:	4013      	ands	r3, r2
 8006e9a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	015a      	lsls	r2, r3, #5
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	0159      	lsls	r1, r3, #5
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	440b      	add	r3, r1
 8006eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	4b35      	ldr	r3, [pc, #212]	; (8006f90 <USB_DeactivateEndpoint+0x1b0>)
 8006eba:	4013      	ands	r3, r2
 8006ebc:	600b      	str	r3, [r1, #0]
 8006ebe:	e060      	b.n	8006f82 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	015a      	lsls	r2, r3, #5
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ed2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ed6:	d11f      	bne.n	8006f18 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	015a      	lsls	r2, r3, #5
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	4413      	add	r3, r2
 8006ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	0151      	lsls	r1, r2, #5
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	440a      	add	r2, r1
 8006eee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ef2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006ef6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	015a      	lsls	r2, r3, #5
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	4413      	add	r3, r2
 8006f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68ba      	ldr	r2, [r7, #8]
 8006f08:	0151      	lsls	r1, r2, #5
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	440a      	add	r2, r1
 8006f0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f16:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	f003 030f 	and.w	r3, r3, #15
 8006f28:	2101      	movs	r1, #1
 8006f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f2e:	041b      	lsls	r3, r3, #16
 8006f30:	43db      	mvns	r3, r3
 8006f32:	68f9      	ldr	r1, [r7, #12]
 8006f34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f38:	4013      	ands	r3, r2
 8006f3a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f42:	69da      	ldr	r2, [r3, #28]
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	f003 030f 	and.w	r3, r3, #15
 8006f4c:	2101      	movs	r1, #1
 8006f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8006f52:	041b      	lsls	r3, r3, #16
 8006f54:	43db      	mvns	r3, r3
 8006f56:	68f9      	ldr	r1, [r7, #12]
 8006f58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	015a      	lsls	r2, r3, #5
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	4413      	add	r3, r2
 8006f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	0159      	lsls	r1, r3, #5
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	440b      	add	r3, r1
 8006f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	4b05      	ldr	r3, [pc, #20]	; (8006f94 <USB_DeactivateEndpoint+0x1b4>)
 8006f7e:	4013      	ands	r3, r2
 8006f80:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr
 8006f90:	ec337800 	.word	0xec337800
 8006f94:	eff37800 	.word	0xeff37800

08006f98 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b086      	sub	sp, #24
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	785b      	ldrb	r3, [r3, #1]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	f040 8128 	bne.w	8007206 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d132      	bne.n	8007024 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	015a      	lsls	r2, r3, #5
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	0151      	lsls	r1, r2, #5
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	440a      	add	r2, r1
 8006fd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fd8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006fdc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006fe0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	015a      	lsls	r2, r3, #5
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	4413      	add	r3, r2
 8006fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	0151      	lsls	r1, r2, #5
 8006ff4:	697a      	ldr	r2, [r7, #20]
 8006ff6:	440a      	add	r2, r1
 8006ff8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ffc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007000:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	015a      	lsls	r2, r3, #5
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	4413      	add	r3, r2
 800700a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	0151      	lsls	r1, r2, #5
 8007014:	697a      	ldr	r2, [r7, #20]
 8007016:	440a      	add	r2, r1
 8007018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800701c:	0cdb      	lsrs	r3, r3, #19
 800701e:	04db      	lsls	r3, r3, #19
 8007020:	6113      	str	r3, [r2, #16]
 8007022:	e092      	b.n	800714a <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	015a      	lsls	r2, r3, #5
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	4413      	add	r3, r2
 800702c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	0151      	lsls	r1, r2, #5
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	440a      	add	r2, r1
 800703a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800703e:	0cdb      	lsrs	r3, r3, #19
 8007040:	04db      	lsls	r3, r3, #19
 8007042:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	015a      	lsls	r2, r3, #5
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	4413      	add	r3, r2
 800704c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	693a      	ldr	r2, [r7, #16]
 8007054:	0151      	lsls	r1, r2, #5
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	440a      	add	r2, r1
 800705a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800705e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007062:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007066:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d11a      	bne.n	80070a4 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	691a      	ldr	r2, [r3, #16]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	429a      	cmp	r2, r3
 8007078:	d903      	bls.n	8007082 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	689a      	ldr	r2, [r3, #8]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	015a      	lsls	r2, r3, #5
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	4413      	add	r3, r2
 800708a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	0151      	lsls	r1, r2, #5
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	440a      	add	r2, r1
 8007098:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800709c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070a0:	6113      	str	r3, [r2, #16]
 80070a2:	e01b      	b.n	80070dc <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	015a      	lsls	r2, r3, #5
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	4413      	add	r3, r2
 80070ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	6919      	ldr	r1, [r3, #16]
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	440b      	add	r3, r1
 80070bc:	1e59      	subs	r1, r3, #1
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80070c6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80070c8:	4b8d      	ldr	r3, [pc, #564]	; (8007300 <USB_EPStartXfer+0x368>)
 80070ca:	400b      	ands	r3, r1
 80070cc:	6939      	ldr	r1, [r7, #16]
 80070ce:	0148      	lsls	r0, r1, #5
 80070d0:	6979      	ldr	r1, [r7, #20]
 80070d2:	4401      	add	r1, r0
 80070d4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80070d8:	4313      	orrs	r3, r2
 80070da:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	015a      	lsls	r2, r3, #5
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	4413      	add	r3, r2
 80070e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e8:	691a      	ldr	r2, [r3, #16]
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070f2:	6939      	ldr	r1, [r7, #16]
 80070f4:	0148      	lsls	r0, r1, #5
 80070f6:	6979      	ldr	r1, [r7, #20]
 80070f8:	4401      	add	r1, r0
 80070fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80070fe:	4313      	orrs	r3, r2
 8007100:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	791b      	ldrb	r3, [r3, #4]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d11f      	bne.n	800714a <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	015a      	lsls	r2, r3, #5
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	4413      	add	r3, r2
 8007112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	693a      	ldr	r2, [r7, #16]
 800711a:	0151      	lsls	r1, r2, #5
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	440a      	add	r2, r1
 8007120:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007124:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007128:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	015a      	lsls	r2, r3, #5
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	4413      	add	r3, r2
 8007132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	693a      	ldr	r2, [r7, #16]
 800713a:	0151      	lsls	r1, r2, #5
 800713c:	697a      	ldr	r2, [r7, #20]
 800713e:	440a      	add	r2, r1
 8007140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007144:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007148:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	015a      	lsls	r2, r3, #5
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	4413      	add	r3, r2
 8007152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	693a      	ldr	r2, [r7, #16]
 800715a:	0151      	lsls	r1, r2, #5
 800715c:	697a      	ldr	r2, [r7, #20]
 800715e:	440a      	add	r2, r1
 8007160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007164:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007168:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	791b      	ldrb	r3, [r3, #4]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d015      	beq.n	800719e <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	2b00      	cmp	r3, #0
 8007178:	f000 8139 	beq.w	80073ee <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007182:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	f003 030f 	and.w	r3, r3, #15
 800718c:	2101      	movs	r1, #1
 800718e:	fa01 f303 	lsl.w	r3, r1, r3
 8007192:	6979      	ldr	r1, [r7, #20]
 8007194:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007198:	4313      	orrs	r3, r2
 800719a:	634b      	str	r3, [r1, #52]	; 0x34
 800719c:	e127      	b.n	80073ee <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d110      	bne.n	80071d0 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	015a      	lsls	r2, r3, #5
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	4413      	add	r3, r2
 80071b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	693a      	ldr	r2, [r7, #16]
 80071be:	0151      	lsls	r1, r2, #5
 80071c0:	697a      	ldr	r2, [r7, #20]
 80071c2:	440a      	add	r2, r1
 80071c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80071cc:	6013      	str	r3, [r2, #0]
 80071ce:	e00f      	b.n	80071f0 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	015a      	lsls	r2, r3, #5
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	4413      	add	r3, r2
 80071d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	693a      	ldr	r2, [r7, #16]
 80071e0:	0151      	lsls	r1, r2, #5
 80071e2:	697a      	ldr	r2, [r7, #20]
 80071e4:	440a      	add	r2, r1
 80071e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071ee:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	68d9      	ldr	r1, [r3, #12]
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	781a      	ldrb	r2, [r3, #0]
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 f9a6 	bl	8007550 <USB_WritePacket>
 8007204:	e0f3      	b.n	80073ee <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	015a      	lsls	r2, r3, #5
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	4413      	add	r3, r2
 800720e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	0151      	lsls	r1, r2, #5
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	440a      	add	r2, r1
 800721c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007220:	0cdb      	lsrs	r3, r3, #19
 8007222:	04db      	lsls	r3, r3, #19
 8007224:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	015a      	lsls	r2, r3, #5
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	4413      	add	r3, r2
 800722e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	693a      	ldr	r2, [r7, #16]
 8007236:	0151      	lsls	r1, r2, #5
 8007238:	697a      	ldr	r2, [r7, #20]
 800723a:	440a      	add	r2, r1
 800723c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007240:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007244:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007248:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d12f      	bne.n	80072b0 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d003      	beq.n	8007260 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	689a      	ldr	r2, [r3, #8]
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	689a      	ldr	r2, [r3, #8]
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	015a      	lsls	r2, r3, #5
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	4413      	add	r3, r2
 8007270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007274:	691a      	ldr	r2, [r3, #16]
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800727e:	6939      	ldr	r1, [r7, #16]
 8007280:	0148      	lsls	r0, r1, #5
 8007282:	6979      	ldr	r1, [r7, #20]
 8007284:	4401      	add	r1, r0
 8007286:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800728a:	4313      	orrs	r3, r2
 800728c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	015a      	lsls	r2, r3, #5
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	4413      	add	r3, r2
 8007296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	0151      	lsls	r1, r2, #5
 80072a0:	697a      	ldr	r2, [r7, #20]
 80072a2:	440a      	add	r2, r1
 80072a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072ac:	6113      	str	r3, [r2, #16]
 80072ae:	e061      	b.n	8007374 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d125      	bne.n	8007304 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	015a      	lsls	r2, r3, #5
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	4413      	add	r3, r2
 80072c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c4:	691a      	ldr	r2, [r3, #16]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072ce:	6939      	ldr	r1, [r7, #16]
 80072d0:	0148      	lsls	r0, r1, #5
 80072d2:	6979      	ldr	r1, [r7, #20]
 80072d4:	4401      	add	r1, r0
 80072d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80072da:	4313      	orrs	r3, r2
 80072dc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	015a      	lsls	r2, r3, #5
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	4413      	add	r3, r2
 80072e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	693a      	ldr	r2, [r7, #16]
 80072ee:	0151      	lsls	r1, r2, #5
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	440a      	add	r2, r1
 80072f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072fc:	6113      	str	r3, [r2, #16]
 80072fe:	e039      	b.n	8007374 <USB_EPStartXfer+0x3dc>
 8007300:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	691a      	ldr	r2, [r3, #16]
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	4413      	add	r3, r2
 800730e:	1e5a      	subs	r2, r3, #1
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	fbb2 f3f3 	udiv	r3, r2, r3
 8007318:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	89fa      	ldrh	r2, [r7, #14]
 8007320:	fb03 f202 	mul.w	r2, r3, r2
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	015a      	lsls	r2, r3, #5
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	4413      	add	r3, r2
 8007330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007334:	691a      	ldr	r2, [r3, #16]
 8007336:	89fb      	ldrh	r3, [r7, #14]
 8007338:	04d9      	lsls	r1, r3, #19
 800733a:	4b2f      	ldr	r3, [pc, #188]	; (80073f8 <USB_EPStartXfer+0x460>)
 800733c:	400b      	ands	r3, r1
 800733e:	6939      	ldr	r1, [r7, #16]
 8007340:	0148      	lsls	r0, r1, #5
 8007342:	6979      	ldr	r1, [r7, #20]
 8007344:	4401      	add	r1, r0
 8007346:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800734a:	4313      	orrs	r3, r2
 800734c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	015a      	lsls	r2, r3, #5
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	4413      	add	r3, r2
 8007356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800735a:	691a      	ldr	r2, [r3, #16]
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	6a1b      	ldr	r3, [r3, #32]
 8007360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007364:	6939      	ldr	r1, [r7, #16]
 8007366:	0148      	lsls	r0, r1, #5
 8007368:	6979      	ldr	r1, [r7, #20]
 800736a:	4401      	add	r1, r0
 800736c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007370:	4313      	orrs	r3, r2
 8007372:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	791b      	ldrb	r3, [r3, #4]
 8007378:	2b01      	cmp	r3, #1
 800737a:	d128      	bne.n	80073ce <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007388:	2b00      	cmp	r3, #0
 800738a:	d110      	bne.n	80073ae <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	015a      	lsls	r2, r3, #5
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	4413      	add	r3, r2
 8007394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	693a      	ldr	r2, [r7, #16]
 800739c:	0151      	lsls	r1, r2, #5
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	440a      	add	r2, r1
 80073a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073aa:	6013      	str	r3, [r2, #0]
 80073ac:	e00f      	b.n	80073ce <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	015a      	lsls	r2, r3, #5
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	4413      	add	r3, r2
 80073b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	693a      	ldr	r2, [r7, #16]
 80073be:	0151      	lsls	r1, r2, #5
 80073c0:	697a      	ldr	r2, [r7, #20]
 80073c2:	440a      	add	r2, r1
 80073c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073cc:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	015a      	lsls	r2, r3, #5
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	4413      	add	r3, r2
 80073d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	693a      	ldr	r2, [r7, #16]
 80073de:	0151      	lsls	r1, r2, #5
 80073e0:	697a      	ldr	r2, [r7, #20]
 80073e2:	440a      	add	r2, r1
 80073e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073ec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3718      	adds	r7, #24
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	1ff80000 	.word	0x1ff80000

080073fc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b087      	sub	sp, #28
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007406:	2300      	movs	r3, #0
 8007408:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800740a:	2300      	movs	r3, #0
 800740c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	785b      	ldrb	r3, [r3, #1]
 8007416:	2b01      	cmp	r3, #1
 8007418:	d14a      	bne.n	80074b0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	015a      	lsls	r2, r3, #5
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	4413      	add	r3, r2
 8007424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800742e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007432:	f040 8086 	bne.w	8007542 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	015a      	lsls	r2, r3, #5
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	4413      	add	r3, r2
 8007440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	683a      	ldr	r2, [r7, #0]
 8007448:	7812      	ldrb	r2, [r2, #0]
 800744a:	0151      	lsls	r1, r2, #5
 800744c:	693a      	ldr	r2, [r7, #16]
 800744e:	440a      	add	r2, r1
 8007450:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007454:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007458:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	015a      	lsls	r2, r3, #5
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	4413      	add	r3, r2
 8007464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	683a      	ldr	r2, [r7, #0]
 800746c:	7812      	ldrb	r2, [r2, #0]
 800746e:	0151      	lsls	r1, r2, #5
 8007470:	693a      	ldr	r2, [r7, #16]
 8007472:	440a      	add	r2, r1
 8007474:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007478:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800747c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	3301      	adds	r3, #1
 8007482:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f242 7210 	movw	r2, #10000	; 0x2710
 800748a:	4293      	cmp	r3, r2
 800748c:	d902      	bls.n	8007494 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	75fb      	strb	r3, [r7, #23]
          break;
 8007492:	e056      	b.n	8007542 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	015a      	lsls	r2, r3, #5
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	4413      	add	r3, r2
 800749e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074ac:	d0e7      	beq.n	800747e <USB_EPStopXfer+0x82>
 80074ae:	e048      	b.n	8007542 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	015a      	lsls	r2, r3, #5
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	4413      	add	r3, r2
 80074ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074c8:	d13b      	bne.n	8007542 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	015a      	lsls	r2, r3, #5
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	4413      	add	r3, r2
 80074d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	683a      	ldr	r2, [r7, #0]
 80074dc:	7812      	ldrb	r2, [r2, #0]
 80074de:	0151      	lsls	r1, r2, #5
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	440a      	add	r2, r1
 80074e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80074ec:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	015a      	lsls	r2, r3, #5
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	4413      	add	r3, r2
 80074f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	683a      	ldr	r2, [r7, #0]
 8007500:	7812      	ldrb	r2, [r2, #0]
 8007502:	0151      	lsls	r1, r2, #5
 8007504:	693a      	ldr	r2, [r7, #16]
 8007506:	440a      	add	r2, r1
 8007508:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800750c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007510:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	3301      	adds	r3, #1
 8007516:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f242 7210 	movw	r2, #10000	; 0x2710
 800751e:	4293      	cmp	r3, r2
 8007520:	d902      	bls.n	8007528 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	75fb      	strb	r3, [r7, #23]
          break;
 8007526:	e00c      	b.n	8007542 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	015a      	lsls	r2, r3, #5
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	4413      	add	r3, r2
 8007532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800753c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007540:	d0e7      	beq.n	8007512 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007542:	7dfb      	ldrb	r3, [r7, #23]
}
 8007544:	4618      	mov	r0, r3
 8007546:	371c      	adds	r7, #28
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8007550:	b480      	push	{r7}
 8007552:	b089      	sub	sp, #36	; 0x24
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	4611      	mov	r1, r2
 800755c:	461a      	mov	r2, r3
 800755e:	460b      	mov	r3, r1
 8007560:	71fb      	strb	r3, [r7, #7]
 8007562:	4613      	mov	r3, r2
 8007564:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800756e:	88bb      	ldrh	r3, [r7, #4]
 8007570:	3303      	adds	r3, #3
 8007572:	089b      	lsrs	r3, r3, #2
 8007574:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8007576:	2300      	movs	r3, #0
 8007578:	61bb      	str	r3, [r7, #24]
 800757a:	e018      	b.n	80075ae <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800757c:	79fb      	ldrb	r3, [r7, #7]
 800757e:	031a      	lsls	r2, r3, #12
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	4413      	add	r3, r2
 8007584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007588:	461a      	mov	r2, r3
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	6013      	str	r3, [r2, #0]
    pSrc++;
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	3301      	adds	r3, #1
 8007594:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	3301      	adds	r3, #1
 800759a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	3301      	adds	r3, #1
 80075a0:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	3301      	adds	r3, #1
 80075a6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	3301      	adds	r3, #1
 80075ac:	61bb      	str	r3, [r7, #24]
 80075ae:	69ba      	ldr	r2, [r7, #24]
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d3e2      	bcc.n	800757c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3724      	adds	r7, #36	; 0x24
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b08b      	sub	sp, #44	; 0x2c
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	4613      	mov	r3, r2
 80075d0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80075da:	88fb      	ldrh	r3, [r7, #6]
 80075dc:	089b      	lsrs	r3, r3, #2
 80075de:	b29b      	uxth	r3, r3
 80075e0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80075e2:	88fb      	ldrh	r3, [r7, #6]
 80075e4:	f003 0303 	and.w	r3, r3, #3
 80075e8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80075ea:	2300      	movs	r3, #0
 80075ec:	623b      	str	r3, [r7, #32]
 80075ee:	e014      	b.n	800761a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fa:	601a      	str	r2, [r3, #0]
    pDest++;
 80075fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fe:	3301      	adds	r3, #1
 8007600:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007604:	3301      	adds	r3, #1
 8007606:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760a:	3301      	adds	r3, #1
 800760c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800760e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007610:	3301      	adds	r3, #1
 8007612:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007614:	6a3b      	ldr	r3, [r7, #32]
 8007616:	3301      	adds	r3, #1
 8007618:	623b      	str	r3, [r7, #32]
 800761a:	6a3a      	ldr	r2, [r7, #32]
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	429a      	cmp	r2, r3
 8007620:	d3e6      	bcc.n	80075f0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007622:	8bfb      	ldrh	r3, [r7, #30]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d01e      	beq.n	8007666 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007628:	2300      	movs	r3, #0
 800762a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007632:	461a      	mov	r2, r3
 8007634:	f107 0310 	add.w	r3, r7, #16
 8007638:	6812      	ldr	r2, [r2, #0]
 800763a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800763c:	693a      	ldr	r2, [r7, #16]
 800763e:	6a3b      	ldr	r3, [r7, #32]
 8007640:	b2db      	uxtb	r3, r3
 8007642:	00db      	lsls	r3, r3, #3
 8007644:	fa22 f303 	lsr.w	r3, r2, r3
 8007648:	b2da      	uxtb	r2, r3
 800764a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764c:	701a      	strb	r2, [r3, #0]
      i++;
 800764e:	6a3b      	ldr	r3, [r7, #32]
 8007650:	3301      	adds	r3, #1
 8007652:	623b      	str	r3, [r7, #32]
      pDest++;
 8007654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007656:	3301      	adds	r3, #1
 8007658:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800765a:	8bfb      	ldrh	r3, [r7, #30]
 800765c:	3b01      	subs	r3, #1
 800765e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007660:	8bfb      	ldrh	r3, [r7, #30]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1ea      	bne.n	800763c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007668:	4618      	mov	r0, r3
 800766a:	372c      	adds	r7, #44	; 0x2c
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	785b      	ldrb	r3, [r3, #1]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d12c      	bne.n	80076ea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	015a      	lsls	r2, r3, #5
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	4413      	add	r3, r2
 8007698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	db12      	blt.n	80076c8 <USB_EPSetStall+0x54>
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d00f      	beq.n	80076c8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	015a      	lsls	r2, r3, #5
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	4413      	add	r3, r2
 80076b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68ba      	ldr	r2, [r7, #8]
 80076b8:	0151      	lsls	r1, r2, #5
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	440a      	add	r2, r1
 80076be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80076c6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	015a      	lsls	r2, r3, #5
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	4413      	add	r3, r2
 80076d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68ba      	ldr	r2, [r7, #8]
 80076d8:	0151      	lsls	r1, r2, #5
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	440a      	add	r2, r1
 80076de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80076e6:	6013      	str	r3, [r2, #0]
 80076e8:	e02b      	b.n	8007742 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	015a      	lsls	r2, r3, #5
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	4413      	add	r3, r2
 80076f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	db12      	blt.n	8007722 <USB_EPSetStall+0xae>
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00f      	beq.n	8007722 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	015a      	lsls	r2, r3, #5
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	4413      	add	r3, r2
 800770a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68ba      	ldr	r2, [r7, #8]
 8007712:	0151      	lsls	r1, r2, #5
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	440a      	add	r2, r1
 8007718:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800771c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007720:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	015a      	lsls	r2, r3, #5
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	4413      	add	r3, r2
 800772a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68ba      	ldr	r2, [r7, #8]
 8007732:	0151      	lsls	r1, r2, #5
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	440a      	add	r2, r1
 8007738:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800773c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007740:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3714      	adds	r7, #20
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	785b      	ldrb	r3, [r3, #1]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d128      	bne.n	80077be <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	015a      	lsls	r2, r3, #5
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	4413      	add	r3, r2
 8007774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68ba      	ldr	r2, [r7, #8]
 800777c:	0151      	lsls	r1, r2, #5
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	440a      	add	r2, r1
 8007782:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007786:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800778a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	791b      	ldrb	r3, [r3, #4]
 8007790:	2b03      	cmp	r3, #3
 8007792:	d003      	beq.n	800779c <USB_EPClearStall+0x4c>
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	791b      	ldrb	r3, [r3, #4]
 8007798:	2b02      	cmp	r3, #2
 800779a:	d138      	bne.n	800780e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	015a      	lsls	r2, r3, #5
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	4413      	add	r3, r2
 80077a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68ba      	ldr	r2, [r7, #8]
 80077ac:	0151      	lsls	r1, r2, #5
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	440a      	add	r2, r1
 80077b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077ba:	6013      	str	r3, [r2, #0]
 80077bc:	e027      	b.n	800780e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	015a      	lsls	r2, r3, #5
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	4413      	add	r3, r2
 80077c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	0151      	lsls	r1, r2, #5
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	440a      	add	r2, r1
 80077d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80077dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	791b      	ldrb	r3, [r3, #4]
 80077e2:	2b03      	cmp	r3, #3
 80077e4:	d003      	beq.n	80077ee <USB_EPClearStall+0x9e>
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	791b      	ldrb	r3, [r3, #4]
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d10f      	bne.n	800780e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	015a      	lsls	r2, r3, #5
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	4413      	add	r3, r2
 80077f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68ba      	ldr	r2, [r7, #8]
 80077fe:	0151      	lsls	r1, r2, #5
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	440a      	add	r2, r1
 8007804:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800780c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3714      	adds	r7, #20
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	460b      	mov	r3, r1
 8007826:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800783a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800783e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	78fb      	ldrb	r3, [r7, #3]
 800784a:	011b      	lsls	r3, r3, #4
 800784c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007850:	68f9      	ldr	r1, [r7, #12]
 8007852:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007856:	4313      	orrs	r3, r2
 8007858:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	3714      	adds	r7, #20
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007868:	b480      	push	{r7}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68fa      	ldr	r2, [r7, #12]
 800787e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007882:	f023 0303 	bic.w	r3, r3, #3
 8007886:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007896:	f023 0302 	bic.w	r3, r3, #2
 800789a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3714      	adds	r7, #20
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80078aa:	b480      	push	{r7}
 80078ac:	b085      	sub	sp, #20
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80078c4:	f023 0303 	bic.w	r3, r3, #3
 80078c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078d8:	f043 0302 	orr.w	r3, r3, #2
 80078dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3714      	adds	r7, #20
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	695b      	ldr	r3, [r3, #20]
 80078f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	699b      	ldr	r3, [r3, #24]
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	4013      	ands	r3, r2
 8007902:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007904:	68fb      	ldr	r3, [r7, #12]
}
 8007906:	4618      	mov	r0, r3
 8007908:	3714      	adds	r7, #20
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr

08007912 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007912:	b480      	push	{r7}
 8007914:	b085      	sub	sp, #20
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007924:	699b      	ldr	r3, [r3, #24]
 8007926:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800792e:	69db      	ldr	r3, [r3, #28]
 8007930:	68ba      	ldr	r2, [r7, #8]
 8007932:	4013      	ands	r3, r2
 8007934:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	0c1b      	lsrs	r3, r3, #16
}
 800793a:	4618      	mov	r0, r3
 800793c:	3714      	adds	r7, #20
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr

08007946 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007946:	b480      	push	{r7}
 8007948:	b085      	sub	sp, #20
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007958:	699b      	ldr	r3, [r3, #24]
 800795a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007962:	69db      	ldr	r3, [r3, #28]
 8007964:	68ba      	ldr	r2, [r7, #8]
 8007966:	4013      	ands	r3, r2
 8007968:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	b29b      	uxth	r3, r3
}
 800796e:	4618      	mov	r0, r3
 8007970:	3714      	adds	r7, #20
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr

0800797a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800797a:	b480      	push	{r7}
 800797c:	b085      	sub	sp, #20
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
 8007982:	460b      	mov	r3, r1
 8007984:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800798a:	78fb      	ldrb	r3, [r7, #3]
 800798c:	015a      	lsls	r2, r3, #5
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	4413      	add	r3, r2
 8007992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	68ba      	ldr	r2, [r7, #8]
 80079a4:	4013      	ands	r3, r2
 80079a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80079a8:	68bb      	ldr	r3, [r7, #8]
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3714      	adds	r7, #20
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr

080079b6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80079b6:	b480      	push	{r7}
 80079b8:	b087      	sub	sp, #28
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
 80079be:	460b      	mov	r3, r1
 80079c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079d8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80079da:	78fb      	ldrb	r3, [r7, #3]
 80079dc:	f003 030f 	and.w	r3, r3, #15
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	fa22 f303 	lsr.w	r3, r2, r3
 80079e6:	01db      	lsls	r3, r3, #7
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80079f0:	78fb      	ldrb	r3, [r7, #3]
 80079f2:	015a      	lsls	r2, r3, #5
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	4413      	add	r3, r2
 80079f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	693a      	ldr	r2, [r7, #16]
 8007a00:	4013      	ands	r3, r2
 8007a02:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007a04:	68bb      	ldr	r3, [r7, #8]
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	371c      	adds	r7, #28
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr

08007a12 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007a12:	b480      	push	{r7}
 8007a14:	b083      	sub	sp, #12
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	f003 0301 	and.w	r3, r3, #1
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	370c      	adds	r7, #12
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr

08007a2e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007a2e:	b480      	push	{r7}
 8007a30:	b085      	sub	sp, #20
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a48:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007a4c:	f023 0307 	bic.w	r3, r3, #7
 8007a50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3714      	adds	r7, #20
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	333c      	adds	r3, #60	; 0x3c
 8007a86:	3304      	adds	r3, #4
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	4a1c      	ldr	r2, [pc, #112]	; (8007b00 <USB_EP0_OutStart+0x8c>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d90a      	bls.n	8007aaa <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007aa0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007aa4:	d101      	bne.n	8007aaa <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	e024      	b.n	8007af4 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007abc:	691b      	ldr	r3, [r3, #16]
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ac4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ac8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad0:	691b      	ldr	r3, [r3, #16]
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ad8:	f043 0318 	orr.w	r3, r3, #24
 8007adc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007aec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007af0:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3714      	adds	r7, #20
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr
 8007b00:	4f54300a 	.word	0x4f54300a

08007b04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	3301      	adds	r3, #1
 8007b14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	4a13      	ldr	r2, [pc, #76]	; (8007b68 <USB_CoreReset+0x64>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d901      	bls.n	8007b22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007b1e:	2303      	movs	r3, #3
 8007b20:	e01b      	b.n	8007b5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	daf2      	bge.n	8007b10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	f043 0201 	orr.w	r2, r3, #1
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	4a09      	ldr	r2, [pc, #36]	; (8007b68 <USB_CoreReset+0x64>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d901      	bls.n	8007b4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	e006      	b.n	8007b5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	f003 0301 	and.w	r3, r3, #1
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d0f0      	beq.n	8007b3a <USB_CoreReset+0x36>

  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3714      	adds	r7, #20
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr
 8007b66:	bf00      	nop
 8007b68:	00030d40 	.word	0x00030d40

08007b6c <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	460b      	mov	r3, r1
 8007b76:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8007b78:	2018      	movs	r0, #24
 8007b7a:	f002 fc8b 	bl	800a494 <USBD_static_malloc>
 8007b7e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d109      	bne.n	8007b9a <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	32b0      	adds	r2, #176	; 0xb0
 8007b90:	2100      	movs	r1, #0
 8007b92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007b96:	2302      	movs	r3, #2
 8007b98:	e08a      	b.n	8007cb0 <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	32b0      	adds	r2, #176	; 0xb0
 8007ba4:	68f9      	ldr	r1, [r7, #12]
 8007ba6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	32b0      	adds	r2, #176	; 0xb0
 8007bb4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	7c1b      	ldrb	r3, [r3, #16]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d11b      	bne.n	8007bfe <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8007bc6:	4b3c      	ldr	r3, [pc, #240]	; (8007cb8 <USBD_CUSTOM_HID_Init+0x14c>)
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	f003 020f 	and.w	r2, r3, #15
 8007bce:	6879      	ldr	r1, [r7, #4]
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	4413      	add	r3, r2
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	440b      	add	r3, r1
 8007bda:	3326      	adds	r3, #38	; 0x26
 8007bdc:	2205      	movs	r2, #5
 8007bde:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8007be0:	4b36      	ldr	r3, [pc, #216]	; (8007cbc <USBD_CUSTOM_HID_Init+0x150>)
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	f003 020f 	and.w	r2, r3, #15
 8007be8:	6879      	ldr	r1, [r7, #4]
 8007bea:	4613      	mov	r3, r2
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	4413      	add	r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	440b      	add	r3, r1
 8007bf4:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8007bf8:	2205      	movs	r2, #5
 8007bfa:	801a      	strh	r2, [r3, #0]
 8007bfc:	e01a      	b.n	8007c34 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007bfe:	4b2e      	ldr	r3, [pc, #184]	; (8007cb8 <USBD_CUSTOM_HID_Init+0x14c>)
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	f003 020f 	and.w	r2, r3, #15
 8007c06:	6879      	ldr	r1, [r7, #4]
 8007c08:	4613      	mov	r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4413      	add	r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	440b      	add	r3, r1
 8007c12:	3326      	adds	r3, #38	; 0x26
 8007c14:	2205      	movs	r2, #5
 8007c16:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007c18:	4b28      	ldr	r3, [pc, #160]	; (8007cbc <USBD_CUSTOM_HID_Init+0x150>)
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	f003 020f 	and.w	r2, r3, #15
 8007c20:	6879      	ldr	r1, [r7, #4]
 8007c22:	4613      	mov	r3, r2
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	4413      	add	r3, r2
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	440b      	add	r3, r1
 8007c2c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8007c30:	2205      	movs	r2, #5
 8007c32:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8007c34:	4b20      	ldr	r3, [pc, #128]	; (8007cb8 <USBD_CUSTOM_HID_Init+0x14c>)
 8007c36:	7819      	ldrb	r1, [r3, #0]
 8007c38:	2302      	movs	r3, #2
 8007c3a:	2203      	movs	r2, #3
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f002 fa29 	bl	800a094 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8007c42:	4b1d      	ldr	r3, [pc, #116]	; (8007cb8 <USBD_CUSTOM_HID_Init+0x14c>)
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	f003 020f 	and.w	r2, r3, #15
 8007c4a:	6879      	ldr	r1, [r7, #4]
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4413      	add	r3, r2
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	440b      	add	r3, r1
 8007c56:	3324      	adds	r3, #36	; 0x24
 8007c58:	2201      	movs	r2, #1
 8007c5a:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8007c5c:	4b17      	ldr	r3, [pc, #92]	; (8007cbc <USBD_CUSTOM_HID_Init+0x150>)
 8007c5e:	7819      	ldrb	r1, [r3, #0]
 8007c60:	2302      	movs	r3, #2
 8007c62:	2203      	movs	r2, #3
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f002 fa15 	bl	800a094 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8007c6a:	4b14      	ldr	r3, [pc, #80]	; (8007cbc <USBD_CUSTOM_HID_Init+0x150>)
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	f003 020f 	and.w	r2, r3, #15
 8007c72:	6879      	ldr	r1, [r7, #4]
 8007c74:	4613      	mov	r3, r2
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	4413      	add	r3, r2
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	440b      	add	r3, r1
 8007c7e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c82:	2201      	movs	r2, #1
 8007c84:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	33b0      	adds	r3, #176	; 0xb0
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	4413      	add	r3, r2
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8007ca0:	4b06      	ldr	r3, [pc, #24]	; (8007cbc <USBD_CUSTOM_HID_Init+0x150>)
 8007ca2:	7819      	ldrb	r1, [r3, #0]
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	2304      	movs	r3, #4
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f002 fb6d 	bl	800a388 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3710      	adds	r7, #16
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	20000086 	.word	0x20000086
 8007cbc:	20000087 	.word	0x20000087

08007cc0 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8007ccc:	4b37      	ldr	r3, [pc, #220]	; (8007dac <USBD_CUSTOM_HID_DeInit+0xec>)
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f002 fa1c 	bl	800a110 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8007cd8:	4b34      	ldr	r3, [pc, #208]	; (8007dac <USBD_CUSTOM_HID_DeInit+0xec>)
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	f003 020f 	and.w	r2, r3, #15
 8007ce0:	6879      	ldr	r1, [r7, #4]
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	4413      	add	r3, r2
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	440b      	add	r3, r1
 8007cec:	3324      	adds	r3, #36	; 0x24
 8007cee:	2200      	movs	r2, #0
 8007cf0:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8007cf2:	4b2e      	ldr	r3, [pc, #184]	; (8007dac <USBD_CUSTOM_HID_DeInit+0xec>)
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	f003 020f 	and.w	r2, r3, #15
 8007cfa:	6879      	ldr	r1, [r7, #4]
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	4413      	add	r3, r2
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	440b      	add	r3, r1
 8007d06:	3326      	adds	r3, #38	; 0x26
 8007d08:	2200      	movs	r2, #0
 8007d0a:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8007d0c:	4b28      	ldr	r3, [pc, #160]	; (8007db0 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	4619      	mov	r1, r3
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f002 f9fc 	bl	800a110 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8007d18:	4b25      	ldr	r3, [pc, #148]	; (8007db0 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	f003 020f 	and.w	r2, r3, #15
 8007d20:	6879      	ldr	r1, [r7, #4]
 8007d22:	4613      	mov	r3, r2
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	4413      	add	r3, r2
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	440b      	add	r3, r1
 8007d2c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007d30:	2200      	movs	r2, #0
 8007d32:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8007d34:	4b1e      	ldr	r3, [pc, #120]	; (8007db0 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	f003 020f 	and.w	r2, r3, #15
 8007d3c:	6879      	ldr	r1, [r7, #4]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	4413      	add	r3, r2
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	440b      	add	r3, r1
 8007d48:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	32b0      	adds	r2, #176	; 0xb0
 8007d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d01f      	beq.n	8007da2 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	33b0      	adds	r3, #176	; 0xb0
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	4413      	add	r3, r2
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	32b0      	adds	r2, #176	; 0xb0
 8007d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d84:	4618      	mov	r0, r3
 8007d86:	f002 fb93 	bl	800a4b0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	32b0      	adds	r2, #176	; 0xb0
 8007d94:	2100      	movs	r1, #0
 8007d96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3708      	adds	r7, #8
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	20000086 	.word	0x20000086
 8007db0:	20000087 	.word	0x20000087

08007db4 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b088      	sub	sp, #32
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	32b0      	adds	r2, #176	; 0xb0
 8007dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dcc:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d101      	bne.n	8007de8 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8007de4:	2303      	movs	r3, #3
 8007de6:	e0f8      	b.n	8007fda <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d056      	beq.n	8007ea2 <USBD_CUSTOM_HID_Setup+0xee>
 8007df4:	2b20      	cmp	r3, #32
 8007df6:	f040 80e8 	bne.w	8007fca <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	785b      	ldrb	r3, [r3, #1]
 8007dfe:	3b02      	subs	r3, #2
 8007e00:	2b09      	cmp	r3, #9
 8007e02:	d846      	bhi.n	8007e92 <USBD_CUSTOM_HID_Setup+0xde>
 8007e04:	a201      	add	r2, pc, #4	; (adr r2, 8007e0c <USBD_CUSTOM_HID_Setup+0x58>)
 8007e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e0a:	bf00      	nop
 8007e0c:	08007e65 	.word	0x08007e65
 8007e10:	08007e43 	.word	0x08007e43
 8007e14:	08007e93 	.word	0x08007e93
 8007e18:	08007e93 	.word	0x08007e93
 8007e1c:	08007e93 	.word	0x08007e93
 8007e20:	08007e93 	.word	0x08007e93
 8007e24:	08007e93 	.word	0x08007e93
 8007e28:	08007e75 	.word	0x08007e75
 8007e2c:	08007e53 	.word	0x08007e53
 8007e30:	08007e35 	.word	0x08007e35
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	885b      	ldrh	r3, [r3, #2]
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	605a      	str	r2, [r3, #4]
          break;
 8007e40:	e02e      	b.n	8007ea0 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	3304      	adds	r3, #4
 8007e46:	2201      	movs	r2, #1
 8007e48:	4619      	mov	r1, r3
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f001 fcf6 	bl	800983c <USBD_CtlSendData>
          break;
 8007e50:	e026      	b.n	8007ea0 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	885b      	ldrh	r3, [r3, #2]
 8007e56:	0a1b      	lsrs	r3, r3, #8
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	609a      	str	r2, [r3, #8]
          break;
 8007e62:	e01d      	b.n	8007ea0 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	3308      	adds	r3, #8
 8007e68:	2201      	movs	r2, #1
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f001 fce5 	bl	800983c <USBD_CtlSendData>
          break;
 8007e72:	e015      	b.n	8007ea0 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	2201      	movs	r2, #1
 8007e78:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8007e7a:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	88db      	ldrh	r3, [r3, #6]
 8007e80:	2b04      	cmp	r3, #4
 8007e82:	bf28      	it	cs
 8007e84:	2304      	movcs	r3, #4
 8007e86:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8007e88:	461a      	mov	r2, r3
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f001 fd02 	bl	8009894 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8007e90:	e006      	b.n	8007ea0 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8007e92:	6839      	ldr	r1, [r7, #0]
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f001 fc60 	bl	800975a <USBD_CtlError>
          ret = USBD_FAIL;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	75fb      	strb	r3, [r7, #23]
          break;
 8007e9e:	bf00      	nop
      }
      break;
 8007ea0:	e09a      	b.n	8007fd8 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	785b      	ldrb	r3, [r3, #1]
 8007ea6:	2b0b      	cmp	r3, #11
 8007ea8:	f200 8086 	bhi.w	8007fb8 <USBD_CUSTOM_HID_Setup+0x204>
 8007eac:	a201      	add	r2, pc, #4	; (adr r2, 8007eb4 <USBD_CUSTOM_HID_Setup+0x100>)
 8007eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb2:	bf00      	nop
 8007eb4:	08007ee5 	.word	0x08007ee5
 8007eb8:	08007fc7 	.word	0x08007fc7
 8007ebc:	08007fb9 	.word	0x08007fb9
 8007ec0:	08007fb9 	.word	0x08007fb9
 8007ec4:	08007fb9 	.word	0x08007fb9
 8007ec8:	08007fb9 	.word	0x08007fb9
 8007ecc:	08007f0f 	.word	0x08007f0f
 8007ed0:	08007fb9 	.word	0x08007fb9
 8007ed4:	08007fb9 	.word	0x08007fb9
 8007ed8:	08007fb9 	.word	0x08007fb9
 8007edc:	08007f67 	.word	0x08007f67
 8007ee0:	08007f91 	.word	0x08007f91
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	2b03      	cmp	r3, #3
 8007eee:	d107      	bne.n	8007f00 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007ef0:	f107 030e 	add.w	r3, r7, #14
 8007ef4:	2202      	movs	r2, #2
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f001 fc9f 	bl	800983c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007efe:	e063      	b.n	8007fc8 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8007f00:	6839      	ldr	r1, [r7, #0]
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f001 fc29 	bl	800975a <USBD_CtlError>
            ret = USBD_FAIL;
 8007f08:	2303      	movs	r3, #3
 8007f0a:	75fb      	strb	r3, [r7, #23]
          break;
 8007f0c:	e05c      	b.n	8007fc8 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	885b      	ldrh	r3, [r3, #2]
 8007f12:	0a1b      	lsrs	r3, r3, #8
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	2b22      	cmp	r3, #34	; 0x22
 8007f18:	d110      	bne.n	8007f3c <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	88db      	ldrh	r3, [r3, #6]
 8007f1e:	2b32      	cmp	r3, #50	; 0x32
 8007f20:	bf28      	it	cs
 8007f22:	2332      	movcs	r3, #50	; 0x32
 8007f24:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	33b0      	adds	r3, #176	; 0xb0
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	4413      	add	r3, r2
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	61bb      	str	r3, [r7, #24]
 8007f3a:	e00d      	b.n	8007f58 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	885b      	ldrh	r3, [r3, #2]
 8007f40:	0a1b      	lsrs	r3, r3, #8
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	2b21      	cmp	r3, #33	; 0x21
 8007f46:	d107      	bne.n	8007f58 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8007f48:	4b26      	ldr	r3, [pc, #152]	; (8007fe4 <USBD_CUSTOM_HID_Setup+0x230>)
 8007f4a:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	88db      	ldrh	r3, [r3, #6]
 8007f50:	2b09      	cmp	r3, #9
 8007f52:	bf28      	it	cs
 8007f54:	2309      	movcs	r3, #9
 8007f56:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f58:	8bfb      	ldrh	r3, [r7, #30]
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	69b9      	ldr	r1, [r7, #24]
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f001 fc6c 	bl	800983c <USBD_CtlSendData>
          break;
 8007f64:	e030      	b.n	8007fc8 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	2b03      	cmp	r3, #3
 8007f70:	d107      	bne.n	8007f82 <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	330c      	adds	r3, #12
 8007f76:	2201      	movs	r2, #1
 8007f78:	4619      	mov	r1, r3
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f001 fc5e 	bl	800983c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f80:	e022      	b.n	8007fc8 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8007f82:	6839      	ldr	r1, [r7, #0]
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f001 fbe8 	bl	800975a <USBD_CtlError>
            ret = USBD_FAIL;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	75fb      	strb	r3, [r7, #23]
          break;
 8007f8e:	e01b      	b.n	8007fc8 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	2b03      	cmp	r3, #3
 8007f9a:	d106      	bne.n	8007faa <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	885b      	ldrh	r3, [r3, #2]
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007fa8:	e00e      	b.n	8007fc8 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8007faa:	6839      	ldr	r1, [r7, #0]
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f001 fbd4 	bl	800975a <USBD_CtlError>
            ret = USBD_FAIL;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	75fb      	strb	r3, [r7, #23]
          break;
 8007fb6:	e007      	b.n	8007fc8 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007fb8:	6839      	ldr	r1, [r7, #0]
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f001 fbcd 	bl	800975a <USBD_CtlError>
          ret = USBD_FAIL;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	75fb      	strb	r3, [r7, #23]
          break;
 8007fc4:	e000      	b.n	8007fc8 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8007fc6:	bf00      	nop
      }
      break;
 8007fc8:	e006      	b.n	8007fd8 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8007fca:	6839      	ldr	r1, [r7, #0]
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f001 fbc4 	bl	800975a <USBD_CtlError>
      ret = USBD_FAIL;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	75fb      	strb	r3, [r7, #23]
      break;
 8007fd6:	bf00      	nop
  }
  return (uint8_t)ret;
 8007fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3720      	adds	r7, #32
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	20000070 	.word	0x20000070

08007fe8 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b086      	sub	sp, #24
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	32b0      	adds	r2, #176	; 0xb0
 8008000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008004:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d101      	bne.n	8008010 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800800c:	2303      	movs	r3, #3
 800800e:	e017      	b.n	8008040 <USBD_CUSTOM_HID_SendReport+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008016:	b2db      	uxtb	r3, r3
 8008018:	2b03      	cmp	r3, #3
 800801a:	d110      	bne.n	800803e <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	7d1b      	ldrb	r3, [r3, #20]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d10a      	bne.n	800803a <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	2201      	movs	r2, #1
 8008028:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 800802a:	4b07      	ldr	r3, [pc, #28]	; (8008048 <USBD_CUSTOM_HID_SendReport+0x60>)
 800802c:	7819      	ldrb	r1, [r3, #0]
 800802e:	88fb      	ldrh	r3, [r7, #6]
 8008030:	68ba      	ldr	r2, [r7, #8]
 8008032:	68f8      	ldr	r0, [r7, #12]
 8008034:	f002 f970 	bl	800a318 <USBD_LL_Transmit>
 8008038:	e001      	b.n	800803e <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 800803a:	2301      	movs	r3, #1
 800803c:	e000      	b.n	8008040 <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3718      	adds	r7, #24
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	20000086 	.word	0x20000086

0800804c <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008054:	2181      	movs	r1, #129	; 0x81
 8008056:	4815      	ldr	r0, [pc, #84]	; (80080ac <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8008058:	f000 fd1d 	bl	8008a96 <USBD_GetEpDesc>
 800805c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800805e:	2101      	movs	r1, #1
 8008060:	4812      	ldr	r0, [pc, #72]	; (80080ac <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8008062:	f000 fd18 	bl	8008a96 <USBD_GetEpDesc>
 8008066:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d009      	beq.n	8008082 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2200      	movs	r2, #0
 8008072:	f042 0202 	orr.w	r2, r2, #2
 8008076:	711a      	strb	r2, [r3, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2205      	movs	r2, #5
 8008080:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d009      	beq.n	800809c <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	2200      	movs	r2, #0
 800808c:	f042 0202 	orr.w	r2, r2, #2
 8008090:	711a      	strb	r2, [r3, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	2205      	movs	r2, #5
 800809a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2229      	movs	r2, #41	; 0x29
 80080a0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80080a2:	4b02      	ldr	r3, [pc, #8]	; (80080ac <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3710      	adds	r7, #16
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	20000044 	.word	0x20000044

080080b0 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80080b8:	2181      	movs	r1, #129	; 0x81
 80080ba:	4815      	ldr	r0, [pc, #84]	; (8008110 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 80080bc:	f000 fceb 	bl	8008a96 <USBD_GetEpDesc>
 80080c0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80080c2:	2101      	movs	r1, #1
 80080c4:	4812      	ldr	r0, [pc, #72]	; (8008110 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 80080c6:	f000 fce6 	bl	8008a96 <USBD_GetEpDesc>
 80080ca:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d009      	beq.n	80080e6 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f042 0202 	orr.w	r2, r2, #2
 80080da:	711a      	strb	r2, [r3, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2205      	movs	r2, #5
 80080e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d009      	beq.n	8008100 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f042 0202 	orr.w	r2, r2, #2
 80080f4:	711a      	strb	r2, [r3, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	2205      	movs	r2, #5
 80080fe:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2229      	movs	r2, #41	; 0x29
 8008104:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008106:	4b02      	ldr	r3, [pc, #8]	; (8008110 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8008108:	4618      	mov	r0, r3
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	20000044 	.word	0x20000044

08008114 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800811c:	2181      	movs	r1, #129	; 0x81
 800811e:	4815      	ldr	r0, [pc, #84]	; (8008174 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8008120:	f000 fcb9 	bl	8008a96 <USBD_GetEpDesc>
 8008124:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008126:	2101      	movs	r1, #1
 8008128:	4812      	ldr	r0, [pc, #72]	; (8008174 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 800812a:	f000 fcb4 	bl	8008a96 <USBD_GetEpDesc>
 800812e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d009      	beq.n	800814a <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2200      	movs	r2, #0
 800813a:	f042 0202 	orr.w	r2, r2, #2
 800813e:	711a      	strb	r2, [r3, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2205      	movs	r2, #5
 8008148:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d009      	beq.n	8008164 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	2200      	movs	r2, #0
 8008154:	f042 0202 	orr.w	r2, r2, #2
 8008158:	711a      	strb	r2, [r3, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	2205      	movs	r2, #5
 8008162:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2229      	movs	r2, #41	; 0x29
 8008168:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800816a:	4b02      	ldr	r3, [pc, #8]	; (8008174 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 800816c:	4618      	mov	r0, r3
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	20000044 	.word	0x20000044

08008178 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	460b      	mov	r3, r1
 8008182:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	32b0      	adds	r2, #176	; 0xb0
 800818e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008192:	2200      	movs	r2, #0
 8008194:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	460b      	mov	r3, r1
 80081ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	32b0      	adds	r2, #176	; 0xb0
 80081ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d101      	bne.n	80081c6 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80081c2:	2303      	movs	r3, #3
 80081c4:	e017      	b.n	80081f6 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	32b0      	adds	r2, #176	; 0xb0
 80081d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081d4:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	33b0      	adds	r3, #176	; 0xb0
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4413      	add	r3, r2
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	7810      	ldrb	r0, [r2, #0]
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	7852      	ldrb	r2, [r2, #1]
 80081f0:	4611      	mov	r1, r2
 80081f2:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
	...

08008200 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	32b0      	adds	r2, #176	; 0xb0
 8008212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d101      	bne.n	800821e <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800821a:	2303      	movs	r3, #3
 800821c:	e00f      	b.n	800823e <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	32b0      	adds	r2, #176	; 0xb0
 8008228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800822c:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800822e:	4b06      	ldr	r3, [pc, #24]	; (8008248 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8008230:	7819      	ldrb	r1, [r3, #0]
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	2304      	movs	r3, #4
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f002 f8a6 	bl	800a388 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	20000087 	.word	0x20000087

0800824c <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	32b0      	adds	r2, #176	; 0xb0
 800825e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008262:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d101      	bne.n	800826e <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800826a:	2303      	movs	r3, #3
 800826c:	e016      	b.n	800829c <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	691b      	ldr	r3, [r3, #16]
 8008272:	2b01      	cmp	r3, #1
 8008274:	d111      	bne.n	800829a <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	33b0      	adds	r3, #176	; 0xb0
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	4413      	add	r3, r2
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	7810      	ldrb	r0, [r2, #0]
 800828c:	68fa      	ldr	r2, [r7, #12]
 800828e:	7852      	ldrb	r2, [r2, #1]
 8008290:	4611      	mov	r1, r2
 8008292:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2200      	movs	r2, #0
 8008298:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	220a      	movs	r2, #10
 80082b0:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80082b2:	4b03      	ldr	r3, [pc, #12]	; (80082c0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr
 80082c0:	2000007c 	.word	0x2000007c

080082c4 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d101      	bne.n	80082d8 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80082d4:	2303      	movs	r3, #3
 80082d6:	e009      	b.n	80082ec <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	33b0      	adds	r3, #176	; 0xb0
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	4413      	add	r3, r2
 80082e6:	683a      	ldr	r2, [r7, #0]
 80082e8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	370c      	adds	r7, #12
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b086      	sub	sp, #24
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	4613      	mov	r3, r2
 8008304:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d101      	bne.n	8008310 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800830c:	2303      	movs	r3, #3
 800830e:	e01f      	b.n	8008350 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2200      	movs	r2, #0
 800831c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2200      	movs	r2, #0
 8008324:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d003      	beq.n	8008336 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	68ba      	ldr	r2, [r7, #8]
 8008332:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2201      	movs	r2, #1
 800833a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	79fa      	ldrb	r2, [r7, #7]
 8008342:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	f001 fe27 	bl	8009f98 <USBD_LL_Init>
 800834a:	4603      	mov	r3, r0
 800834c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800834e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008350:	4618      	mov	r0, r3
 8008352:	3718      	adds	r7, #24
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008362:	2300      	movs	r3, #0
 8008364:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d101      	bne.n	8008370 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800836c:	2303      	movs	r3, #3
 800836e:	e025      	b.n	80083bc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	683a      	ldr	r2, [r7, #0]
 8008374:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	32ae      	adds	r2, #174	; 0xae
 8008382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00f      	beq.n	80083ac <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	32ae      	adds	r2, #174	; 0xae
 8008396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800839a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800839c:	f107 020e 	add.w	r2, r7, #14
 80083a0:	4610      	mov	r0, r2
 80083a2:	4798      	blx	r3
 80083a4:	4602      	mov	r2, r0
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80083b2:	1c5a      	adds	r2, r3, #1
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3710      	adds	r7, #16
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f001 fe2f 	bl	800a030 <USBD_LL_Start>
 80083d2:	4603      	mov	r3, r0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3708      	adds	r7, #8
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80083e4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	370c      	adds	r7, #12
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b084      	sub	sp, #16
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
 80083fa:	460b      	mov	r3, r1
 80083fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80083fe:	2300      	movs	r3, #0
 8008400:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008408:	2b00      	cmp	r3, #0
 800840a:	d009      	beq.n	8008420 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	78fa      	ldrb	r2, [r7, #3]
 8008416:	4611      	mov	r1, r2
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	4798      	blx	r3
 800841c:	4603      	mov	r3, r0
 800841e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008420:	7bfb      	ldrb	r3, [r7, #15]
}
 8008422:	4618      	mov	r0, r3
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b084      	sub	sp, #16
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
 8008432:	460b      	mov	r3, r1
 8008434:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008436:	2300      	movs	r3, #0
 8008438:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	78fa      	ldrb	r2, [r7, #3]
 8008444:	4611      	mov	r1, r2
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	4798      	blx	r3
 800844a:	4603      	mov	r3, r0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d001      	beq.n	8008454 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008450:	2303      	movs	r3, #3
 8008452:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008454:	7bfb      	ldrb	r3, [r7, #15]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800845e:	b580      	push	{r7, lr}
 8008460:	b084      	sub	sp, #16
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
 8008466:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800846e:	6839      	ldr	r1, [r7, #0]
 8008470:	4618      	mov	r0, r3
 8008472:	f001 f938 	bl	80096e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2201      	movs	r2, #1
 800847a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008484:	461a      	mov	r2, r3
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008492:	f003 031f 	and.w	r3, r3, #31
 8008496:	2b02      	cmp	r3, #2
 8008498:	d01a      	beq.n	80084d0 <USBD_LL_SetupStage+0x72>
 800849a:	2b02      	cmp	r3, #2
 800849c:	d822      	bhi.n	80084e4 <USBD_LL_SetupStage+0x86>
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d002      	beq.n	80084a8 <USBD_LL_SetupStage+0x4a>
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d00a      	beq.n	80084bc <USBD_LL_SetupStage+0x5e>
 80084a6:	e01d      	b.n	80084e4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80084ae:	4619      	mov	r1, r3
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 fb65 	bl	8008b80 <USBD_StdDevReq>
 80084b6:	4603      	mov	r3, r0
 80084b8:	73fb      	strb	r3, [r7, #15]
      break;
 80084ba:	e020      	b.n	80084fe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80084c2:	4619      	mov	r1, r3
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 fbcd 	bl	8008c64 <USBD_StdItfReq>
 80084ca:	4603      	mov	r3, r0
 80084cc:	73fb      	strb	r3, [r7, #15]
      break;
 80084ce:	e016      	b.n	80084fe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80084d6:	4619      	mov	r1, r3
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 fc2f 	bl	8008d3c <USBD_StdEPReq>
 80084de:	4603      	mov	r3, r0
 80084e0:	73fb      	strb	r3, [r7, #15]
      break;
 80084e2:	e00c      	b.n	80084fe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80084ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	4619      	mov	r1, r3
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f001 fe42 	bl	800a17c <USBD_LL_StallEP>
 80084f8:	4603      	mov	r3, r0
 80084fa:	73fb      	strb	r3, [r7, #15]
      break;
 80084fc:	bf00      	nop
  }

  return ret;
 80084fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008500:	4618      	mov	r0, r3
 8008502:	3710      	adds	r7, #16
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b086      	sub	sp, #24
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	460b      	mov	r3, r1
 8008512:	607a      	str	r2, [r7, #4]
 8008514:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008516:	2300      	movs	r3, #0
 8008518:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800851a:	7afb      	ldrb	r3, [r7, #11]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d16e      	bne.n	80085fe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008526:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800852e:	2b03      	cmp	r3, #3
 8008530:	f040 8098 	bne.w	8008664 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	689a      	ldr	r2, [r3, #8]
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	429a      	cmp	r2, r3
 800853e:	d913      	bls.n	8008568 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	689a      	ldr	r2, [r3, #8]
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	1ad2      	subs	r2, r2, r3
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	68da      	ldr	r2, [r3, #12]
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	4293      	cmp	r3, r2
 8008558:	bf28      	it	cs
 800855a:	4613      	movcs	r3, r2
 800855c:	461a      	mov	r2, r3
 800855e:	6879      	ldr	r1, [r7, #4]
 8008560:	68f8      	ldr	r0, [r7, #12]
 8008562:	f001 f9b4 	bl	80098ce <USBD_CtlContinueRx>
 8008566:	e07d      	b.n	8008664 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800856e:	f003 031f 	and.w	r3, r3, #31
 8008572:	2b02      	cmp	r3, #2
 8008574:	d014      	beq.n	80085a0 <USBD_LL_DataOutStage+0x98>
 8008576:	2b02      	cmp	r3, #2
 8008578:	d81d      	bhi.n	80085b6 <USBD_LL_DataOutStage+0xae>
 800857a:	2b00      	cmp	r3, #0
 800857c:	d002      	beq.n	8008584 <USBD_LL_DataOutStage+0x7c>
 800857e:	2b01      	cmp	r3, #1
 8008580:	d003      	beq.n	800858a <USBD_LL_DataOutStage+0x82>
 8008582:	e018      	b.n	80085b6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008584:	2300      	movs	r3, #0
 8008586:	75bb      	strb	r3, [r7, #22]
            break;
 8008588:	e018      	b.n	80085bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008590:	b2db      	uxtb	r3, r3
 8008592:	4619      	mov	r1, r3
 8008594:	68f8      	ldr	r0, [r7, #12]
 8008596:	f000 fa64 	bl	8008a62 <USBD_CoreFindIF>
 800859a:	4603      	mov	r3, r0
 800859c:	75bb      	strb	r3, [r7, #22]
            break;
 800859e:	e00d      	b.n	80085bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	4619      	mov	r1, r3
 80085aa:	68f8      	ldr	r0, [r7, #12]
 80085ac:	f000 fa66 	bl	8008a7c <USBD_CoreFindEP>
 80085b0:	4603      	mov	r3, r0
 80085b2:	75bb      	strb	r3, [r7, #22]
            break;
 80085b4:	e002      	b.n	80085bc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80085b6:	2300      	movs	r3, #0
 80085b8:	75bb      	strb	r3, [r7, #22]
            break;
 80085ba:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80085bc:	7dbb      	ldrb	r3, [r7, #22]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d119      	bne.n	80085f6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	2b03      	cmp	r3, #3
 80085cc:	d113      	bne.n	80085f6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80085ce:	7dba      	ldrb	r2, [r7, #22]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	32ae      	adds	r2, #174	; 0xae
 80085d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00b      	beq.n	80085f6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80085de:	7dba      	ldrb	r2, [r7, #22]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80085e6:	7dba      	ldrb	r2, [r7, #22]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	32ae      	adds	r2, #174	; 0xae
 80085ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	68f8      	ldr	r0, [r7, #12]
 80085f4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	f001 f97a 	bl	80098f0 <USBD_CtlSendStatus>
 80085fc:	e032      	b.n	8008664 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80085fe:	7afb      	ldrb	r3, [r7, #11]
 8008600:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008604:	b2db      	uxtb	r3, r3
 8008606:	4619      	mov	r1, r3
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f000 fa37 	bl	8008a7c <USBD_CoreFindEP>
 800860e:	4603      	mov	r3, r0
 8008610:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008612:	7dbb      	ldrb	r3, [r7, #22]
 8008614:	2bff      	cmp	r3, #255	; 0xff
 8008616:	d025      	beq.n	8008664 <USBD_LL_DataOutStage+0x15c>
 8008618:	7dbb      	ldrb	r3, [r7, #22]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d122      	bne.n	8008664 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008624:	b2db      	uxtb	r3, r3
 8008626:	2b03      	cmp	r3, #3
 8008628:	d117      	bne.n	800865a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800862a:	7dba      	ldrb	r2, [r7, #22]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	32ae      	adds	r2, #174	; 0xae
 8008630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008634:	699b      	ldr	r3, [r3, #24]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00f      	beq.n	800865a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800863a:	7dba      	ldrb	r2, [r7, #22]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008642:	7dba      	ldrb	r2, [r7, #22]
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	32ae      	adds	r2, #174	; 0xae
 8008648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800864c:	699b      	ldr	r3, [r3, #24]
 800864e:	7afa      	ldrb	r2, [r7, #11]
 8008650:	4611      	mov	r1, r2
 8008652:	68f8      	ldr	r0, [r7, #12]
 8008654:	4798      	blx	r3
 8008656:	4603      	mov	r3, r0
 8008658:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800865a:	7dfb      	ldrb	r3, [r7, #23]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d001      	beq.n	8008664 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008660:	7dfb      	ldrb	r3, [r7, #23]
 8008662:	e000      	b.n	8008666 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	3718      	adds	r7, #24
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b086      	sub	sp, #24
 8008672:	af00      	add	r7, sp, #0
 8008674:	60f8      	str	r0, [r7, #12]
 8008676:	460b      	mov	r3, r1
 8008678:	607a      	str	r2, [r7, #4]
 800867a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800867c:	7afb      	ldrb	r3, [r7, #11]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d16f      	bne.n	8008762 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	3314      	adds	r3, #20
 8008686:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800868e:	2b02      	cmp	r3, #2
 8008690:	d15a      	bne.n	8008748 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	689a      	ldr	r2, [r3, #8]
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	429a      	cmp	r2, r3
 800869c:	d914      	bls.n	80086c8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	689a      	ldr	r2, [r3, #8]
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	1ad2      	subs	r2, r2, r3
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	461a      	mov	r2, r3
 80086b2:	6879      	ldr	r1, [r7, #4]
 80086b4:	68f8      	ldr	r0, [r7, #12]
 80086b6:	f001 f8dc 	bl	8009872 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086ba:	2300      	movs	r3, #0
 80086bc:	2200      	movs	r2, #0
 80086be:	2100      	movs	r1, #0
 80086c0:	68f8      	ldr	r0, [r7, #12]
 80086c2:	f001 fe61 	bl	800a388 <USBD_LL_PrepareReceive>
 80086c6:	e03f      	b.n	8008748 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	68da      	ldr	r2, [r3, #12]
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d11c      	bne.n	800870e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	685a      	ldr	r2, [r3, #4]
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80086dc:	429a      	cmp	r2, r3
 80086de:	d316      	bcc.n	800870e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	685a      	ldr	r2, [r3, #4]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d20f      	bcs.n	800870e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80086ee:	2200      	movs	r2, #0
 80086f0:	2100      	movs	r1, #0
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f001 f8bd 	bl	8009872 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008700:	2300      	movs	r3, #0
 8008702:	2200      	movs	r2, #0
 8008704:	2100      	movs	r1, #0
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	f001 fe3e 	bl	800a388 <USBD_LL_PrepareReceive>
 800870c:	e01c      	b.n	8008748 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008714:	b2db      	uxtb	r3, r3
 8008716:	2b03      	cmp	r3, #3
 8008718:	d10f      	bne.n	800873a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d009      	beq.n	800873a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2200      	movs	r2, #0
 800872a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	68f8      	ldr	r0, [r7, #12]
 8008738:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800873a:	2180      	movs	r1, #128	; 0x80
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f001 fd1d 	bl	800a17c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008742:	68f8      	ldr	r0, [r7, #12]
 8008744:	f001 f8e7 	bl	8009916 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800874e:	2b00      	cmp	r3, #0
 8008750:	d03a      	beq.n	80087c8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008752:	68f8      	ldr	r0, [r7, #12]
 8008754:	f7ff fe42 	bl	80083dc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008760:	e032      	b.n	80087c8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008762:	7afb      	ldrb	r3, [r7, #11]
 8008764:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008768:	b2db      	uxtb	r3, r3
 800876a:	4619      	mov	r1, r3
 800876c:	68f8      	ldr	r0, [r7, #12]
 800876e:	f000 f985 	bl	8008a7c <USBD_CoreFindEP>
 8008772:	4603      	mov	r3, r0
 8008774:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008776:	7dfb      	ldrb	r3, [r7, #23]
 8008778:	2bff      	cmp	r3, #255	; 0xff
 800877a:	d025      	beq.n	80087c8 <USBD_LL_DataInStage+0x15a>
 800877c:	7dfb      	ldrb	r3, [r7, #23]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d122      	bne.n	80087c8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008788:	b2db      	uxtb	r3, r3
 800878a:	2b03      	cmp	r3, #3
 800878c:	d11c      	bne.n	80087c8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800878e:	7dfa      	ldrb	r2, [r7, #23]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	32ae      	adds	r2, #174	; 0xae
 8008794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008798:	695b      	ldr	r3, [r3, #20]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d014      	beq.n	80087c8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800879e:	7dfa      	ldrb	r2, [r7, #23]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80087a6:	7dfa      	ldrb	r2, [r7, #23]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	32ae      	adds	r2, #174	; 0xae
 80087ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087b0:	695b      	ldr	r3, [r3, #20]
 80087b2:	7afa      	ldrb	r2, [r7, #11]
 80087b4:	4611      	mov	r1, r2
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	4798      	blx	r3
 80087ba:	4603      	mov	r3, r0
 80087bc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80087be:	7dbb      	ldrb	r3, [r7, #22]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d001      	beq.n	80087c8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80087c4:	7dbb      	ldrb	r3, [r7, #22]
 80087c6:	e000      	b.n	80087ca <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80087c8:	2300      	movs	r3, #0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3718      	adds	r7, #24
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}

080087d2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b084      	sub	sp, #16
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80087da:	2300      	movs	r3, #0
 80087dc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2201      	movs	r2, #1
 80087e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800880a:	2b00      	cmp	r3, #0
 800880c:	d014      	beq.n	8008838 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00e      	beq.n	8008838 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	6852      	ldr	r2, [r2, #4]
 8008826:	b2d2      	uxtb	r2, r2
 8008828:	4611      	mov	r1, r2
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	4798      	blx	r3
 800882e:	4603      	mov	r3, r0
 8008830:	2b00      	cmp	r3, #0
 8008832:	d001      	beq.n	8008838 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008834:	2303      	movs	r3, #3
 8008836:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008838:	2340      	movs	r3, #64	; 0x40
 800883a:	2200      	movs	r2, #0
 800883c:	2100      	movs	r1, #0
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f001 fc28 	bl	800a094 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2201      	movs	r2, #1
 8008848:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2240      	movs	r2, #64	; 0x40
 8008850:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008854:	2340      	movs	r3, #64	; 0x40
 8008856:	2200      	movs	r2, #0
 8008858:	2180      	movs	r1, #128	; 0x80
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f001 fc1a 	bl	800a094 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2240      	movs	r2, #64	; 0x40
 800886a:	621a      	str	r2, [r3, #32]

  return ret;
 800886c:	7bfb      	ldrb	r3, [r7, #15]
}
 800886e:	4618      	mov	r0, r3
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008876:	b480      	push	{r7}
 8008878:	b083      	sub	sp, #12
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
 800887e:	460b      	mov	r3, r1
 8008880:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	78fa      	ldrb	r2, [r7, #3]
 8008886:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	370c      	adds	r7, #12
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr

08008896 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008896:	b480      	push	{r7}
 8008898:	b083      	sub	sp, #12
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	2b04      	cmp	r3, #4
 80088a8:	d006      	beq.n	80088b8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088b0:	b2da      	uxtb	r2, r3
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2204      	movs	r2, #4
 80088bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	370c      	adds	r7, #12
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr

080088ce <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80088ce:	b480      	push	{r7}
 80088d0:	b083      	sub	sp, #12
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	2b04      	cmp	r3, #4
 80088e0:	d106      	bne.n	80088f0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80088e8:	b2da      	uxtb	r2, r3
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	370c      	adds	r7, #12
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr

080088fe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b082      	sub	sp, #8
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800890c:	b2db      	uxtb	r3, r3
 800890e:	2b03      	cmp	r3, #3
 8008910:	d110      	bne.n	8008934 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008918:	2b00      	cmp	r3, #0
 800891a:	d00b      	beq.n	8008934 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008922:	69db      	ldr	r3, [r3, #28]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d005      	beq.n	8008934 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800892e:	69db      	ldr	r3, [r3, #28]
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	3708      	adds	r7, #8
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800893e:	b580      	push	{r7, lr}
 8008940:	b082      	sub	sp, #8
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
 8008946:	460b      	mov	r3, r1
 8008948:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	32ae      	adds	r2, #174	; 0xae
 8008954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d101      	bne.n	8008960 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800895c:	2303      	movs	r3, #3
 800895e:	e01c      	b.n	800899a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008966:	b2db      	uxtb	r3, r3
 8008968:	2b03      	cmp	r3, #3
 800896a:	d115      	bne.n	8008998 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	32ae      	adds	r2, #174	; 0xae
 8008976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800897a:	6a1b      	ldr	r3, [r3, #32]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d00b      	beq.n	8008998 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	32ae      	adds	r2, #174	; 0xae
 800898a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800898e:	6a1b      	ldr	r3, [r3, #32]
 8008990:	78fa      	ldrb	r2, [r7, #3]
 8008992:	4611      	mov	r1, r2
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008998:	2300      	movs	r3, #0
}
 800899a:	4618      	mov	r0, r3
 800899c:	3708      	adds	r7, #8
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b082      	sub	sp, #8
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
 80089aa:	460b      	mov	r3, r1
 80089ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	32ae      	adds	r2, #174	; 0xae
 80089b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d101      	bne.n	80089c4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80089c0:	2303      	movs	r3, #3
 80089c2:	e01c      	b.n	80089fe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	2b03      	cmp	r3, #3
 80089ce:	d115      	bne.n	80089fc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	32ae      	adds	r2, #174	; 0xae
 80089da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d00b      	beq.n	80089fc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	32ae      	adds	r2, #174	; 0xae
 80089ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f4:	78fa      	ldrb	r2, [r7, #3]
 80089f6:	4611      	mov	r1, r2
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3708      	adds	r7, #8
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}

08008a06 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008a06:	b480      	push	{r7}
 8008a08:	b083      	sub	sp, #12
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008a0e:	2300      	movs	r3, #0
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008a24:	2300      	movs	r3, #0
 8008a26:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d00e      	beq.n	8008a58 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	6852      	ldr	r2, [r2, #4]
 8008a46:	b2d2      	uxtb	r2, r2
 8008a48:	4611      	mov	r1, r2
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	4798      	blx	r3
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d001      	beq.n	8008a58 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008a54:	2303      	movs	r3, #3
 8008a56:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3710      	adds	r7, #16
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}

08008a62 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008a62:	b480      	push	{r7}
 8008a64:	b083      	sub	sp, #12
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
 8008a6a:	460b      	mov	r3, r1
 8008a6c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008a6e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	460b      	mov	r3, r1
 8008a86:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008a88:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	370c      	adds	r7, #12
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr

08008a96 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008a96:	b580      	push	{r7, lr}
 8008a98:	b086      	sub	sp, #24
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	885b      	ldrh	r3, [r3, #2]
 8008ab2:	b29a      	uxth	r2, r3
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d920      	bls.n	8008b00 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008ac6:	e013      	b.n	8008af0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008ac8:	f107 030a 	add.w	r3, r7, #10
 8008acc:	4619      	mov	r1, r3
 8008ace:	6978      	ldr	r0, [r7, #20]
 8008ad0:	f000 f81b 	bl	8008b0a <USBD_GetNextDesc>
 8008ad4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	785b      	ldrb	r3, [r3, #1]
 8008ada:	2b05      	cmp	r3, #5
 8008adc:	d108      	bne.n	8008af0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	789b      	ldrb	r3, [r3, #2]
 8008ae6:	78fa      	ldrb	r2, [r7, #3]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d008      	beq.n	8008afe <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008aec:	2300      	movs	r3, #0
 8008aee:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	885b      	ldrh	r3, [r3, #2]
 8008af4:	b29a      	uxth	r2, r3
 8008af6:	897b      	ldrh	r3, [r7, #10]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d8e5      	bhi.n	8008ac8 <USBD_GetEpDesc+0x32>
 8008afc:	e000      	b.n	8008b00 <USBD_GetEpDesc+0x6a>
          break;
 8008afe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008b00:	693b      	ldr	r3, [r7, #16]
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3718      	adds	r7, #24
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008b0a:	b480      	push	{r7}
 8008b0c:	b085      	sub	sp, #20
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	881a      	ldrh	r2, [r3, #0]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	4413      	add	r3, r2
 8008b24:	b29a      	uxth	r2, r3
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	461a      	mov	r2, r3
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4413      	add	r3, r2
 8008b34:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008b36:	68fb      	ldr	r3, [r7, #12]
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3714      	adds	r7, #20
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b087      	sub	sp, #28
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008b62:	8a3b      	ldrh	r3, [r7, #16]
 8008b64:	021b      	lsls	r3, r3, #8
 8008b66:	b21a      	sxth	r2, r3
 8008b68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	b21b      	sxth	r3, r3
 8008b70:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008b72:	89fb      	ldrh	r3, [r7, #14]
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	371c      	adds	r7, #28
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b96:	2b40      	cmp	r3, #64	; 0x40
 8008b98:	d005      	beq.n	8008ba6 <USBD_StdDevReq+0x26>
 8008b9a:	2b40      	cmp	r3, #64	; 0x40
 8008b9c:	d857      	bhi.n	8008c4e <USBD_StdDevReq+0xce>
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d00f      	beq.n	8008bc2 <USBD_StdDevReq+0x42>
 8008ba2:	2b20      	cmp	r3, #32
 8008ba4:	d153      	bne.n	8008c4e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	32ae      	adds	r2, #174	; 0xae
 8008bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	6839      	ldr	r1, [r7, #0]
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	4798      	blx	r3
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8008bc0:	e04a      	b.n	8008c58 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	785b      	ldrb	r3, [r3, #1]
 8008bc6:	2b09      	cmp	r3, #9
 8008bc8:	d83b      	bhi.n	8008c42 <USBD_StdDevReq+0xc2>
 8008bca:	a201      	add	r2, pc, #4	; (adr r2, 8008bd0 <USBD_StdDevReq+0x50>)
 8008bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd0:	08008c25 	.word	0x08008c25
 8008bd4:	08008c39 	.word	0x08008c39
 8008bd8:	08008c43 	.word	0x08008c43
 8008bdc:	08008c2f 	.word	0x08008c2f
 8008be0:	08008c43 	.word	0x08008c43
 8008be4:	08008c03 	.word	0x08008c03
 8008be8:	08008bf9 	.word	0x08008bf9
 8008bec:	08008c43 	.word	0x08008c43
 8008bf0:	08008c1b 	.word	0x08008c1b
 8008bf4:	08008c0d 	.word	0x08008c0d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008bf8:	6839      	ldr	r1, [r7, #0]
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 fa3c 	bl	8009078 <USBD_GetDescriptor>
          break;
 8008c00:	e024      	b.n	8008c4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008c02:	6839      	ldr	r1, [r7, #0]
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 fbcb 	bl	80093a0 <USBD_SetAddress>
          break;
 8008c0a:	e01f      	b.n	8008c4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008c0c:	6839      	ldr	r1, [r7, #0]
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 fc0a 	bl	8009428 <USBD_SetConfig>
 8008c14:	4603      	mov	r3, r0
 8008c16:	73fb      	strb	r3, [r7, #15]
          break;
 8008c18:	e018      	b.n	8008c4c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008c1a:	6839      	ldr	r1, [r7, #0]
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f000 fcad 	bl	800957c <USBD_GetConfig>
          break;
 8008c22:	e013      	b.n	8008c4c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008c24:	6839      	ldr	r1, [r7, #0]
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 fcde 	bl	80095e8 <USBD_GetStatus>
          break;
 8008c2c:	e00e      	b.n	8008c4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008c2e:	6839      	ldr	r1, [r7, #0]
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 fd0d 	bl	8009650 <USBD_SetFeature>
          break;
 8008c36:	e009      	b.n	8008c4c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008c38:	6839      	ldr	r1, [r7, #0]
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 fd31 	bl	80096a2 <USBD_ClrFeature>
          break;
 8008c40:	e004      	b.n	8008c4c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008c42:	6839      	ldr	r1, [r7, #0]
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 fd88 	bl	800975a <USBD_CtlError>
          break;
 8008c4a:	bf00      	nop
      }
      break;
 8008c4c:	e004      	b.n	8008c58 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008c4e:	6839      	ldr	r1, [r7, #0]
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 fd82 	bl	800975a <USBD_CtlError>
      break;
 8008c56:	bf00      	nop
  }

  return ret;
 8008c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop

08008c64 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c7a:	2b40      	cmp	r3, #64	; 0x40
 8008c7c:	d005      	beq.n	8008c8a <USBD_StdItfReq+0x26>
 8008c7e:	2b40      	cmp	r3, #64	; 0x40
 8008c80:	d852      	bhi.n	8008d28 <USBD_StdItfReq+0xc4>
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d001      	beq.n	8008c8a <USBD_StdItfReq+0x26>
 8008c86:	2b20      	cmp	r3, #32
 8008c88:	d14e      	bne.n	8008d28 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	3b01      	subs	r3, #1
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	d840      	bhi.n	8008d1a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	889b      	ldrh	r3, [r3, #4]
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d836      	bhi.n	8008d10 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	889b      	ldrh	r3, [r3, #4]
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	4619      	mov	r1, r3
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f7ff fed9 	bl	8008a62 <USBD_CoreFindIF>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008cb4:	7bbb      	ldrb	r3, [r7, #14]
 8008cb6:	2bff      	cmp	r3, #255	; 0xff
 8008cb8:	d01d      	beq.n	8008cf6 <USBD_StdItfReq+0x92>
 8008cba:	7bbb      	ldrb	r3, [r7, #14]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d11a      	bne.n	8008cf6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008cc0:	7bba      	ldrb	r2, [r7, #14]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	32ae      	adds	r2, #174	; 0xae
 8008cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d00f      	beq.n	8008cf0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008cd0:	7bba      	ldrb	r2, [r7, #14]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008cd8:	7bba      	ldrb	r2, [r7, #14]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	32ae      	adds	r2, #174	; 0xae
 8008cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	6839      	ldr	r1, [r7, #0]
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	4798      	blx	r3
 8008cea:	4603      	mov	r3, r0
 8008cec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008cee:	e004      	b.n	8008cfa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008cf0:	2303      	movs	r3, #3
 8008cf2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008cf4:	e001      	b.n	8008cfa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008cf6:	2303      	movs	r3, #3
 8008cf8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	88db      	ldrh	r3, [r3, #6]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d110      	bne.n	8008d24 <USBD_StdItfReq+0xc0>
 8008d02:	7bfb      	ldrb	r3, [r7, #15]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d10d      	bne.n	8008d24 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 fdf1 	bl	80098f0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008d0e:	e009      	b.n	8008d24 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008d10:	6839      	ldr	r1, [r7, #0]
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 fd21 	bl	800975a <USBD_CtlError>
          break;
 8008d18:	e004      	b.n	8008d24 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008d1a:	6839      	ldr	r1, [r7, #0]
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 fd1c 	bl	800975a <USBD_CtlError>
          break;
 8008d22:	e000      	b.n	8008d26 <USBD_StdItfReq+0xc2>
          break;
 8008d24:	bf00      	nop
      }
      break;
 8008d26:	e004      	b.n	8008d32 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008d28:	6839      	ldr	r1, [r7, #0]
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 fd15 	bl	800975a <USBD_CtlError>
      break;
 8008d30:	bf00      	nop
  }

  return ret;
 8008d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3710      	adds	r7, #16
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008d46:	2300      	movs	r3, #0
 8008d48:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	889b      	ldrh	r3, [r3, #4]
 8008d4e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d58:	2b40      	cmp	r3, #64	; 0x40
 8008d5a:	d007      	beq.n	8008d6c <USBD_StdEPReq+0x30>
 8008d5c:	2b40      	cmp	r3, #64	; 0x40
 8008d5e:	f200 817f 	bhi.w	8009060 <USBD_StdEPReq+0x324>
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d02a      	beq.n	8008dbc <USBD_StdEPReq+0x80>
 8008d66:	2b20      	cmp	r3, #32
 8008d68:	f040 817a 	bne.w	8009060 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008d6c:	7bbb      	ldrb	r3, [r7, #14]
 8008d6e:	4619      	mov	r1, r3
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f7ff fe83 	bl	8008a7c <USBD_CoreFindEP>
 8008d76:	4603      	mov	r3, r0
 8008d78:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d7a:	7b7b      	ldrb	r3, [r7, #13]
 8008d7c:	2bff      	cmp	r3, #255	; 0xff
 8008d7e:	f000 8174 	beq.w	800906a <USBD_StdEPReq+0x32e>
 8008d82:	7b7b      	ldrb	r3, [r7, #13]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f040 8170 	bne.w	800906a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008d8a:	7b7a      	ldrb	r2, [r7, #13]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008d92:	7b7a      	ldrb	r2, [r7, #13]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	32ae      	adds	r2, #174	; 0xae
 8008d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	f000 8163 	beq.w	800906a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008da4:	7b7a      	ldrb	r2, [r7, #13]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	32ae      	adds	r2, #174	; 0xae
 8008daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	6839      	ldr	r1, [r7, #0]
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	4798      	blx	r3
 8008db6:	4603      	mov	r3, r0
 8008db8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008dba:	e156      	b.n	800906a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	785b      	ldrb	r3, [r3, #1]
 8008dc0:	2b03      	cmp	r3, #3
 8008dc2:	d008      	beq.n	8008dd6 <USBD_StdEPReq+0x9a>
 8008dc4:	2b03      	cmp	r3, #3
 8008dc6:	f300 8145 	bgt.w	8009054 <USBD_StdEPReq+0x318>
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	f000 809b 	beq.w	8008f06 <USBD_StdEPReq+0x1ca>
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d03c      	beq.n	8008e4e <USBD_StdEPReq+0x112>
 8008dd4:	e13e      	b.n	8009054 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	2b02      	cmp	r3, #2
 8008de0:	d002      	beq.n	8008de8 <USBD_StdEPReq+0xac>
 8008de2:	2b03      	cmp	r3, #3
 8008de4:	d016      	beq.n	8008e14 <USBD_StdEPReq+0xd8>
 8008de6:	e02c      	b.n	8008e42 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008de8:	7bbb      	ldrb	r3, [r7, #14]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d00d      	beq.n	8008e0a <USBD_StdEPReq+0xce>
 8008dee:	7bbb      	ldrb	r3, [r7, #14]
 8008df0:	2b80      	cmp	r3, #128	; 0x80
 8008df2:	d00a      	beq.n	8008e0a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008df4:	7bbb      	ldrb	r3, [r7, #14]
 8008df6:	4619      	mov	r1, r3
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f001 f9bf 	bl	800a17c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008dfe:	2180      	movs	r1, #128	; 0x80
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f001 f9bb 	bl	800a17c <USBD_LL_StallEP>
 8008e06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e08:	e020      	b.n	8008e4c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008e0a:	6839      	ldr	r1, [r7, #0]
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 fca4 	bl	800975a <USBD_CtlError>
              break;
 8008e12:	e01b      	b.n	8008e4c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	885b      	ldrh	r3, [r3, #2]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d10e      	bne.n	8008e3a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008e1c:	7bbb      	ldrb	r3, [r7, #14]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d00b      	beq.n	8008e3a <USBD_StdEPReq+0xfe>
 8008e22:	7bbb      	ldrb	r3, [r7, #14]
 8008e24:	2b80      	cmp	r3, #128	; 0x80
 8008e26:	d008      	beq.n	8008e3a <USBD_StdEPReq+0xfe>
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	88db      	ldrh	r3, [r3, #6]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d104      	bne.n	8008e3a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e30:	7bbb      	ldrb	r3, [r7, #14]
 8008e32:	4619      	mov	r1, r3
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f001 f9a1 	bl	800a17c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 fd58 	bl	80098f0 <USBD_CtlSendStatus>

              break;
 8008e40:	e004      	b.n	8008e4c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008e42:	6839      	ldr	r1, [r7, #0]
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 fc88 	bl	800975a <USBD_CtlError>
              break;
 8008e4a:	bf00      	nop
          }
          break;
 8008e4c:	e107      	b.n	800905e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	2b02      	cmp	r3, #2
 8008e58:	d002      	beq.n	8008e60 <USBD_StdEPReq+0x124>
 8008e5a:	2b03      	cmp	r3, #3
 8008e5c:	d016      	beq.n	8008e8c <USBD_StdEPReq+0x150>
 8008e5e:	e04b      	b.n	8008ef8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e60:	7bbb      	ldrb	r3, [r7, #14]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d00d      	beq.n	8008e82 <USBD_StdEPReq+0x146>
 8008e66:	7bbb      	ldrb	r3, [r7, #14]
 8008e68:	2b80      	cmp	r3, #128	; 0x80
 8008e6a:	d00a      	beq.n	8008e82 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e6c:	7bbb      	ldrb	r3, [r7, #14]
 8008e6e:	4619      	mov	r1, r3
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f001 f983 	bl	800a17c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e76:	2180      	movs	r1, #128	; 0x80
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f001 f97f 	bl	800a17c <USBD_LL_StallEP>
 8008e7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e80:	e040      	b.n	8008f04 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008e82:	6839      	ldr	r1, [r7, #0]
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 fc68 	bl	800975a <USBD_CtlError>
              break;
 8008e8a:	e03b      	b.n	8008f04 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	885b      	ldrh	r3, [r3, #2]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d136      	bne.n	8008f02 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008e94:	7bbb      	ldrb	r3, [r7, #14]
 8008e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d004      	beq.n	8008ea8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008e9e:	7bbb      	ldrb	r3, [r7, #14]
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f001 f9a0 	bl	800a1e8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 fd21 	bl	80098f0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008eae:	7bbb      	ldrb	r3, [r7, #14]
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f7ff fde2 	bl	8008a7c <USBD_CoreFindEP>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ebc:	7b7b      	ldrb	r3, [r7, #13]
 8008ebe:	2bff      	cmp	r3, #255	; 0xff
 8008ec0:	d01f      	beq.n	8008f02 <USBD_StdEPReq+0x1c6>
 8008ec2:	7b7b      	ldrb	r3, [r7, #13]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d11c      	bne.n	8008f02 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008ec8:	7b7a      	ldrb	r2, [r7, #13]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008ed0:	7b7a      	ldrb	r2, [r7, #13]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	32ae      	adds	r2, #174	; 0xae
 8008ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d010      	beq.n	8008f02 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008ee0:	7b7a      	ldrb	r2, [r7, #13]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	32ae      	adds	r2, #174	; 0xae
 8008ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	6839      	ldr	r1, [r7, #0]
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	4798      	blx	r3
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008ef6:	e004      	b.n	8008f02 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008ef8:	6839      	ldr	r1, [r7, #0]
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 fc2d 	bl	800975a <USBD_CtlError>
              break;
 8008f00:	e000      	b.n	8008f04 <USBD_StdEPReq+0x1c8>
              break;
 8008f02:	bf00      	nop
          }
          break;
 8008f04:	e0ab      	b.n	800905e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	2b02      	cmp	r3, #2
 8008f10:	d002      	beq.n	8008f18 <USBD_StdEPReq+0x1dc>
 8008f12:	2b03      	cmp	r3, #3
 8008f14:	d032      	beq.n	8008f7c <USBD_StdEPReq+0x240>
 8008f16:	e097      	b.n	8009048 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f18:	7bbb      	ldrb	r3, [r7, #14]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d007      	beq.n	8008f2e <USBD_StdEPReq+0x1f2>
 8008f1e:	7bbb      	ldrb	r3, [r7, #14]
 8008f20:	2b80      	cmp	r3, #128	; 0x80
 8008f22:	d004      	beq.n	8008f2e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008f24:	6839      	ldr	r1, [r7, #0]
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 fc17 	bl	800975a <USBD_CtlError>
                break;
 8008f2c:	e091      	b.n	8009052 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	da0b      	bge.n	8008f4e <USBD_StdEPReq+0x212>
 8008f36:	7bbb      	ldrb	r3, [r7, #14]
 8008f38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	4413      	add	r3, r2
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	3310      	adds	r3, #16
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	4413      	add	r3, r2
 8008f4a:	3304      	adds	r3, #4
 8008f4c:	e00b      	b.n	8008f66 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008f4e:	7bbb      	ldrb	r3, [r7, #14]
 8008f50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f54:	4613      	mov	r3, r2
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	4413      	add	r3, r2
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	4413      	add	r3, r2
 8008f64:	3304      	adds	r3, #4
 8008f66:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	2202      	movs	r2, #2
 8008f72:	4619      	mov	r1, r3
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 fc61 	bl	800983c <USBD_CtlSendData>
              break;
 8008f7a:	e06a      	b.n	8009052 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008f7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	da11      	bge.n	8008fa8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008f84:	7bbb      	ldrb	r3, [r7, #14]
 8008f86:	f003 020f 	and.w	r2, r3, #15
 8008f8a:	6879      	ldr	r1, [r7, #4]
 8008f8c:	4613      	mov	r3, r2
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	4413      	add	r3, r2
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	440b      	add	r3, r1
 8008f96:	3324      	adds	r3, #36	; 0x24
 8008f98:	881b      	ldrh	r3, [r3, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d117      	bne.n	8008fce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008f9e:	6839      	ldr	r1, [r7, #0]
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 fbda 	bl	800975a <USBD_CtlError>
                  break;
 8008fa6:	e054      	b.n	8009052 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008fa8:	7bbb      	ldrb	r3, [r7, #14]
 8008faa:	f003 020f 	and.w	r2, r3, #15
 8008fae:	6879      	ldr	r1, [r7, #4]
 8008fb0:	4613      	mov	r3, r2
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	4413      	add	r3, r2
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	440b      	add	r3, r1
 8008fba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008fbe:	881b      	ldrh	r3, [r3, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d104      	bne.n	8008fce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008fc4:	6839      	ldr	r1, [r7, #0]
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 fbc7 	bl	800975a <USBD_CtlError>
                  break;
 8008fcc:	e041      	b.n	8009052 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	da0b      	bge.n	8008fee <USBD_StdEPReq+0x2b2>
 8008fd6:	7bbb      	ldrb	r3, [r7, #14]
 8008fd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fdc:	4613      	mov	r3, r2
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	4413      	add	r3, r2
 8008fe2:	009b      	lsls	r3, r3, #2
 8008fe4:	3310      	adds	r3, #16
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	4413      	add	r3, r2
 8008fea:	3304      	adds	r3, #4
 8008fec:	e00b      	b.n	8009006 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008fee:	7bbb      	ldrb	r3, [r7, #14]
 8008ff0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ff4:	4613      	mov	r3, r2
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	4413      	add	r3, r2
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	4413      	add	r3, r2
 8009004:	3304      	adds	r3, #4
 8009006:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009008:	7bbb      	ldrb	r3, [r7, #14]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d002      	beq.n	8009014 <USBD_StdEPReq+0x2d8>
 800900e:	7bbb      	ldrb	r3, [r7, #14]
 8009010:	2b80      	cmp	r3, #128	; 0x80
 8009012:	d103      	bne.n	800901c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	2200      	movs	r2, #0
 8009018:	601a      	str	r2, [r3, #0]
 800901a:	e00e      	b.n	800903a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800901c:	7bbb      	ldrb	r3, [r7, #14]
 800901e:	4619      	mov	r1, r3
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f001 f917 	bl	800a254 <USBD_LL_IsStallEP>
 8009026:	4603      	mov	r3, r0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d003      	beq.n	8009034 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	2201      	movs	r2, #1
 8009030:	601a      	str	r2, [r3, #0]
 8009032:	e002      	b.n	800903a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	2200      	movs	r2, #0
 8009038:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	2202      	movs	r2, #2
 800903e:	4619      	mov	r1, r3
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 fbfb 	bl	800983c <USBD_CtlSendData>
              break;
 8009046:	e004      	b.n	8009052 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009048:	6839      	ldr	r1, [r7, #0]
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 fb85 	bl	800975a <USBD_CtlError>
              break;
 8009050:	bf00      	nop
          }
          break;
 8009052:	e004      	b.n	800905e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009054:	6839      	ldr	r1, [r7, #0]
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 fb7f 	bl	800975a <USBD_CtlError>
          break;
 800905c:	bf00      	nop
      }
      break;
 800905e:	e005      	b.n	800906c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009060:	6839      	ldr	r1, [r7, #0]
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fb79 	bl	800975a <USBD_CtlError>
      break;
 8009068:	e000      	b.n	800906c <USBD_StdEPReq+0x330>
      break;
 800906a:	bf00      	nop
  }

  return ret;
 800906c:	7bfb      	ldrb	r3, [r7, #15]
}
 800906e:	4618      	mov	r0, r3
 8009070:	3710      	adds	r7, #16
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
	...

08009078 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009082:	2300      	movs	r3, #0
 8009084:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009086:	2300      	movs	r3, #0
 8009088:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800908a:	2300      	movs	r3, #0
 800908c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	885b      	ldrh	r3, [r3, #2]
 8009092:	0a1b      	lsrs	r3, r3, #8
 8009094:	b29b      	uxth	r3, r3
 8009096:	3b01      	subs	r3, #1
 8009098:	2b0e      	cmp	r3, #14
 800909a:	f200 8152 	bhi.w	8009342 <USBD_GetDescriptor+0x2ca>
 800909e:	a201      	add	r2, pc, #4	; (adr r2, 80090a4 <USBD_GetDescriptor+0x2c>)
 80090a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a4:	08009115 	.word	0x08009115
 80090a8:	0800912d 	.word	0x0800912d
 80090ac:	0800916d 	.word	0x0800916d
 80090b0:	08009343 	.word	0x08009343
 80090b4:	08009343 	.word	0x08009343
 80090b8:	080092e3 	.word	0x080092e3
 80090bc:	0800930f 	.word	0x0800930f
 80090c0:	08009343 	.word	0x08009343
 80090c4:	08009343 	.word	0x08009343
 80090c8:	08009343 	.word	0x08009343
 80090cc:	08009343 	.word	0x08009343
 80090d0:	08009343 	.word	0x08009343
 80090d4:	08009343 	.word	0x08009343
 80090d8:	08009343 	.word	0x08009343
 80090dc:	080090e1 	.word	0x080090e1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090e6:	69db      	ldr	r3, [r3, #28]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d00b      	beq.n	8009104 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090f2:	69db      	ldr	r3, [r3, #28]
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	7c12      	ldrb	r2, [r2, #16]
 80090f8:	f107 0108 	add.w	r1, r7, #8
 80090fc:	4610      	mov	r0, r2
 80090fe:	4798      	blx	r3
 8009100:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009102:	e126      	b.n	8009352 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009104:	6839      	ldr	r1, [r7, #0]
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 fb27 	bl	800975a <USBD_CtlError>
        err++;
 800910c:	7afb      	ldrb	r3, [r7, #11]
 800910e:	3301      	adds	r3, #1
 8009110:	72fb      	strb	r3, [r7, #11]
      break;
 8009112:	e11e      	b.n	8009352 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	7c12      	ldrb	r2, [r2, #16]
 8009120:	f107 0108 	add.w	r1, r7, #8
 8009124:	4610      	mov	r0, r2
 8009126:	4798      	blx	r3
 8009128:	60f8      	str	r0, [r7, #12]
      break;
 800912a:	e112      	b.n	8009352 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	7c1b      	ldrb	r3, [r3, #16]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d10d      	bne.n	8009150 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800913a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800913c:	f107 0208 	add.w	r2, r7, #8
 8009140:	4610      	mov	r0, r2
 8009142:	4798      	blx	r3
 8009144:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	3301      	adds	r3, #1
 800914a:	2202      	movs	r2, #2
 800914c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800914e:	e100      	b.n	8009352 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009158:	f107 0208 	add.w	r2, r7, #8
 800915c:	4610      	mov	r0, r2
 800915e:	4798      	blx	r3
 8009160:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	3301      	adds	r3, #1
 8009166:	2202      	movs	r2, #2
 8009168:	701a      	strb	r2, [r3, #0]
      break;
 800916a:	e0f2      	b.n	8009352 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	885b      	ldrh	r3, [r3, #2]
 8009170:	b2db      	uxtb	r3, r3
 8009172:	2b05      	cmp	r3, #5
 8009174:	f200 80ac 	bhi.w	80092d0 <USBD_GetDescriptor+0x258>
 8009178:	a201      	add	r2, pc, #4	; (adr r2, 8009180 <USBD_GetDescriptor+0x108>)
 800917a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800917e:	bf00      	nop
 8009180:	08009199 	.word	0x08009199
 8009184:	080091cd 	.word	0x080091cd
 8009188:	08009201 	.word	0x08009201
 800918c:	08009235 	.word	0x08009235
 8009190:	08009269 	.word	0x08009269
 8009194:	0800929d 	.word	0x0800929d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d00b      	beq.n	80091bc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	7c12      	ldrb	r2, [r2, #16]
 80091b0:	f107 0108 	add.w	r1, r7, #8
 80091b4:	4610      	mov	r0, r2
 80091b6:	4798      	blx	r3
 80091b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091ba:	e091      	b.n	80092e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80091bc:	6839      	ldr	r1, [r7, #0]
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 facb 	bl	800975a <USBD_CtlError>
            err++;
 80091c4:	7afb      	ldrb	r3, [r7, #11]
 80091c6:	3301      	adds	r3, #1
 80091c8:	72fb      	strb	r3, [r7, #11]
          break;
 80091ca:	e089      	b.n	80092e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d00b      	beq.n	80091f0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	7c12      	ldrb	r2, [r2, #16]
 80091e4:	f107 0108 	add.w	r1, r7, #8
 80091e8:	4610      	mov	r0, r2
 80091ea:	4798      	blx	r3
 80091ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091ee:	e077      	b.n	80092e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80091f0:	6839      	ldr	r1, [r7, #0]
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 fab1 	bl	800975a <USBD_CtlError>
            err++;
 80091f8:	7afb      	ldrb	r3, [r7, #11]
 80091fa:	3301      	adds	r3, #1
 80091fc:	72fb      	strb	r3, [r7, #11]
          break;
 80091fe:	e06f      	b.n	80092e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d00b      	beq.n	8009224 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	7c12      	ldrb	r2, [r2, #16]
 8009218:	f107 0108 	add.w	r1, r7, #8
 800921c:	4610      	mov	r0, r2
 800921e:	4798      	blx	r3
 8009220:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009222:	e05d      	b.n	80092e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009224:	6839      	ldr	r1, [r7, #0]
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 fa97 	bl	800975a <USBD_CtlError>
            err++;
 800922c:	7afb      	ldrb	r3, [r7, #11]
 800922e:	3301      	adds	r3, #1
 8009230:	72fb      	strb	r3, [r7, #11]
          break;
 8009232:	e055      	b.n	80092e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800923a:	691b      	ldr	r3, [r3, #16]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00b      	beq.n	8009258 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009246:	691b      	ldr	r3, [r3, #16]
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	7c12      	ldrb	r2, [r2, #16]
 800924c:	f107 0108 	add.w	r1, r7, #8
 8009250:	4610      	mov	r0, r2
 8009252:	4798      	blx	r3
 8009254:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009256:	e043      	b.n	80092e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009258:	6839      	ldr	r1, [r7, #0]
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 fa7d 	bl	800975a <USBD_CtlError>
            err++;
 8009260:	7afb      	ldrb	r3, [r7, #11]
 8009262:	3301      	adds	r3, #1
 8009264:	72fb      	strb	r3, [r7, #11]
          break;
 8009266:	e03b      	b.n	80092e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800926e:	695b      	ldr	r3, [r3, #20]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d00b      	beq.n	800928c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800927a:	695b      	ldr	r3, [r3, #20]
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	7c12      	ldrb	r2, [r2, #16]
 8009280:	f107 0108 	add.w	r1, r7, #8
 8009284:	4610      	mov	r0, r2
 8009286:	4798      	blx	r3
 8009288:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800928a:	e029      	b.n	80092e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800928c:	6839      	ldr	r1, [r7, #0]
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 fa63 	bl	800975a <USBD_CtlError>
            err++;
 8009294:	7afb      	ldrb	r3, [r7, #11]
 8009296:	3301      	adds	r3, #1
 8009298:	72fb      	strb	r3, [r7, #11]
          break;
 800929a:	e021      	b.n	80092e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092a2:	699b      	ldr	r3, [r3, #24]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d00b      	beq.n	80092c0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ae:	699b      	ldr	r3, [r3, #24]
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	7c12      	ldrb	r2, [r2, #16]
 80092b4:	f107 0108 	add.w	r1, r7, #8
 80092b8:	4610      	mov	r0, r2
 80092ba:	4798      	blx	r3
 80092bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092be:	e00f      	b.n	80092e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80092c0:	6839      	ldr	r1, [r7, #0]
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 fa49 	bl	800975a <USBD_CtlError>
            err++;
 80092c8:	7afb      	ldrb	r3, [r7, #11]
 80092ca:	3301      	adds	r3, #1
 80092cc:	72fb      	strb	r3, [r7, #11]
          break;
 80092ce:	e007      	b.n	80092e0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80092d0:	6839      	ldr	r1, [r7, #0]
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 fa41 	bl	800975a <USBD_CtlError>
          err++;
 80092d8:	7afb      	ldrb	r3, [r7, #11]
 80092da:	3301      	adds	r3, #1
 80092dc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80092de:	bf00      	nop
      }
      break;
 80092e0:	e037      	b.n	8009352 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	7c1b      	ldrb	r3, [r3, #16]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d109      	bne.n	80092fe <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092f2:	f107 0208 	add.w	r2, r7, #8
 80092f6:	4610      	mov	r0, r2
 80092f8:	4798      	blx	r3
 80092fa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80092fc:	e029      	b.n	8009352 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80092fe:	6839      	ldr	r1, [r7, #0]
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 fa2a 	bl	800975a <USBD_CtlError>
        err++;
 8009306:	7afb      	ldrb	r3, [r7, #11]
 8009308:	3301      	adds	r3, #1
 800930a:	72fb      	strb	r3, [r7, #11]
      break;
 800930c:	e021      	b.n	8009352 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	7c1b      	ldrb	r3, [r3, #16]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d10d      	bne.n	8009332 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800931c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800931e:	f107 0208 	add.w	r2, r7, #8
 8009322:	4610      	mov	r0, r2
 8009324:	4798      	blx	r3
 8009326:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	3301      	adds	r3, #1
 800932c:	2207      	movs	r2, #7
 800932e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009330:	e00f      	b.n	8009352 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009332:	6839      	ldr	r1, [r7, #0]
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 fa10 	bl	800975a <USBD_CtlError>
        err++;
 800933a:	7afb      	ldrb	r3, [r7, #11]
 800933c:	3301      	adds	r3, #1
 800933e:	72fb      	strb	r3, [r7, #11]
      break;
 8009340:	e007      	b.n	8009352 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009342:	6839      	ldr	r1, [r7, #0]
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f000 fa08 	bl	800975a <USBD_CtlError>
      err++;
 800934a:	7afb      	ldrb	r3, [r7, #11]
 800934c:	3301      	adds	r3, #1
 800934e:	72fb      	strb	r3, [r7, #11]
      break;
 8009350:	bf00      	nop
  }

  if (err != 0U)
 8009352:	7afb      	ldrb	r3, [r7, #11]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d11e      	bne.n	8009396 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	88db      	ldrh	r3, [r3, #6]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d016      	beq.n	800938e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009360:	893b      	ldrh	r3, [r7, #8]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00e      	beq.n	8009384 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	88da      	ldrh	r2, [r3, #6]
 800936a:	893b      	ldrh	r3, [r7, #8]
 800936c:	4293      	cmp	r3, r2
 800936e:	bf28      	it	cs
 8009370:	4613      	movcs	r3, r2
 8009372:	b29b      	uxth	r3, r3
 8009374:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009376:	893b      	ldrh	r3, [r7, #8]
 8009378:	461a      	mov	r2, r3
 800937a:	68f9      	ldr	r1, [r7, #12]
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 fa5d 	bl	800983c <USBD_CtlSendData>
 8009382:	e009      	b.n	8009398 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009384:	6839      	ldr	r1, [r7, #0]
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 f9e7 	bl	800975a <USBD_CtlError>
 800938c:	e004      	b.n	8009398 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 faae 	bl	80098f0 <USBD_CtlSendStatus>
 8009394:	e000      	b.n	8009398 <USBD_GetDescriptor+0x320>
    return;
 8009396:	bf00      	nop
  }
}
 8009398:	3710      	adds	r7, #16
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
 800939e:	bf00      	nop

080093a0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	889b      	ldrh	r3, [r3, #4]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d131      	bne.n	8009416 <USBD_SetAddress+0x76>
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	88db      	ldrh	r3, [r3, #6]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d12d      	bne.n	8009416 <USBD_SetAddress+0x76>
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	885b      	ldrh	r3, [r3, #2]
 80093be:	2b7f      	cmp	r3, #127	; 0x7f
 80093c0:	d829      	bhi.n	8009416 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	885b      	ldrh	r3, [r3, #2]
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	2b03      	cmp	r3, #3
 80093d8:	d104      	bne.n	80093e4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80093da:	6839      	ldr	r1, [r7, #0]
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 f9bc 	bl	800975a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093e2:	e01d      	b.n	8009420 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	7bfa      	ldrb	r2, [r7, #15]
 80093e8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80093ec:	7bfb      	ldrb	r3, [r7, #15]
 80093ee:	4619      	mov	r1, r3
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 ff5b 	bl	800a2ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 fa7a 	bl	80098f0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80093fc:	7bfb      	ldrb	r3, [r7, #15]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d004      	beq.n	800940c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2202      	movs	r2, #2
 8009406:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800940a:	e009      	b.n	8009420 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2201      	movs	r2, #1
 8009410:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009414:	e004      	b.n	8009420 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009416:	6839      	ldr	r1, [r7, #0]
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 f99e 	bl	800975a <USBD_CtlError>
  }
}
 800941e:	bf00      	nop
 8009420:	bf00      	nop
 8009422:	3710      	adds	r7, #16
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009432:	2300      	movs	r3, #0
 8009434:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	885b      	ldrh	r3, [r3, #2]
 800943a:	b2da      	uxtb	r2, r3
 800943c:	4b4e      	ldr	r3, [pc, #312]	; (8009578 <USBD_SetConfig+0x150>)
 800943e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009440:	4b4d      	ldr	r3, [pc, #308]	; (8009578 <USBD_SetConfig+0x150>)
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	2b01      	cmp	r3, #1
 8009446:	d905      	bls.n	8009454 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009448:	6839      	ldr	r1, [r7, #0]
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 f985 	bl	800975a <USBD_CtlError>
    return USBD_FAIL;
 8009450:	2303      	movs	r3, #3
 8009452:	e08c      	b.n	800956e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800945a:	b2db      	uxtb	r3, r3
 800945c:	2b02      	cmp	r3, #2
 800945e:	d002      	beq.n	8009466 <USBD_SetConfig+0x3e>
 8009460:	2b03      	cmp	r3, #3
 8009462:	d029      	beq.n	80094b8 <USBD_SetConfig+0x90>
 8009464:	e075      	b.n	8009552 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009466:	4b44      	ldr	r3, [pc, #272]	; (8009578 <USBD_SetConfig+0x150>)
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d020      	beq.n	80094b0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800946e:	4b42      	ldr	r3, [pc, #264]	; (8009578 <USBD_SetConfig+0x150>)
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	461a      	mov	r2, r3
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009478:	4b3f      	ldr	r3, [pc, #252]	; (8009578 <USBD_SetConfig+0x150>)
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	4619      	mov	r1, r3
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f7fe ffb7 	bl	80083f2 <USBD_SetClassConfig>
 8009484:	4603      	mov	r3, r0
 8009486:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009488:	7bfb      	ldrb	r3, [r7, #15]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d008      	beq.n	80094a0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800948e:	6839      	ldr	r1, [r7, #0]
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 f962 	bl	800975a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2202      	movs	r2, #2
 800949a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800949e:	e065      	b.n	800956c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 fa25 	bl	80098f0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2203      	movs	r2, #3
 80094aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80094ae:	e05d      	b.n	800956c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f000 fa1d 	bl	80098f0 <USBD_CtlSendStatus>
      break;
 80094b6:	e059      	b.n	800956c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80094b8:	4b2f      	ldr	r3, [pc, #188]	; (8009578 <USBD_SetConfig+0x150>)
 80094ba:	781b      	ldrb	r3, [r3, #0]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d112      	bne.n	80094e6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2202      	movs	r2, #2
 80094c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80094c8:	4b2b      	ldr	r3, [pc, #172]	; (8009578 <USBD_SetConfig+0x150>)
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	461a      	mov	r2, r3
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80094d2:	4b29      	ldr	r3, [pc, #164]	; (8009578 <USBD_SetConfig+0x150>)
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	4619      	mov	r1, r3
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f7fe ffa6 	bl	800842a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 fa06 	bl	80098f0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80094e4:	e042      	b.n	800956c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80094e6:	4b24      	ldr	r3, [pc, #144]	; (8009578 <USBD_SetConfig+0x150>)
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	461a      	mov	r2, r3
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d02a      	beq.n	800954a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	4619      	mov	r1, r3
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f7fe ff94 	bl	800842a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009502:	4b1d      	ldr	r3, [pc, #116]	; (8009578 <USBD_SetConfig+0x150>)
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	461a      	mov	r2, r3
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800950c:	4b1a      	ldr	r3, [pc, #104]	; (8009578 <USBD_SetConfig+0x150>)
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	4619      	mov	r1, r3
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f7fe ff6d 	bl	80083f2 <USBD_SetClassConfig>
 8009518:	4603      	mov	r3, r0
 800951a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800951c:	7bfb      	ldrb	r3, [r7, #15]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d00f      	beq.n	8009542 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009522:	6839      	ldr	r1, [r7, #0]
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 f918 	bl	800975a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	b2db      	uxtb	r3, r3
 8009530:	4619      	mov	r1, r3
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f7fe ff79 	bl	800842a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2202      	movs	r2, #2
 800953c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009540:	e014      	b.n	800956c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 f9d4 	bl	80098f0 <USBD_CtlSendStatus>
      break;
 8009548:	e010      	b.n	800956c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 f9d0 	bl	80098f0 <USBD_CtlSendStatus>
      break;
 8009550:	e00c      	b.n	800956c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009552:	6839      	ldr	r1, [r7, #0]
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 f900 	bl	800975a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800955a:	4b07      	ldr	r3, [pc, #28]	; (8009578 <USBD_SetConfig+0x150>)
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	4619      	mov	r1, r3
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f7fe ff62 	bl	800842a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009566:	2303      	movs	r3, #3
 8009568:	73fb      	strb	r3, [r7, #15]
      break;
 800956a:	bf00      	nop
  }

  return ret;
 800956c:	7bfb      	ldrb	r3, [r7, #15]
}
 800956e:	4618      	mov	r0, r3
 8009570:	3710      	adds	r7, #16
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	20000418 	.word	0x20000418

0800957c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	88db      	ldrh	r3, [r3, #6]
 800958a:	2b01      	cmp	r3, #1
 800958c:	d004      	beq.n	8009598 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800958e:	6839      	ldr	r1, [r7, #0]
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 f8e2 	bl	800975a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009596:	e023      	b.n	80095e0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	2b02      	cmp	r3, #2
 80095a2:	dc02      	bgt.n	80095aa <USBD_GetConfig+0x2e>
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	dc03      	bgt.n	80095b0 <USBD_GetConfig+0x34>
 80095a8:	e015      	b.n	80095d6 <USBD_GetConfig+0x5a>
 80095aa:	2b03      	cmp	r3, #3
 80095ac:	d00b      	beq.n	80095c6 <USBD_GetConfig+0x4a>
 80095ae:	e012      	b.n	80095d6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	3308      	adds	r3, #8
 80095ba:	2201      	movs	r2, #1
 80095bc:	4619      	mov	r1, r3
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 f93c 	bl	800983c <USBD_CtlSendData>
        break;
 80095c4:	e00c      	b.n	80095e0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	3304      	adds	r3, #4
 80095ca:	2201      	movs	r2, #1
 80095cc:	4619      	mov	r1, r3
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 f934 	bl	800983c <USBD_CtlSendData>
        break;
 80095d4:	e004      	b.n	80095e0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80095d6:	6839      	ldr	r1, [r7, #0]
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 f8be 	bl	800975a <USBD_CtlError>
        break;
 80095de:	bf00      	nop
}
 80095e0:	bf00      	nop
 80095e2:	3708      	adds	r7, #8
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	3b01      	subs	r3, #1
 80095fc:	2b02      	cmp	r3, #2
 80095fe:	d81e      	bhi.n	800963e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	88db      	ldrh	r3, [r3, #6]
 8009604:	2b02      	cmp	r3, #2
 8009606:	d004      	beq.n	8009612 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009608:	6839      	ldr	r1, [r7, #0]
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 f8a5 	bl	800975a <USBD_CtlError>
        break;
 8009610:	e01a      	b.n	8009648 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2201      	movs	r2, #1
 8009616:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800961e:	2b00      	cmp	r3, #0
 8009620:	d005      	beq.n	800962e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	68db      	ldr	r3, [r3, #12]
 8009626:	f043 0202 	orr.w	r2, r3, #2
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	330c      	adds	r3, #12
 8009632:	2202      	movs	r2, #2
 8009634:	4619      	mov	r1, r3
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 f900 	bl	800983c <USBD_CtlSendData>
      break;
 800963c:	e004      	b.n	8009648 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800963e:	6839      	ldr	r1, [r7, #0]
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 f88a 	bl	800975a <USBD_CtlError>
      break;
 8009646:	bf00      	nop
  }
}
 8009648:	bf00      	nop
 800964a:	3708      	adds	r7, #8
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b082      	sub	sp, #8
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	885b      	ldrh	r3, [r3, #2]
 800965e:	2b01      	cmp	r3, #1
 8009660:	d107      	bne.n	8009672 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2201      	movs	r2, #1
 8009666:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 f940 	bl	80098f0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009670:	e013      	b.n	800969a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	885b      	ldrh	r3, [r3, #2]
 8009676:	2b02      	cmp	r3, #2
 8009678:	d10b      	bne.n	8009692 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	889b      	ldrh	r3, [r3, #4]
 800967e:	0a1b      	lsrs	r3, r3, #8
 8009680:	b29b      	uxth	r3, r3
 8009682:	b2da      	uxtb	r2, r3
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 f930 	bl	80098f0 <USBD_CtlSendStatus>
}
 8009690:	e003      	b.n	800969a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009692:	6839      	ldr	r1, [r7, #0]
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 f860 	bl	800975a <USBD_CtlError>
}
 800969a:	bf00      	nop
 800969c:	3708      	adds	r7, #8
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}

080096a2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096a2:	b580      	push	{r7, lr}
 80096a4:	b082      	sub	sp, #8
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
 80096aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	3b01      	subs	r3, #1
 80096b6:	2b02      	cmp	r3, #2
 80096b8:	d80b      	bhi.n	80096d2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	885b      	ldrh	r3, [r3, #2]
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d10c      	bne.n	80096dc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2200      	movs	r2, #0
 80096c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 f910 	bl	80098f0 <USBD_CtlSendStatus>
      }
      break;
 80096d0:	e004      	b.n	80096dc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80096d2:	6839      	ldr	r1, [r7, #0]
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f000 f840 	bl	800975a <USBD_CtlError>
      break;
 80096da:	e000      	b.n	80096de <USBD_ClrFeature+0x3c>
      break;
 80096dc:	bf00      	nop
  }
}
 80096de:	bf00      	nop
 80096e0:	3708      	adds	r7, #8
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b084      	sub	sp, #16
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
 80096ee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	781a      	ldrb	r2, [r3, #0]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	3301      	adds	r3, #1
 8009700:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	781a      	ldrb	r2, [r3, #0]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	3301      	adds	r3, #1
 800970e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009710:	68f8      	ldr	r0, [r7, #12]
 8009712:	f7ff fa17 	bl	8008b44 <SWAPBYTE>
 8009716:	4603      	mov	r3, r0
 8009718:	461a      	mov	r2, r3
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	3301      	adds	r3, #1
 8009722:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	3301      	adds	r3, #1
 8009728:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800972a:	68f8      	ldr	r0, [r7, #12]
 800972c:	f7ff fa0a 	bl	8008b44 <SWAPBYTE>
 8009730:	4603      	mov	r3, r0
 8009732:	461a      	mov	r2, r3
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	3301      	adds	r3, #1
 800973c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	3301      	adds	r3, #1
 8009742:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009744:	68f8      	ldr	r0, [r7, #12]
 8009746:	f7ff f9fd 	bl	8008b44 <SWAPBYTE>
 800974a:	4603      	mov	r3, r0
 800974c:	461a      	mov	r2, r3
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	80da      	strh	r2, [r3, #6]
}
 8009752:	bf00      	nop
 8009754:	3710      	adds	r7, #16
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800975a:	b580      	push	{r7, lr}
 800975c:	b082      	sub	sp, #8
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
 8009762:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009764:	2180      	movs	r1, #128	; 0x80
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 fd08 	bl	800a17c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800976c:	2100      	movs	r1, #0
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 fd04 	bl	800a17c <USBD_LL_StallEP>
}
 8009774:	bf00      	nop
 8009776:	3708      	adds	r7, #8
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b086      	sub	sp, #24
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009788:	2300      	movs	r3, #0
 800978a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d036      	beq.n	8009800 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009796:	6938      	ldr	r0, [r7, #16]
 8009798:	f000 f836 	bl	8009808 <USBD_GetLen>
 800979c:	4603      	mov	r3, r0
 800979e:	3301      	adds	r3, #1
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	005b      	lsls	r3, r3, #1
 80097a4:	b29a      	uxth	r2, r3
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80097aa:	7dfb      	ldrb	r3, [r7, #23]
 80097ac:	68ba      	ldr	r2, [r7, #8]
 80097ae:	4413      	add	r3, r2
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	7812      	ldrb	r2, [r2, #0]
 80097b4:	701a      	strb	r2, [r3, #0]
  idx++;
 80097b6:	7dfb      	ldrb	r3, [r7, #23]
 80097b8:	3301      	adds	r3, #1
 80097ba:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80097bc:	7dfb      	ldrb	r3, [r7, #23]
 80097be:	68ba      	ldr	r2, [r7, #8]
 80097c0:	4413      	add	r3, r2
 80097c2:	2203      	movs	r2, #3
 80097c4:	701a      	strb	r2, [r3, #0]
  idx++;
 80097c6:	7dfb      	ldrb	r3, [r7, #23]
 80097c8:	3301      	adds	r3, #1
 80097ca:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80097cc:	e013      	b.n	80097f6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80097ce:	7dfb      	ldrb	r3, [r7, #23]
 80097d0:	68ba      	ldr	r2, [r7, #8]
 80097d2:	4413      	add	r3, r2
 80097d4:	693a      	ldr	r2, [r7, #16]
 80097d6:	7812      	ldrb	r2, [r2, #0]
 80097d8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	3301      	adds	r3, #1
 80097de:	613b      	str	r3, [r7, #16]
    idx++;
 80097e0:	7dfb      	ldrb	r3, [r7, #23]
 80097e2:	3301      	adds	r3, #1
 80097e4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80097e6:	7dfb      	ldrb	r3, [r7, #23]
 80097e8:	68ba      	ldr	r2, [r7, #8]
 80097ea:	4413      	add	r3, r2
 80097ec:	2200      	movs	r2, #0
 80097ee:	701a      	strb	r2, [r3, #0]
    idx++;
 80097f0:	7dfb      	ldrb	r3, [r7, #23]
 80097f2:	3301      	adds	r3, #1
 80097f4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1e7      	bne.n	80097ce <USBD_GetString+0x52>
 80097fe:	e000      	b.n	8009802 <USBD_GetString+0x86>
    return;
 8009800:	bf00      	nop
  }
}
 8009802:	3718      	adds	r7, #24
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009808:	b480      	push	{r7}
 800980a:	b085      	sub	sp, #20
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009810:	2300      	movs	r3, #0
 8009812:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009818:	e005      	b.n	8009826 <USBD_GetLen+0x1e>
  {
    len++;
 800981a:	7bfb      	ldrb	r3, [r7, #15]
 800981c:	3301      	adds	r3, #1
 800981e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	3301      	adds	r3, #1
 8009824:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d1f5      	bne.n	800981a <USBD_GetLen+0x12>
  }

  return len;
 800982e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009830:	4618      	mov	r0, r3
 8009832:	3714      	adds	r7, #20
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr

0800983c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	60b9      	str	r1, [r7, #8]
 8009846:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2202      	movs	r2, #2
 800984c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	68ba      	ldr	r2, [r7, #8]
 8009860:	2100      	movs	r1, #0
 8009862:	68f8      	ldr	r0, [r7, #12]
 8009864:	f000 fd58 	bl	800a318 <USBD_LL_Transmit>

  return USBD_OK;
 8009868:	2300      	movs	r3, #0
}
 800986a:	4618      	mov	r0, r3
 800986c:	3710      	adds	r7, #16
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}

08009872 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009872:	b580      	push	{r7, lr}
 8009874:	b084      	sub	sp, #16
 8009876:	af00      	add	r7, sp, #0
 8009878:	60f8      	str	r0, [r7, #12]
 800987a:	60b9      	str	r1, [r7, #8]
 800987c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	68ba      	ldr	r2, [r7, #8]
 8009882:	2100      	movs	r1, #0
 8009884:	68f8      	ldr	r0, [r7, #12]
 8009886:	f000 fd47 	bl	800a318 <USBD_LL_Transmit>

  return USBD_OK;
 800988a:	2300      	movs	r3, #0
}
 800988c:	4618      	mov	r0, r3
 800988e:	3710      	adds	r7, #16
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2203      	movs	r2, #3
 80098a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	68ba      	ldr	r2, [r7, #8]
 80098bc:	2100      	movs	r1, #0
 80098be:	68f8      	ldr	r0, [r7, #12]
 80098c0:	f000 fd62 	bl	800a388 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80098c4:	2300      	movs	r3, #0
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3710      	adds	r7, #16
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}

080098ce <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80098ce:	b580      	push	{r7, lr}
 80098d0:	b084      	sub	sp, #16
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	60f8      	str	r0, [r7, #12]
 80098d6:	60b9      	str	r1, [r7, #8]
 80098d8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	68ba      	ldr	r2, [r7, #8]
 80098de:	2100      	movs	r1, #0
 80098e0:	68f8      	ldr	r0, [r7, #12]
 80098e2:	f000 fd51 	bl	800a388 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80098e6:	2300      	movs	r3, #0
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2204      	movs	r2, #4
 80098fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009900:	2300      	movs	r3, #0
 8009902:	2200      	movs	r2, #0
 8009904:	2100      	movs	r1, #0
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 fd06 	bl	800a318 <USBD_LL_Transmit>

  return USBD_OK;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	3708      	adds	r7, #8
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b082      	sub	sp, #8
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2205      	movs	r2, #5
 8009922:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009926:	2300      	movs	r3, #0
 8009928:	2200      	movs	r2, #0
 800992a:	2100      	movs	r1, #0
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 fd2b 	bl	800a388 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009932:	2300      	movs	r3, #0
}
 8009934:	4618      	mov	r0, r3
 8009936:	3708      	adds	r7, #8
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009940:	2200      	movs	r2, #0
 8009942:	4912      	ldr	r1, [pc, #72]	; (800998c <MX_USB_DEVICE_Init+0x50>)
 8009944:	4812      	ldr	r0, [pc, #72]	; (8009990 <MX_USB_DEVICE_Init+0x54>)
 8009946:	f7fe fcd7 	bl	80082f8 <USBD_Init>
 800994a:	4603      	mov	r3, r0
 800994c:	2b00      	cmp	r3, #0
 800994e:	d001      	beq.n	8009954 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009950:	f7f7 fd2e 	bl	80013b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8009954:	490f      	ldr	r1, [pc, #60]	; (8009994 <MX_USB_DEVICE_Init+0x58>)
 8009956:	480e      	ldr	r0, [pc, #56]	; (8009990 <MX_USB_DEVICE_Init+0x54>)
 8009958:	f7fe fcfe 	bl	8008358 <USBD_RegisterClass>
 800995c:	4603      	mov	r3, r0
 800995e:	2b00      	cmp	r3, #0
 8009960:	d001      	beq.n	8009966 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009962:	f7f7 fd25 	bl	80013b0 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8009966:	490c      	ldr	r1, [pc, #48]	; (8009998 <MX_USB_DEVICE_Init+0x5c>)
 8009968:	4809      	ldr	r0, [pc, #36]	; (8009990 <MX_USB_DEVICE_Init+0x54>)
 800996a:	f7fe fcab 	bl	80082c4 <USBD_CUSTOM_HID_RegisterInterface>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d001      	beq.n	8009978 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009974:	f7f7 fd1c 	bl	80013b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009978:	4805      	ldr	r0, [pc, #20]	; (8009990 <MX_USB_DEVICE_Init+0x54>)
 800997a:	f7fe fd23 	bl	80083c4 <USBD_Start>
 800997e:	4603      	mov	r3, r0
 8009980:	2b00      	cmp	r3, #0
 8009982:	d001      	beq.n	8009988 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009984:	f7f7 fd14 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009988:	bf00      	nop
 800998a:	bd80      	pop	{r7, pc}
 800998c:	200000cc 	.word	0x200000cc
 8009990:	2000041c 	.word	0x2000041c
 8009994:	2000000c 	.word	0x2000000c
 8009998:	200000bc 	.word	0x200000bc

0800999c <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800999c:	b480      	push	{r7}
 800999e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80099a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 80099ac:	b480      	push	{r7}
 80099ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80099b0:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr

080099bc <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	4603      	mov	r3, r0
 80099c4:	460a      	mov	r2, r1
 80099c6:	71fb      	strb	r3, [r7, #7]
 80099c8:	4613      	mov	r3, r2
 80099ca:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 80099cc:	4803      	ldr	r0, [pc, #12]	; (80099dc <CUSTOM_HID_OutEvent_FS+0x20>)
 80099ce:	f7fe fc17 	bl	8008200 <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 80099d2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3708      	adds	r7, #8
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	2000041c 	.word	0x2000041c

080099e0 <USBD_CUSTOM_HID_SendReport_FS>:
  * @param  len: The report length
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */

int8_t USBD_CUSTOM_HID_SendReport_FS(uint8_t *report, uint16_t len)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	460b      	mov	r3, r1
 80099ea:	807b      	strh	r3, [r7, #2]
  return USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report, len);
 80099ec:	887b      	ldrh	r3, [r7, #2]
 80099ee:	461a      	mov	r2, r3
 80099f0:	6879      	ldr	r1, [r7, #4]
 80099f2:	4804      	ldr	r0, [pc, #16]	; (8009a04 <USBD_CUSTOM_HID_SendReport_FS+0x24>)
 80099f4:	f7fe faf8 	bl	8007fe8 <USBD_CUSTOM_HID_SendReport>
 80099f8:	4603      	mov	r3, r0
 80099fa:	b25b      	sxtb	r3, r3
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3708      	adds	r7, #8
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}
 8009a04:	2000041c 	.word	0x2000041c

08009a08 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	4603      	mov	r3, r0
 8009a10:	6039      	str	r1, [r7, #0]
 8009a12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	2212      	movs	r2, #18
 8009a18:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009a1a:	4b03      	ldr	r3, [pc, #12]	; (8009a28 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr
 8009a28:	200000ec 	.word	0x200000ec

08009a2c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	4603      	mov	r3, r0
 8009a34:	6039      	str	r1, [r7, #0]
 8009a36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	2204      	movs	r2, #4
 8009a3c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009a3e:	4b03      	ldr	r3, [pc, #12]	; (8009a4c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr
 8009a4c:	2000010c 	.word	0x2000010c

08009a50 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b082      	sub	sp, #8
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	4603      	mov	r3, r0
 8009a58:	6039      	str	r1, [r7, #0]
 8009a5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a5c:	79fb      	ldrb	r3, [r7, #7]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d105      	bne.n	8009a6e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009a62:	683a      	ldr	r2, [r7, #0]
 8009a64:	4907      	ldr	r1, [pc, #28]	; (8009a84 <USBD_FS_ProductStrDescriptor+0x34>)
 8009a66:	4808      	ldr	r0, [pc, #32]	; (8009a88 <USBD_FS_ProductStrDescriptor+0x38>)
 8009a68:	f7ff fe88 	bl	800977c <USBD_GetString>
 8009a6c:	e004      	b.n	8009a78 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009a6e:	683a      	ldr	r2, [r7, #0]
 8009a70:	4904      	ldr	r1, [pc, #16]	; (8009a84 <USBD_FS_ProductStrDescriptor+0x34>)
 8009a72:	4805      	ldr	r0, [pc, #20]	; (8009a88 <USBD_FS_ProductStrDescriptor+0x38>)
 8009a74:	f7ff fe82 	bl	800977c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a78:	4b02      	ldr	r3, [pc, #8]	; (8009a84 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3708      	adds	r7, #8
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	200006f8 	.word	0x200006f8
 8009a88:	0800b364 	.word	0x0800b364

08009a8c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b082      	sub	sp, #8
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	4603      	mov	r3, r0
 8009a94:	6039      	str	r1, [r7, #0]
 8009a96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009a98:	683a      	ldr	r2, [r7, #0]
 8009a9a:	4904      	ldr	r1, [pc, #16]	; (8009aac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009a9c:	4804      	ldr	r0, [pc, #16]	; (8009ab0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009a9e:	f7ff fe6d 	bl	800977c <USBD_GetString>
  return USBD_StrDesc;
 8009aa2:	4b02      	ldr	r3, [pc, #8]	; (8009aac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3708      	adds	r7, #8
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	200006f8 	.word	0x200006f8
 8009ab0:	0800b384 	.word	0x0800b384

08009ab4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	4603      	mov	r3, r0
 8009abc:	6039      	str	r1, [r7, #0]
 8009abe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	221a      	movs	r2, #26
 8009ac4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009ac6:	f000 f855 	bl	8009b74 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009aca:	4b02      	ldr	r3, [pc, #8]	; (8009ad4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3708      	adds	r7, #8
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	20000110 	.word	0x20000110

08009ad8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b082      	sub	sp, #8
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	4603      	mov	r3, r0
 8009ae0:	6039      	str	r1, [r7, #0]
 8009ae2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009ae4:	79fb      	ldrb	r3, [r7, #7]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d105      	bne.n	8009af6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009aea:	683a      	ldr	r2, [r7, #0]
 8009aec:	4907      	ldr	r1, [pc, #28]	; (8009b0c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009aee:	4808      	ldr	r0, [pc, #32]	; (8009b10 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009af0:	f7ff fe44 	bl	800977c <USBD_GetString>
 8009af4:	e004      	b.n	8009b00 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009af6:	683a      	ldr	r2, [r7, #0]
 8009af8:	4904      	ldr	r1, [pc, #16]	; (8009b0c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009afa:	4805      	ldr	r0, [pc, #20]	; (8009b10 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009afc:	f7ff fe3e 	bl	800977c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b00:	4b02      	ldr	r3, [pc, #8]	; (8009b0c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3708      	adds	r7, #8
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop
 8009b0c:	200006f8 	.word	0x200006f8
 8009b10:	0800b398 	.word	0x0800b398

08009b14 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	6039      	str	r1, [r7, #0]
 8009b1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b20:	79fb      	ldrb	r3, [r7, #7]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d105      	bne.n	8009b32 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009b26:	683a      	ldr	r2, [r7, #0]
 8009b28:	4907      	ldr	r1, [pc, #28]	; (8009b48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009b2a:	4808      	ldr	r0, [pc, #32]	; (8009b4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009b2c:	f7ff fe26 	bl	800977c <USBD_GetString>
 8009b30:	e004      	b.n	8009b3c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009b32:	683a      	ldr	r2, [r7, #0]
 8009b34:	4904      	ldr	r1, [pc, #16]	; (8009b48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009b36:	4805      	ldr	r0, [pc, #20]	; (8009b4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009b38:	f7ff fe20 	bl	800977c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b3c:	4b02      	ldr	r3, [pc, #8]	; (8009b48 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3708      	adds	r7, #8
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	200006f8 	.word	0x200006f8
 8009b4c:	0800b3ac 	.word	0x0800b3ac

08009b50 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	4603      	mov	r3, r0
 8009b58:	6039      	str	r1, [r7, #0]
 8009b5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	220c      	movs	r2, #12
 8009b60:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009b62:	4b03      	ldr	r3, [pc, #12]	; (8009b70 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	370c      	adds	r7, #12
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr
 8009b70:	20000100 	.word	0x20000100

08009b74 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b084      	sub	sp, #16
 8009b78:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009b7a:	4b0f      	ldr	r3, [pc, #60]	; (8009bb8 <Get_SerialNum+0x44>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009b80:	4b0e      	ldr	r3, [pc, #56]	; (8009bbc <Get_SerialNum+0x48>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009b86:	4b0e      	ldr	r3, [pc, #56]	; (8009bc0 <Get_SerialNum+0x4c>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009b8c:	68fa      	ldr	r2, [r7, #12]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	4413      	add	r3, r2
 8009b92:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d009      	beq.n	8009bae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009b9a:	2208      	movs	r2, #8
 8009b9c:	4909      	ldr	r1, [pc, #36]	; (8009bc4 <Get_SerialNum+0x50>)
 8009b9e:	68f8      	ldr	r0, [r7, #12]
 8009ba0:	f000 f814 	bl	8009bcc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009ba4:	2204      	movs	r2, #4
 8009ba6:	4908      	ldr	r1, [pc, #32]	; (8009bc8 <Get_SerialNum+0x54>)
 8009ba8:	68b8      	ldr	r0, [r7, #8]
 8009baa:	f000 f80f 	bl	8009bcc <IntToUnicode>
  }
}
 8009bae:	bf00      	nop
 8009bb0:	3710      	adds	r7, #16
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
 8009bb6:	bf00      	nop
 8009bb8:	1fff7590 	.word	0x1fff7590
 8009bbc:	1fff7594 	.word	0x1fff7594
 8009bc0:	1fff7598 	.word	0x1fff7598
 8009bc4:	20000112 	.word	0x20000112
 8009bc8:	20000122 	.word	0x20000122

08009bcc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b087      	sub	sp, #28
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	60f8      	str	r0, [r7, #12]
 8009bd4:	60b9      	str	r1, [r7, #8]
 8009bd6:	4613      	mov	r3, r2
 8009bd8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009bde:	2300      	movs	r3, #0
 8009be0:	75fb      	strb	r3, [r7, #23]
 8009be2:	e027      	b.n	8009c34 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	0f1b      	lsrs	r3, r3, #28
 8009be8:	2b09      	cmp	r3, #9
 8009bea:	d80b      	bhi.n	8009c04 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	0f1b      	lsrs	r3, r3, #28
 8009bf0:	b2da      	uxtb	r2, r3
 8009bf2:	7dfb      	ldrb	r3, [r7, #23]
 8009bf4:	005b      	lsls	r3, r3, #1
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	440b      	add	r3, r1
 8009bfc:	3230      	adds	r2, #48	; 0x30
 8009bfe:	b2d2      	uxtb	r2, r2
 8009c00:	701a      	strb	r2, [r3, #0]
 8009c02:	e00a      	b.n	8009c1a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	0f1b      	lsrs	r3, r3, #28
 8009c08:	b2da      	uxtb	r2, r3
 8009c0a:	7dfb      	ldrb	r3, [r7, #23]
 8009c0c:	005b      	lsls	r3, r3, #1
 8009c0e:	4619      	mov	r1, r3
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	440b      	add	r3, r1
 8009c14:	3237      	adds	r2, #55	; 0x37
 8009c16:	b2d2      	uxtb	r2, r2
 8009c18:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	011b      	lsls	r3, r3, #4
 8009c1e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009c20:	7dfb      	ldrb	r3, [r7, #23]
 8009c22:	005b      	lsls	r3, r3, #1
 8009c24:	3301      	adds	r3, #1
 8009c26:	68ba      	ldr	r2, [r7, #8]
 8009c28:	4413      	add	r3, r2
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009c2e:	7dfb      	ldrb	r3, [r7, #23]
 8009c30:	3301      	adds	r3, #1
 8009c32:	75fb      	strb	r3, [r7, #23]
 8009c34:	7dfa      	ldrb	r2, [r7, #23]
 8009c36:	79fb      	ldrb	r3, [r7, #7]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d3d3      	bcc.n	8009be4 <IntToUnicode+0x18>
  }
}
 8009c3c:	bf00      	nop
 8009c3e:	bf00      	nop
 8009c40:	371c      	adds	r7, #28
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr
	...

08009c4c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b0ac      	sub	sp, #176	; 0xb0
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c54:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009c58:	2200      	movs	r2, #0
 8009c5a:	601a      	str	r2, [r3, #0]
 8009c5c:	605a      	str	r2, [r3, #4]
 8009c5e:	609a      	str	r2, [r3, #8]
 8009c60:	60da      	str	r2, [r3, #12]
 8009c62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009c64:	f107 0314 	add.w	r3, r7, #20
 8009c68:	2288      	movs	r2, #136	; 0x88
 8009c6a:	2100      	movs	r1, #0
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f000 fd46 	bl	800a6fe <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c7a:	f040 8085 	bne.w	8009d88 <HAL_PCD_MspInit+0x13c>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009c7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009c82:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8009c84:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009c88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8009c90:	2301      	movs	r3, #1
 8009c92:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8009c94:	2318      	movs	r3, #24
 8009c96:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8009c98:	2307      	movs	r3, #7
 8009c9a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8009c9c:	2302      	movs	r3, #2
 8009c9e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8009ca0:	2302      	movs	r3, #2
 8009ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8009ca4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009ca8:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009caa:	f107 0314 	add.w	r3, r7, #20
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7fb fa6e 	bl	8005190 <HAL_RCCEx_PeriphCLKConfig>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d001      	beq.n	8009cbe <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 8009cba:	f7f7 fb79 	bl	80013b0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009cbe:	4b34      	ldr	r3, [pc, #208]	; (8009d90 <HAL_PCD_MspInit+0x144>)
 8009cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cc2:	4a33      	ldr	r2, [pc, #204]	; (8009d90 <HAL_PCD_MspInit+0x144>)
 8009cc4:	f043 0301 	orr.w	r3, r3, #1
 8009cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009cca:	4b31      	ldr	r3, [pc, #196]	; (8009d90 <HAL_PCD_MspInit+0x144>)
 8009ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cce:	f003 0301 	and.w	r3, r3, #1
 8009cd2:	613b      	str	r3, [r7, #16]
 8009cd4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8009cd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009cda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8009cea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009cee:	4619      	mov	r1, r3
 8009cf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009cf4:	f7f8 f968 	bl	8001fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8009cf8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009cfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d00:	2302      	movs	r3, #2
 8009d02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d06:	2300      	movs	r3, #0
 8009d08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d0c:	2303      	movs	r3, #3
 8009d0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009d12:	230a      	movs	r3, #10
 8009d14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009d22:	f7f8 f951 	bl	8001fc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009d26:	4b1a      	ldr	r3, [pc, #104]	; (8009d90 <HAL_PCD_MspInit+0x144>)
 8009d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d2a:	4a19      	ldr	r2, [pc, #100]	; (8009d90 <HAL_PCD_MspInit+0x144>)
 8009d2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009d30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009d32:	4b17      	ldr	r3, [pc, #92]	; (8009d90 <HAL_PCD_MspInit+0x144>)
 8009d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009d3a:	60fb      	str	r3, [r7, #12]
 8009d3c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009d3e:	4b14      	ldr	r3, [pc, #80]	; (8009d90 <HAL_PCD_MspInit+0x144>)
 8009d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d114      	bne.n	8009d74 <HAL_PCD_MspInit+0x128>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009d4a:	4b11      	ldr	r3, [pc, #68]	; (8009d90 <HAL_PCD_MspInit+0x144>)
 8009d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d4e:	4a10      	ldr	r2, [pc, #64]	; (8009d90 <HAL_PCD_MspInit+0x144>)
 8009d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d54:	6593      	str	r3, [r2, #88]	; 0x58
 8009d56:	4b0e      	ldr	r3, [pc, #56]	; (8009d90 <HAL_PCD_MspInit+0x144>)
 8009d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d5e:	60bb      	str	r3, [r7, #8]
 8009d60:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8009d62:	f7fa fb49 	bl	80043f8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009d66:	4b0a      	ldr	r3, [pc, #40]	; (8009d90 <HAL_PCD_MspInit+0x144>)
 8009d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d6a:	4a09      	ldr	r2, [pc, #36]	; (8009d90 <HAL_PCD_MspInit+0x144>)
 8009d6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d70:	6593      	str	r3, [r2, #88]	; 0x58
 8009d72:	e001      	b.n	8009d78 <HAL_PCD_MspInit+0x12c>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8009d74:	f7fa fb40 	bl	80043f8 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009d78:	2200      	movs	r2, #0
 8009d7a:	2100      	movs	r1, #0
 8009d7c:	2043      	movs	r0, #67	; 0x43
 8009d7e:	f7f7 ffe0 	bl	8001d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009d82:	2043      	movs	r0, #67	; 0x43
 8009d84:	f7f7 fff9 	bl	8001d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009d88:	bf00      	nop
 8009d8a:	37b0      	adds	r7, #176	; 0xb0
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}
 8009d90:	40021000 	.word	0x40021000

08009d94 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009da8:	4619      	mov	r1, r3
 8009daa:	4610      	mov	r0, r2
 8009dac:	f7fe fb57 	bl	800845e <USBD_LL_SetupStage>
}
 8009db0:	bf00      	nop
 8009db2:	3708      	adds	r7, #8
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b082      	sub	sp, #8
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009dca:	78fa      	ldrb	r2, [r7, #3]
 8009dcc:	6879      	ldr	r1, [r7, #4]
 8009dce:	4613      	mov	r3, r2
 8009dd0:	00db      	lsls	r3, r3, #3
 8009dd2:	4413      	add	r3, r2
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	440b      	add	r3, r1
 8009dd8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	78fb      	ldrb	r3, [r7, #3]
 8009de0:	4619      	mov	r1, r3
 8009de2:	f7fe fb91 	bl	8008508 <USBD_LL_DataOutStage>
}
 8009de6:	bf00      	nop
 8009de8:	3708      	adds	r7, #8
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}

08009dee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dee:	b580      	push	{r7, lr}
 8009df0:	b082      	sub	sp, #8
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
 8009df6:	460b      	mov	r3, r1
 8009df8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009e00:	78fa      	ldrb	r2, [r7, #3]
 8009e02:	6879      	ldr	r1, [r7, #4]
 8009e04:	4613      	mov	r3, r2
 8009e06:	00db      	lsls	r3, r3, #3
 8009e08:	4413      	add	r3, r2
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	440b      	add	r3, r1
 8009e0e:	3348      	adds	r3, #72	; 0x48
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	78fb      	ldrb	r3, [r7, #3]
 8009e14:	4619      	mov	r1, r3
 8009e16:	f7fe fc2a 	bl	800866e <USBD_LL_DataInStage>
}
 8009e1a:	bf00      	nop
 8009e1c:	3708      	adds	r7, #8
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b082      	sub	sp, #8
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e30:	4618      	mov	r0, r3
 8009e32:	f7fe fd64 	bl	80088fe <USBD_LL_SOF>
}
 8009e36:	bf00      	nop
 8009e38:	3708      	adds	r7, #8
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}

08009e3e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e3e:	b580      	push	{r7, lr}
 8009e40:	b084      	sub	sp, #16
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009e46:	2301      	movs	r3, #1
 8009e48:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	691b      	ldr	r3, [r3, #16]
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	d001      	beq.n	8009e56 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009e52:	f7f7 faad 	bl	80013b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e5c:	7bfa      	ldrb	r2, [r7, #15]
 8009e5e:	4611      	mov	r1, r2
 8009e60:	4618      	mov	r0, r3
 8009e62:	f7fe fd08 	bl	8008876 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7fe fcb0 	bl	80087d2 <USBD_LL_Reset>
}
 8009e72:	bf00      	nop
 8009e74:	3710      	adds	r7, #16
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
	...

08009e7c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	6812      	ldr	r2, [r2, #0]
 8009e92:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009e96:	f043 0301 	orr.w	r3, r3, #1
 8009e9a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f7fe fcf7 	bl	8008896 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6a1b      	ldr	r3, [r3, #32]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d005      	beq.n	8009ebc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009eb0:	4b04      	ldr	r3, [pc, #16]	; (8009ec4 <HAL_PCD_SuspendCallback+0x48>)
 8009eb2:	691b      	ldr	r3, [r3, #16]
 8009eb4:	4a03      	ldr	r2, [pc, #12]	; (8009ec4 <HAL_PCD_SuspendCallback+0x48>)
 8009eb6:	f043 0306 	orr.w	r3, r3, #6
 8009eba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009ebc:	bf00      	nop
 8009ebe:	3708      	adds	r7, #8
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}
 8009ec4:	e000ed00 	.word	0xe000ed00

08009ec8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b082      	sub	sp, #8
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	6812      	ldr	r2, [r2, #0]
 8009ede:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009ee2:	f023 0301 	bic.w	r3, r3, #1
 8009ee6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6a1b      	ldr	r3, [r3, #32]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d007      	beq.n	8009f00 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ef0:	4b08      	ldr	r3, [pc, #32]	; (8009f14 <HAL_PCD_ResumeCallback+0x4c>)
 8009ef2:	691b      	ldr	r3, [r3, #16]
 8009ef4:	4a07      	ldr	r2, [pc, #28]	; (8009f14 <HAL_PCD_ResumeCallback+0x4c>)
 8009ef6:	f023 0306 	bic.w	r3, r3, #6
 8009efa:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009efc:	f000 fae2 	bl	800a4c4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7fe fce1 	bl	80088ce <USBD_LL_Resume>
}
 8009f0c:	bf00      	nop
 8009f0e:	3708      	adds	r7, #8
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	e000ed00 	.word	0xe000ed00

08009f18 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b082      	sub	sp, #8
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	460b      	mov	r3, r1
 8009f22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f2a:	78fa      	ldrb	r2, [r7, #3]
 8009f2c:	4611      	mov	r1, r2
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7fe fd37 	bl	80089a2 <USBD_LL_IsoOUTIncomplete>
}
 8009f34:	bf00      	nop
 8009f36:	3708      	adds	r7, #8
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b082      	sub	sp, #8
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	460b      	mov	r3, r1
 8009f46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f4e:	78fa      	ldrb	r2, [r7, #3]
 8009f50:	4611      	mov	r1, r2
 8009f52:	4618      	mov	r0, r3
 8009f54:	f7fe fcf3 	bl	800893e <USBD_LL_IsoINIncomplete>
}
 8009f58:	bf00      	nop
 8009f5a:	3708      	adds	r7, #8
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b082      	sub	sp, #8
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7fe fd49 	bl	8008a06 <USBD_LL_DevConnected>
}
 8009f74:	bf00      	nop
 8009f76:	3708      	adds	r7, #8
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b082      	sub	sp, #8
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7fe fd46 	bl	8008a1c <USBD_LL_DevDisconnected>
}
 8009f90:	bf00      	nop
 8009f92:	3708      	adds	r7, #8
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d13c      	bne.n	800a022 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009fa8:	4a20      	ldr	r2, [pc, #128]	; (800a02c <USBD_LL_Init+0x94>)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	4a1e      	ldr	r2, [pc, #120]	; (800a02c <USBD_LL_Init+0x94>)
 8009fb4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009fb8:	4b1c      	ldr	r3, [pc, #112]	; (800a02c <USBD_LL_Init+0x94>)
 8009fba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009fbe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009fc0:	4b1a      	ldr	r3, [pc, #104]	; (800a02c <USBD_LL_Init+0x94>)
 8009fc2:	2206      	movs	r2, #6
 8009fc4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009fc6:	4b19      	ldr	r3, [pc, #100]	; (800a02c <USBD_LL_Init+0x94>)
 8009fc8:	2202      	movs	r2, #2
 8009fca:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009fcc:	4b17      	ldr	r3, [pc, #92]	; (800a02c <USBD_LL_Init+0x94>)
 8009fce:	2202      	movs	r2, #2
 8009fd0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009fd2:	4b16      	ldr	r3, [pc, #88]	; (800a02c <USBD_LL_Init+0x94>)
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009fd8:	4b14      	ldr	r3, [pc, #80]	; (800a02c <USBD_LL_Init+0x94>)
 8009fda:	2200      	movs	r2, #0
 8009fdc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009fde:	4b13      	ldr	r3, [pc, #76]	; (800a02c <USBD_LL_Init+0x94>)
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8009fe4:	4b11      	ldr	r3, [pc, #68]	; (800a02c <USBD_LL_Init+0x94>)
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009fea:	4b10      	ldr	r3, [pc, #64]	; (800a02c <USBD_LL_Init+0x94>)
 8009fec:	2200      	movs	r2, #0
 8009fee:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009ff0:	4b0e      	ldr	r3, [pc, #56]	; (800a02c <USBD_LL_Init+0x94>)
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009ff6:	480d      	ldr	r0, [pc, #52]	; (800a02c <USBD_LL_Init+0x94>)
 8009ff8:	f7f8 fffb 	bl	8002ff2 <HAL_PCD_Init>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d001      	beq.n	800a006 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a002:	f7f7 f9d5 	bl	80013b0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a006:	2180      	movs	r1, #128	; 0x80
 800a008:	4808      	ldr	r0, [pc, #32]	; (800a02c <USBD_LL_Init+0x94>)
 800a00a:	f7fa f94c 	bl	80042a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a00e:	2240      	movs	r2, #64	; 0x40
 800a010:	2100      	movs	r1, #0
 800a012:	4806      	ldr	r0, [pc, #24]	; (800a02c <USBD_LL_Init+0x94>)
 800a014:	f7fa f900 	bl	8004218 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a018:	2280      	movs	r2, #128	; 0x80
 800a01a:	2101      	movs	r1, #1
 800a01c:	4803      	ldr	r0, [pc, #12]	; (800a02c <USBD_LL_Init+0x94>)
 800a01e:	f7fa f8fb 	bl	8004218 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a022:	2300      	movs	r3, #0
}
 800a024:	4618      	mov	r0, r3
 800a026:	3708      	adds	r7, #8
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}
 800a02c:	200008f8 	.word	0x200008f8

0800a030 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b084      	sub	sp, #16
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a038:	2300      	movs	r3, #0
 800a03a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a03c:	2300      	movs	r3, #0
 800a03e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a046:	4618      	mov	r0, r3
 800a048:	f7f9 f8f7 	bl	800323a <HAL_PCD_Start>
 800a04c:	4603      	mov	r3, r0
 800a04e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a050:	7bbb      	ldrb	r3, [r7, #14]
 800a052:	2b03      	cmp	r3, #3
 800a054:	d816      	bhi.n	800a084 <USBD_LL_Start+0x54>
 800a056:	a201      	add	r2, pc, #4	; (adr r2, 800a05c <USBD_LL_Start+0x2c>)
 800a058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a05c:	0800a06d 	.word	0x0800a06d
 800a060:	0800a073 	.word	0x0800a073
 800a064:	0800a079 	.word	0x0800a079
 800a068:	0800a07f 	.word	0x0800a07f
    case HAL_OK :
      usb_status = USBD_OK;
 800a06c:	2300      	movs	r3, #0
 800a06e:	73fb      	strb	r3, [r7, #15]
    break;
 800a070:	e00b      	b.n	800a08a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a072:	2303      	movs	r3, #3
 800a074:	73fb      	strb	r3, [r7, #15]
    break;
 800a076:	e008      	b.n	800a08a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a078:	2301      	movs	r3, #1
 800a07a:	73fb      	strb	r3, [r7, #15]
    break;
 800a07c:	e005      	b.n	800a08a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a07e:	2303      	movs	r3, #3
 800a080:	73fb      	strb	r3, [r7, #15]
    break;
 800a082:	e002      	b.n	800a08a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800a084:	2303      	movs	r3, #3
 800a086:	73fb      	strb	r3, [r7, #15]
    break;
 800a088:	bf00      	nop
  }
  return usb_status;
 800a08a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3710      	adds	r7, #16
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	4608      	mov	r0, r1
 800a09e:	4611      	mov	r1, r2
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	70fb      	strb	r3, [r7, #3]
 800a0a6:	460b      	mov	r3, r1
 800a0a8:	70bb      	strb	r3, [r7, #2]
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a0bc:	78bb      	ldrb	r3, [r7, #2]
 800a0be:	883a      	ldrh	r2, [r7, #0]
 800a0c0:	78f9      	ldrb	r1, [r7, #3]
 800a0c2:	f7f9 fda1 	bl	8003c08 <HAL_PCD_EP_Open>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a0ca:	7bbb      	ldrb	r3, [r7, #14]
 800a0cc:	2b03      	cmp	r3, #3
 800a0ce:	d817      	bhi.n	800a100 <USBD_LL_OpenEP+0x6c>
 800a0d0:	a201      	add	r2, pc, #4	; (adr r2, 800a0d8 <USBD_LL_OpenEP+0x44>)
 800a0d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0d6:	bf00      	nop
 800a0d8:	0800a0e9 	.word	0x0800a0e9
 800a0dc:	0800a0ef 	.word	0x0800a0ef
 800a0e0:	0800a0f5 	.word	0x0800a0f5
 800a0e4:	0800a0fb 	.word	0x0800a0fb
    case HAL_OK :
      usb_status = USBD_OK;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	73fb      	strb	r3, [r7, #15]
    break;
 800a0ec:	e00b      	b.n	800a106 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a0ee:	2303      	movs	r3, #3
 800a0f0:	73fb      	strb	r3, [r7, #15]
    break;
 800a0f2:	e008      	b.n	800a106 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	73fb      	strb	r3, [r7, #15]
    break;
 800a0f8:	e005      	b.n	800a106 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a0fa:	2303      	movs	r3, #3
 800a0fc:	73fb      	strb	r3, [r7, #15]
    break;
 800a0fe:	e002      	b.n	800a106 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800a100:	2303      	movs	r3, #3
 800a102:	73fb      	strb	r3, [r7, #15]
    break;
 800a104:	bf00      	nop
  }
  return usb_status;
 800a106:	7bfb      	ldrb	r3, [r7, #15]
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3710      	adds	r7, #16
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	460b      	mov	r3, r1
 800a11a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a11c:	2300      	movs	r3, #0
 800a11e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a120:	2300      	movs	r3, #0
 800a122:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a12a:	78fa      	ldrb	r2, [r7, #3]
 800a12c:	4611      	mov	r1, r2
 800a12e:	4618      	mov	r0, r3
 800a130:	f7f9 fdd2 	bl	8003cd8 <HAL_PCD_EP_Close>
 800a134:	4603      	mov	r3, r0
 800a136:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a138:	7bbb      	ldrb	r3, [r7, #14]
 800a13a:	2b03      	cmp	r3, #3
 800a13c:	d816      	bhi.n	800a16c <USBD_LL_CloseEP+0x5c>
 800a13e:	a201      	add	r2, pc, #4	; (adr r2, 800a144 <USBD_LL_CloseEP+0x34>)
 800a140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a144:	0800a155 	.word	0x0800a155
 800a148:	0800a15b 	.word	0x0800a15b
 800a14c:	0800a161 	.word	0x0800a161
 800a150:	0800a167 	.word	0x0800a167
    case HAL_OK :
      usb_status = USBD_OK;
 800a154:	2300      	movs	r3, #0
 800a156:	73fb      	strb	r3, [r7, #15]
    break;
 800a158:	e00b      	b.n	800a172 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a15a:	2303      	movs	r3, #3
 800a15c:	73fb      	strb	r3, [r7, #15]
    break;
 800a15e:	e008      	b.n	800a172 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a160:	2301      	movs	r3, #1
 800a162:	73fb      	strb	r3, [r7, #15]
    break;
 800a164:	e005      	b.n	800a172 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a166:	2303      	movs	r3, #3
 800a168:	73fb      	strb	r3, [r7, #15]
    break;
 800a16a:	e002      	b.n	800a172 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a16c:	2303      	movs	r3, #3
 800a16e:	73fb      	strb	r3, [r7, #15]
    break;
 800a170:	bf00      	nop
  }
  return usb_status;
 800a172:	7bfb      	ldrb	r3, [r7, #15]
}
 800a174:	4618      	mov	r0, r3
 800a176:	3710      	adds	r7, #16
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	460b      	mov	r3, r1
 800a186:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a188:	2300      	movs	r3, #0
 800a18a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a18c:	2300      	movs	r3, #0
 800a18e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a196:	78fa      	ldrb	r2, [r7, #3]
 800a198:	4611      	mov	r1, r2
 800a19a:	4618      	mov	r0, r3
 800a19c:	f7f9 fe49 	bl	8003e32 <HAL_PCD_EP_SetStall>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a1a4:	7bbb      	ldrb	r3, [r7, #14]
 800a1a6:	2b03      	cmp	r3, #3
 800a1a8:	d816      	bhi.n	800a1d8 <USBD_LL_StallEP+0x5c>
 800a1aa:	a201      	add	r2, pc, #4	; (adr r2, 800a1b0 <USBD_LL_StallEP+0x34>)
 800a1ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1b0:	0800a1c1 	.word	0x0800a1c1
 800a1b4:	0800a1c7 	.word	0x0800a1c7
 800a1b8:	0800a1cd 	.word	0x0800a1cd
 800a1bc:	0800a1d3 	.word	0x0800a1d3
    case HAL_OK :
      usb_status = USBD_OK;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	73fb      	strb	r3, [r7, #15]
    break;
 800a1c4:	e00b      	b.n	800a1de <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a1c6:	2303      	movs	r3, #3
 800a1c8:	73fb      	strb	r3, [r7, #15]
    break;
 800a1ca:	e008      	b.n	800a1de <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a1d0:	e005      	b.n	800a1de <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a1d2:	2303      	movs	r3, #3
 800a1d4:	73fb      	strb	r3, [r7, #15]
    break;
 800a1d6:	e002      	b.n	800a1de <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a1d8:	2303      	movs	r3, #3
 800a1da:	73fb      	strb	r3, [r7, #15]
    break;
 800a1dc:	bf00      	nop
  }
  return usb_status;
 800a1de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3710      	adds	r7, #16
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a202:	78fa      	ldrb	r2, [r7, #3]
 800a204:	4611      	mov	r1, r2
 800a206:	4618      	mov	r0, r3
 800a208:	f7f9 fe75 	bl	8003ef6 <HAL_PCD_EP_ClrStall>
 800a20c:	4603      	mov	r3, r0
 800a20e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a210:	7bbb      	ldrb	r3, [r7, #14]
 800a212:	2b03      	cmp	r3, #3
 800a214:	d816      	bhi.n	800a244 <USBD_LL_ClearStallEP+0x5c>
 800a216:	a201      	add	r2, pc, #4	; (adr r2, 800a21c <USBD_LL_ClearStallEP+0x34>)
 800a218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a21c:	0800a22d 	.word	0x0800a22d
 800a220:	0800a233 	.word	0x0800a233
 800a224:	0800a239 	.word	0x0800a239
 800a228:	0800a23f 	.word	0x0800a23f
    case HAL_OK :
      usb_status = USBD_OK;
 800a22c:	2300      	movs	r3, #0
 800a22e:	73fb      	strb	r3, [r7, #15]
    break;
 800a230:	e00b      	b.n	800a24a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a232:	2303      	movs	r3, #3
 800a234:	73fb      	strb	r3, [r7, #15]
    break;
 800a236:	e008      	b.n	800a24a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a238:	2301      	movs	r3, #1
 800a23a:	73fb      	strb	r3, [r7, #15]
    break;
 800a23c:	e005      	b.n	800a24a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a23e:	2303      	movs	r3, #3
 800a240:	73fb      	strb	r3, [r7, #15]
    break;
 800a242:	e002      	b.n	800a24a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a244:	2303      	movs	r3, #3
 800a246:	73fb      	strb	r3, [r7, #15]
    break;
 800a248:	bf00      	nop
  }
  return usb_status;
 800a24a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3710      	adds	r7, #16
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a254:	b480      	push	{r7}
 800a256:	b085      	sub	sp, #20
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	460b      	mov	r3, r1
 800a25e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a266:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a268:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	da0b      	bge.n	800a288 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a270:	78fb      	ldrb	r3, [r7, #3]
 800a272:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a276:	68f9      	ldr	r1, [r7, #12]
 800a278:	4613      	mov	r3, r2
 800a27a:	00db      	lsls	r3, r3, #3
 800a27c:	4413      	add	r3, r2
 800a27e:	009b      	lsls	r3, r3, #2
 800a280:	440b      	add	r3, r1
 800a282:	333e      	adds	r3, #62	; 0x3e
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	e00b      	b.n	800a2a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a288:	78fb      	ldrb	r3, [r7, #3]
 800a28a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a28e:	68f9      	ldr	r1, [r7, #12]
 800a290:	4613      	mov	r3, r2
 800a292:	00db      	lsls	r3, r3, #3
 800a294:	4413      	add	r3, r2
 800a296:	009b      	lsls	r3, r3, #2
 800a298:	440b      	add	r3, r1
 800a29a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a29e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3714      	adds	r7, #20
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr

0800a2ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a2c6:	78fa      	ldrb	r2, [r7, #3]
 800a2c8:	4611      	mov	r1, r2
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f7f9 fc77 	bl	8003bbe <HAL_PCD_SetAddress>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a2d4:	7bbb      	ldrb	r3, [r7, #14]
 800a2d6:	2b03      	cmp	r3, #3
 800a2d8:	d816      	bhi.n	800a308 <USBD_LL_SetUSBAddress+0x5c>
 800a2da:	a201      	add	r2, pc, #4	; (adr r2, 800a2e0 <USBD_LL_SetUSBAddress+0x34>)
 800a2dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2e0:	0800a2f1 	.word	0x0800a2f1
 800a2e4:	0800a2f7 	.word	0x0800a2f7
 800a2e8:	0800a2fd 	.word	0x0800a2fd
 800a2ec:	0800a303 	.word	0x0800a303
    case HAL_OK :
      usb_status = USBD_OK;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	73fb      	strb	r3, [r7, #15]
    break;
 800a2f4:	e00b      	b.n	800a30e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a2f6:	2303      	movs	r3, #3
 800a2f8:	73fb      	strb	r3, [r7, #15]
    break;
 800a2fa:	e008      	b.n	800a30e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	73fb      	strb	r3, [r7, #15]
    break;
 800a300:	e005      	b.n	800a30e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a302:	2303      	movs	r3, #3
 800a304:	73fb      	strb	r3, [r7, #15]
    break;
 800a306:	e002      	b.n	800a30e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800a308:	2303      	movs	r3, #3
 800a30a:	73fb      	strb	r3, [r7, #15]
    break;
 800a30c:	bf00      	nop
  }
  return usb_status;
 800a30e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a310:	4618      	mov	r0, r3
 800a312:	3710      	adds	r7, #16
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b086      	sub	sp, #24
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	607a      	str	r2, [r7, #4]
 800a322:	603b      	str	r3, [r7, #0]
 800a324:	460b      	mov	r3, r1
 800a326:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a328:	2300      	movs	r3, #0
 800a32a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a32c:	2300      	movs	r3, #0
 800a32e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a336:	7af9      	ldrb	r1, [r7, #11]
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	687a      	ldr	r2, [r7, #4]
 800a33c:	f7f9 fd48 	bl	8003dd0 <HAL_PCD_EP_Transmit>
 800a340:	4603      	mov	r3, r0
 800a342:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800a344:	7dbb      	ldrb	r3, [r7, #22]
 800a346:	2b03      	cmp	r3, #3
 800a348:	d816      	bhi.n	800a378 <USBD_LL_Transmit+0x60>
 800a34a:	a201      	add	r2, pc, #4	; (adr r2, 800a350 <USBD_LL_Transmit+0x38>)
 800a34c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a350:	0800a361 	.word	0x0800a361
 800a354:	0800a367 	.word	0x0800a367
 800a358:	0800a36d 	.word	0x0800a36d
 800a35c:	0800a373 	.word	0x0800a373
    case HAL_OK :
      usb_status = USBD_OK;
 800a360:	2300      	movs	r3, #0
 800a362:	75fb      	strb	r3, [r7, #23]
    break;
 800a364:	e00b      	b.n	800a37e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a366:	2303      	movs	r3, #3
 800a368:	75fb      	strb	r3, [r7, #23]
    break;
 800a36a:	e008      	b.n	800a37e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a36c:	2301      	movs	r3, #1
 800a36e:	75fb      	strb	r3, [r7, #23]
    break;
 800a370:	e005      	b.n	800a37e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a372:	2303      	movs	r3, #3
 800a374:	75fb      	strb	r3, [r7, #23]
    break;
 800a376:	e002      	b.n	800a37e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800a378:	2303      	movs	r3, #3
 800a37a:	75fb      	strb	r3, [r7, #23]
    break;
 800a37c:	bf00      	nop
  }
  return usb_status;
 800a37e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a380:	4618      	mov	r0, r3
 800a382:	3718      	adds	r7, #24
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b086      	sub	sp, #24
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	60f8      	str	r0, [r7, #12]
 800a390:	607a      	str	r2, [r7, #4]
 800a392:	603b      	str	r3, [r7, #0]
 800a394:	460b      	mov	r3, r1
 800a396:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a398:	2300      	movs	r3, #0
 800a39a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a39c:	2300      	movs	r3, #0
 800a39e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a3a6:	7af9      	ldrb	r1, [r7, #11]
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	687a      	ldr	r2, [r7, #4]
 800a3ac:	f7f9 fcde 	bl	8003d6c <HAL_PCD_EP_Receive>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800a3b4:	7dbb      	ldrb	r3, [r7, #22]
 800a3b6:	2b03      	cmp	r3, #3
 800a3b8:	d816      	bhi.n	800a3e8 <USBD_LL_PrepareReceive+0x60>
 800a3ba:	a201      	add	r2, pc, #4	; (adr r2, 800a3c0 <USBD_LL_PrepareReceive+0x38>)
 800a3bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3c0:	0800a3d1 	.word	0x0800a3d1
 800a3c4:	0800a3d7 	.word	0x0800a3d7
 800a3c8:	0800a3dd 	.word	0x0800a3dd
 800a3cc:	0800a3e3 	.word	0x0800a3e3
    case HAL_OK :
      usb_status = USBD_OK;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	75fb      	strb	r3, [r7, #23]
    break;
 800a3d4:	e00b      	b.n	800a3ee <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a3d6:	2303      	movs	r3, #3
 800a3d8:	75fb      	strb	r3, [r7, #23]
    break;
 800a3da:	e008      	b.n	800a3ee <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	75fb      	strb	r3, [r7, #23]
    break;
 800a3e0:	e005      	b.n	800a3ee <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a3e2:	2303      	movs	r3, #3
 800a3e4:	75fb      	strb	r3, [r7, #23]
    break;
 800a3e6:	e002      	b.n	800a3ee <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800a3e8:	2303      	movs	r3, #3
 800a3ea:	75fb      	strb	r3, [r7, #23]
    break;
 800a3ec:	bf00      	nop
  }
  return usb_status;
 800a3ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3718      	adds	r7, #24
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	460b      	mov	r3, r1
 800a402:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a404:	78fb      	ldrb	r3, [r7, #3]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d002      	beq.n	800a410 <HAL_PCDEx_LPM_Callback+0x18>
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	d01f      	beq.n	800a44e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a40e:	e03b      	b.n	800a488 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6a1b      	ldr	r3, [r3, #32]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d007      	beq.n	800a428 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a418:	f000 f854 	bl	800a4c4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a41c:	4b1c      	ldr	r3, [pc, #112]	; (800a490 <HAL_PCDEx_LPM_Callback+0x98>)
 800a41e:	691b      	ldr	r3, [r3, #16]
 800a420:	4a1b      	ldr	r2, [pc, #108]	; (800a490 <HAL_PCDEx_LPM_Callback+0x98>)
 800a422:	f023 0306 	bic.w	r3, r3, #6
 800a426:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	6812      	ldr	r2, [r2, #0]
 800a436:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a43a:	f023 0301 	bic.w	r3, r3, #1
 800a43e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a446:	4618      	mov	r0, r3
 800a448:	f7fe fa41 	bl	80088ce <USBD_LL_Resume>
    break;
 800a44c:	e01c      	b.n	800a488 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	6812      	ldr	r2, [r2, #0]
 800a45c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a460:	f043 0301 	orr.w	r3, r3, #1
 800a464:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7fe fa12 	bl	8008896 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6a1b      	ldr	r3, [r3, #32]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d005      	beq.n	800a486 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a47a:	4b05      	ldr	r3, [pc, #20]	; (800a490 <HAL_PCDEx_LPM_Callback+0x98>)
 800a47c:	691b      	ldr	r3, [r3, #16]
 800a47e:	4a04      	ldr	r2, [pc, #16]	; (800a490 <HAL_PCDEx_LPM_Callback+0x98>)
 800a480:	f043 0306 	orr.w	r3, r3, #6
 800a484:	6113      	str	r3, [r2, #16]
    break;
 800a486:	bf00      	nop
}
 800a488:	bf00      	nop
 800a48a:	3708      	adds	r7, #8
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}
 800a490:	e000ed00 	.word	0xe000ed00

0800a494 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a494:	b480      	push	{r7}
 800a496:	b083      	sub	sp, #12
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800a49c:	4b03      	ldr	r3, [pc, #12]	; (800a4ac <USBD_static_malloc+0x18>)
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	370c      	adds	r7, #12
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr
 800a4aa:	bf00      	nop
 800a4ac:	20000e04 	.word	0x20000e04

0800a4b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b083      	sub	sp, #12
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]

}
 800a4b8:	bf00      	nop
 800a4ba:	370c      	adds	r7, #12
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a4c8:	f7f6 fc24 	bl	8000d14 <SystemClock_Config>
}
 800a4cc:	bf00      	nop
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <std>:
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	b510      	push	{r4, lr}
 800a4d4:	4604      	mov	r4, r0
 800a4d6:	e9c0 3300 	strd	r3, r3, [r0]
 800a4da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a4de:	6083      	str	r3, [r0, #8]
 800a4e0:	8181      	strh	r1, [r0, #12]
 800a4e2:	6643      	str	r3, [r0, #100]	; 0x64
 800a4e4:	81c2      	strh	r2, [r0, #14]
 800a4e6:	6183      	str	r3, [r0, #24]
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	2208      	movs	r2, #8
 800a4ec:	305c      	adds	r0, #92	; 0x5c
 800a4ee:	f000 f906 	bl	800a6fe <memset>
 800a4f2:	4b0d      	ldr	r3, [pc, #52]	; (800a528 <std+0x58>)
 800a4f4:	6263      	str	r3, [r4, #36]	; 0x24
 800a4f6:	4b0d      	ldr	r3, [pc, #52]	; (800a52c <std+0x5c>)
 800a4f8:	62a3      	str	r3, [r4, #40]	; 0x28
 800a4fa:	4b0d      	ldr	r3, [pc, #52]	; (800a530 <std+0x60>)
 800a4fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a4fe:	4b0d      	ldr	r3, [pc, #52]	; (800a534 <std+0x64>)
 800a500:	6323      	str	r3, [r4, #48]	; 0x30
 800a502:	4b0d      	ldr	r3, [pc, #52]	; (800a538 <std+0x68>)
 800a504:	6224      	str	r4, [r4, #32]
 800a506:	429c      	cmp	r4, r3
 800a508:	d006      	beq.n	800a518 <std+0x48>
 800a50a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a50e:	4294      	cmp	r4, r2
 800a510:	d002      	beq.n	800a518 <std+0x48>
 800a512:	33d0      	adds	r3, #208	; 0xd0
 800a514:	429c      	cmp	r4, r3
 800a516:	d105      	bne.n	800a524 <std+0x54>
 800a518:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a51c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a520:	f000 b966 	b.w	800a7f0 <__retarget_lock_init_recursive>
 800a524:	bd10      	pop	{r4, pc}
 800a526:	bf00      	nop
 800a528:	0800a679 	.word	0x0800a679
 800a52c:	0800a69b 	.word	0x0800a69b
 800a530:	0800a6d3 	.word	0x0800a6d3
 800a534:	0800a6f7 	.word	0x0800a6f7
 800a538:	20000e20 	.word	0x20000e20

0800a53c <stdio_exit_handler>:
 800a53c:	4a02      	ldr	r2, [pc, #8]	; (800a548 <stdio_exit_handler+0xc>)
 800a53e:	4903      	ldr	r1, [pc, #12]	; (800a54c <stdio_exit_handler+0x10>)
 800a540:	4803      	ldr	r0, [pc, #12]	; (800a550 <stdio_exit_handler+0x14>)
 800a542:	f000 b869 	b.w	800a618 <_fwalk_sglue>
 800a546:	bf00      	nop
 800a548:	2000012c 	.word	0x2000012c
 800a54c:	0800b09d 	.word	0x0800b09d
 800a550:	20000138 	.word	0x20000138

0800a554 <cleanup_stdio>:
 800a554:	6841      	ldr	r1, [r0, #4]
 800a556:	4b0c      	ldr	r3, [pc, #48]	; (800a588 <cleanup_stdio+0x34>)
 800a558:	4299      	cmp	r1, r3
 800a55a:	b510      	push	{r4, lr}
 800a55c:	4604      	mov	r4, r0
 800a55e:	d001      	beq.n	800a564 <cleanup_stdio+0x10>
 800a560:	f000 fd9c 	bl	800b09c <_fflush_r>
 800a564:	68a1      	ldr	r1, [r4, #8]
 800a566:	4b09      	ldr	r3, [pc, #36]	; (800a58c <cleanup_stdio+0x38>)
 800a568:	4299      	cmp	r1, r3
 800a56a:	d002      	beq.n	800a572 <cleanup_stdio+0x1e>
 800a56c:	4620      	mov	r0, r4
 800a56e:	f000 fd95 	bl	800b09c <_fflush_r>
 800a572:	68e1      	ldr	r1, [r4, #12]
 800a574:	4b06      	ldr	r3, [pc, #24]	; (800a590 <cleanup_stdio+0x3c>)
 800a576:	4299      	cmp	r1, r3
 800a578:	d004      	beq.n	800a584 <cleanup_stdio+0x30>
 800a57a:	4620      	mov	r0, r4
 800a57c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a580:	f000 bd8c 	b.w	800b09c <_fflush_r>
 800a584:	bd10      	pop	{r4, pc}
 800a586:	bf00      	nop
 800a588:	20000e20 	.word	0x20000e20
 800a58c:	20000e88 	.word	0x20000e88
 800a590:	20000ef0 	.word	0x20000ef0

0800a594 <global_stdio_init.part.0>:
 800a594:	b510      	push	{r4, lr}
 800a596:	4b0b      	ldr	r3, [pc, #44]	; (800a5c4 <global_stdio_init.part.0+0x30>)
 800a598:	4c0b      	ldr	r4, [pc, #44]	; (800a5c8 <global_stdio_init.part.0+0x34>)
 800a59a:	4a0c      	ldr	r2, [pc, #48]	; (800a5cc <global_stdio_init.part.0+0x38>)
 800a59c:	601a      	str	r2, [r3, #0]
 800a59e:	4620      	mov	r0, r4
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	2104      	movs	r1, #4
 800a5a4:	f7ff ff94 	bl	800a4d0 <std>
 800a5a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	2109      	movs	r1, #9
 800a5b0:	f7ff ff8e 	bl	800a4d0 <std>
 800a5b4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a5b8:	2202      	movs	r2, #2
 800a5ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5be:	2112      	movs	r1, #18
 800a5c0:	f7ff bf86 	b.w	800a4d0 <std>
 800a5c4:	20000f58 	.word	0x20000f58
 800a5c8:	20000e20 	.word	0x20000e20
 800a5cc:	0800a53d 	.word	0x0800a53d

0800a5d0 <__sfp_lock_acquire>:
 800a5d0:	4801      	ldr	r0, [pc, #4]	; (800a5d8 <__sfp_lock_acquire+0x8>)
 800a5d2:	f000 b90e 	b.w	800a7f2 <__retarget_lock_acquire_recursive>
 800a5d6:	bf00      	nop
 800a5d8:	20000f61 	.word	0x20000f61

0800a5dc <__sfp_lock_release>:
 800a5dc:	4801      	ldr	r0, [pc, #4]	; (800a5e4 <__sfp_lock_release+0x8>)
 800a5de:	f000 b909 	b.w	800a7f4 <__retarget_lock_release_recursive>
 800a5e2:	bf00      	nop
 800a5e4:	20000f61 	.word	0x20000f61

0800a5e8 <__sinit>:
 800a5e8:	b510      	push	{r4, lr}
 800a5ea:	4604      	mov	r4, r0
 800a5ec:	f7ff fff0 	bl	800a5d0 <__sfp_lock_acquire>
 800a5f0:	6a23      	ldr	r3, [r4, #32]
 800a5f2:	b11b      	cbz	r3, 800a5fc <__sinit+0x14>
 800a5f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5f8:	f7ff bff0 	b.w	800a5dc <__sfp_lock_release>
 800a5fc:	4b04      	ldr	r3, [pc, #16]	; (800a610 <__sinit+0x28>)
 800a5fe:	6223      	str	r3, [r4, #32]
 800a600:	4b04      	ldr	r3, [pc, #16]	; (800a614 <__sinit+0x2c>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d1f5      	bne.n	800a5f4 <__sinit+0xc>
 800a608:	f7ff ffc4 	bl	800a594 <global_stdio_init.part.0>
 800a60c:	e7f2      	b.n	800a5f4 <__sinit+0xc>
 800a60e:	bf00      	nop
 800a610:	0800a555 	.word	0x0800a555
 800a614:	20000f58 	.word	0x20000f58

0800a618 <_fwalk_sglue>:
 800a618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a61c:	4607      	mov	r7, r0
 800a61e:	4688      	mov	r8, r1
 800a620:	4614      	mov	r4, r2
 800a622:	2600      	movs	r6, #0
 800a624:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a628:	f1b9 0901 	subs.w	r9, r9, #1
 800a62c:	d505      	bpl.n	800a63a <_fwalk_sglue+0x22>
 800a62e:	6824      	ldr	r4, [r4, #0]
 800a630:	2c00      	cmp	r4, #0
 800a632:	d1f7      	bne.n	800a624 <_fwalk_sglue+0xc>
 800a634:	4630      	mov	r0, r6
 800a636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a63a:	89ab      	ldrh	r3, [r5, #12]
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d907      	bls.n	800a650 <_fwalk_sglue+0x38>
 800a640:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a644:	3301      	adds	r3, #1
 800a646:	d003      	beq.n	800a650 <_fwalk_sglue+0x38>
 800a648:	4629      	mov	r1, r5
 800a64a:	4638      	mov	r0, r7
 800a64c:	47c0      	blx	r8
 800a64e:	4306      	orrs	r6, r0
 800a650:	3568      	adds	r5, #104	; 0x68
 800a652:	e7e9      	b.n	800a628 <_fwalk_sglue+0x10>

0800a654 <iprintf>:
 800a654:	b40f      	push	{r0, r1, r2, r3}
 800a656:	b507      	push	{r0, r1, r2, lr}
 800a658:	4906      	ldr	r1, [pc, #24]	; (800a674 <iprintf+0x20>)
 800a65a:	ab04      	add	r3, sp, #16
 800a65c:	6808      	ldr	r0, [r1, #0]
 800a65e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a662:	6881      	ldr	r1, [r0, #8]
 800a664:	9301      	str	r3, [sp, #4]
 800a666:	f000 f9e9 	bl	800aa3c <_vfiprintf_r>
 800a66a:	b003      	add	sp, #12
 800a66c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a670:	b004      	add	sp, #16
 800a672:	4770      	bx	lr
 800a674:	20000184 	.word	0x20000184

0800a678 <__sread>:
 800a678:	b510      	push	{r4, lr}
 800a67a:	460c      	mov	r4, r1
 800a67c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a680:	f000 f868 	bl	800a754 <_read_r>
 800a684:	2800      	cmp	r0, #0
 800a686:	bfab      	itete	ge
 800a688:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a68a:	89a3      	ldrhlt	r3, [r4, #12]
 800a68c:	181b      	addge	r3, r3, r0
 800a68e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a692:	bfac      	ite	ge
 800a694:	6563      	strge	r3, [r4, #84]	; 0x54
 800a696:	81a3      	strhlt	r3, [r4, #12]
 800a698:	bd10      	pop	{r4, pc}

0800a69a <__swrite>:
 800a69a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a69e:	461f      	mov	r7, r3
 800a6a0:	898b      	ldrh	r3, [r1, #12]
 800a6a2:	05db      	lsls	r3, r3, #23
 800a6a4:	4605      	mov	r5, r0
 800a6a6:	460c      	mov	r4, r1
 800a6a8:	4616      	mov	r6, r2
 800a6aa:	d505      	bpl.n	800a6b8 <__swrite+0x1e>
 800a6ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6b0:	2302      	movs	r3, #2
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f000 f83c 	bl	800a730 <_lseek_r>
 800a6b8:	89a3      	ldrh	r3, [r4, #12]
 800a6ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a6c2:	81a3      	strh	r3, [r4, #12]
 800a6c4:	4632      	mov	r2, r6
 800a6c6:	463b      	mov	r3, r7
 800a6c8:	4628      	mov	r0, r5
 800a6ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6ce:	f000 b853 	b.w	800a778 <_write_r>

0800a6d2 <__sseek>:
 800a6d2:	b510      	push	{r4, lr}
 800a6d4:	460c      	mov	r4, r1
 800a6d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6da:	f000 f829 	bl	800a730 <_lseek_r>
 800a6de:	1c43      	adds	r3, r0, #1
 800a6e0:	89a3      	ldrh	r3, [r4, #12]
 800a6e2:	bf15      	itete	ne
 800a6e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a6e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a6ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a6ee:	81a3      	strheq	r3, [r4, #12]
 800a6f0:	bf18      	it	ne
 800a6f2:	81a3      	strhne	r3, [r4, #12]
 800a6f4:	bd10      	pop	{r4, pc}

0800a6f6 <__sclose>:
 800a6f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6fa:	f000 b809 	b.w	800a710 <_close_r>

0800a6fe <memset>:
 800a6fe:	4402      	add	r2, r0
 800a700:	4603      	mov	r3, r0
 800a702:	4293      	cmp	r3, r2
 800a704:	d100      	bne.n	800a708 <memset+0xa>
 800a706:	4770      	bx	lr
 800a708:	f803 1b01 	strb.w	r1, [r3], #1
 800a70c:	e7f9      	b.n	800a702 <memset+0x4>
	...

0800a710 <_close_r>:
 800a710:	b538      	push	{r3, r4, r5, lr}
 800a712:	4d06      	ldr	r5, [pc, #24]	; (800a72c <_close_r+0x1c>)
 800a714:	2300      	movs	r3, #0
 800a716:	4604      	mov	r4, r0
 800a718:	4608      	mov	r0, r1
 800a71a:	602b      	str	r3, [r5, #0]
 800a71c:	f7f7 f8f7 	bl	800190e <_close>
 800a720:	1c43      	adds	r3, r0, #1
 800a722:	d102      	bne.n	800a72a <_close_r+0x1a>
 800a724:	682b      	ldr	r3, [r5, #0]
 800a726:	b103      	cbz	r3, 800a72a <_close_r+0x1a>
 800a728:	6023      	str	r3, [r4, #0]
 800a72a:	bd38      	pop	{r3, r4, r5, pc}
 800a72c:	20000f5c 	.word	0x20000f5c

0800a730 <_lseek_r>:
 800a730:	b538      	push	{r3, r4, r5, lr}
 800a732:	4d07      	ldr	r5, [pc, #28]	; (800a750 <_lseek_r+0x20>)
 800a734:	4604      	mov	r4, r0
 800a736:	4608      	mov	r0, r1
 800a738:	4611      	mov	r1, r2
 800a73a:	2200      	movs	r2, #0
 800a73c:	602a      	str	r2, [r5, #0]
 800a73e:	461a      	mov	r2, r3
 800a740:	f7f7 f90c 	bl	800195c <_lseek>
 800a744:	1c43      	adds	r3, r0, #1
 800a746:	d102      	bne.n	800a74e <_lseek_r+0x1e>
 800a748:	682b      	ldr	r3, [r5, #0]
 800a74a:	b103      	cbz	r3, 800a74e <_lseek_r+0x1e>
 800a74c:	6023      	str	r3, [r4, #0]
 800a74e:	bd38      	pop	{r3, r4, r5, pc}
 800a750:	20000f5c 	.word	0x20000f5c

0800a754 <_read_r>:
 800a754:	b538      	push	{r3, r4, r5, lr}
 800a756:	4d07      	ldr	r5, [pc, #28]	; (800a774 <_read_r+0x20>)
 800a758:	4604      	mov	r4, r0
 800a75a:	4608      	mov	r0, r1
 800a75c:	4611      	mov	r1, r2
 800a75e:	2200      	movs	r2, #0
 800a760:	602a      	str	r2, [r5, #0]
 800a762:	461a      	mov	r2, r3
 800a764:	f7f7 f89a 	bl	800189c <_read>
 800a768:	1c43      	adds	r3, r0, #1
 800a76a:	d102      	bne.n	800a772 <_read_r+0x1e>
 800a76c:	682b      	ldr	r3, [r5, #0]
 800a76e:	b103      	cbz	r3, 800a772 <_read_r+0x1e>
 800a770:	6023      	str	r3, [r4, #0]
 800a772:	bd38      	pop	{r3, r4, r5, pc}
 800a774:	20000f5c 	.word	0x20000f5c

0800a778 <_write_r>:
 800a778:	b538      	push	{r3, r4, r5, lr}
 800a77a:	4d07      	ldr	r5, [pc, #28]	; (800a798 <_write_r+0x20>)
 800a77c:	4604      	mov	r4, r0
 800a77e:	4608      	mov	r0, r1
 800a780:	4611      	mov	r1, r2
 800a782:	2200      	movs	r2, #0
 800a784:	602a      	str	r2, [r5, #0]
 800a786:	461a      	mov	r2, r3
 800a788:	f7f7 f8a5 	bl	80018d6 <_write>
 800a78c:	1c43      	adds	r3, r0, #1
 800a78e:	d102      	bne.n	800a796 <_write_r+0x1e>
 800a790:	682b      	ldr	r3, [r5, #0]
 800a792:	b103      	cbz	r3, 800a796 <_write_r+0x1e>
 800a794:	6023      	str	r3, [r4, #0]
 800a796:	bd38      	pop	{r3, r4, r5, pc}
 800a798:	20000f5c 	.word	0x20000f5c

0800a79c <__errno>:
 800a79c:	4b01      	ldr	r3, [pc, #4]	; (800a7a4 <__errno+0x8>)
 800a79e:	6818      	ldr	r0, [r3, #0]
 800a7a0:	4770      	bx	lr
 800a7a2:	bf00      	nop
 800a7a4:	20000184 	.word	0x20000184

0800a7a8 <__libc_init_array>:
 800a7a8:	b570      	push	{r4, r5, r6, lr}
 800a7aa:	4d0d      	ldr	r5, [pc, #52]	; (800a7e0 <__libc_init_array+0x38>)
 800a7ac:	4c0d      	ldr	r4, [pc, #52]	; (800a7e4 <__libc_init_array+0x3c>)
 800a7ae:	1b64      	subs	r4, r4, r5
 800a7b0:	10a4      	asrs	r4, r4, #2
 800a7b2:	2600      	movs	r6, #0
 800a7b4:	42a6      	cmp	r6, r4
 800a7b6:	d109      	bne.n	800a7cc <__libc_init_array+0x24>
 800a7b8:	4d0b      	ldr	r5, [pc, #44]	; (800a7e8 <__libc_init_array+0x40>)
 800a7ba:	4c0c      	ldr	r4, [pc, #48]	; (800a7ec <__libc_init_array+0x44>)
 800a7bc:	f000 fdc0 	bl	800b340 <_init>
 800a7c0:	1b64      	subs	r4, r4, r5
 800a7c2:	10a4      	asrs	r4, r4, #2
 800a7c4:	2600      	movs	r6, #0
 800a7c6:	42a6      	cmp	r6, r4
 800a7c8:	d105      	bne.n	800a7d6 <__libc_init_array+0x2e>
 800a7ca:	bd70      	pop	{r4, r5, r6, pc}
 800a7cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7d0:	4798      	blx	r3
 800a7d2:	3601      	adds	r6, #1
 800a7d4:	e7ee      	b.n	800a7b4 <__libc_init_array+0xc>
 800a7d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7da:	4798      	blx	r3
 800a7dc:	3601      	adds	r6, #1
 800a7de:	e7f2      	b.n	800a7c6 <__libc_init_array+0x1e>
 800a7e0:	0800b448 	.word	0x0800b448
 800a7e4:	0800b448 	.word	0x0800b448
 800a7e8:	0800b448 	.word	0x0800b448
 800a7ec:	0800b44c 	.word	0x0800b44c

0800a7f0 <__retarget_lock_init_recursive>:
 800a7f0:	4770      	bx	lr

0800a7f2 <__retarget_lock_acquire_recursive>:
 800a7f2:	4770      	bx	lr

0800a7f4 <__retarget_lock_release_recursive>:
 800a7f4:	4770      	bx	lr
	...

0800a7f8 <_free_r>:
 800a7f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7fa:	2900      	cmp	r1, #0
 800a7fc:	d044      	beq.n	800a888 <_free_r+0x90>
 800a7fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a802:	9001      	str	r0, [sp, #4]
 800a804:	2b00      	cmp	r3, #0
 800a806:	f1a1 0404 	sub.w	r4, r1, #4
 800a80a:	bfb8      	it	lt
 800a80c:	18e4      	addlt	r4, r4, r3
 800a80e:	f000 f8df 	bl	800a9d0 <__malloc_lock>
 800a812:	4a1e      	ldr	r2, [pc, #120]	; (800a88c <_free_r+0x94>)
 800a814:	9801      	ldr	r0, [sp, #4]
 800a816:	6813      	ldr	r3, [r2, #0]
 800a818:	b933      	cbnz	r3, 800a828 <_free_r+0x30>
 800a81a:	6063      	str	r3, [r4, #4]
 800a81c:	6014      	str	r4, [r2, #0]
 800a81e:	b003      	add	sp, #12
 800a820:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a824:	f000 b8da 	b.w	800a9dc <__malloc_unlock>
 800a828:	42a3      	cmp	r3, r4
 800a82a:	d908      	bls.n	800a83e <_free_r+0x46>
 800a82c:	6825      	ldr	r5, [r4, #0]
 800a82e:	1961      	adds	r1, r4, r5
 800a830:	428b      	cmp	r3, r1
 800a832:	bf01      	itttt	eq
 800a834:	6819      	ldreq	r1, [r3, #0]
 800a836:	685b      	ldreq	r3, [r3, #4]
 800a838:	1949      	addeq	r1, r1, r5
 800a83a:	6021      	streq	r1, [r4, #0]
 800a83c:	e7ed      	b.n	800a81a <_free_r+0x22>
 800a83e:	461a      	mov	r2, r3
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	b10b      	cbz	r3, 800a848 <_free_r+0x50>
 800a844:	42a3      	cmp	r3, r4
 800a846:	d9fa      	bls.n	800a83e <_free_r+0x46>
 800a848:	6811      	ldr	r1, [r2, #0]
 800a84a:	1855      	adds	r5, r2, r1
 800a84c:	42a5      	cmp	r5, r4
 800a84e:	d10b      	bne.n	800a868 <_free_r+0x70>
 800a850:	6824      	ldr	r4, [r4, #0]
 800a852:	4421      	add	r1, r4
 800a854:	1854      	adds	r4, r2, r1
 800a856:	42a3      	cmp	r3, r4
 800a858:	6011      	str	r1, [r2, #0]
 800a85a:	d1e0      	bne.n	800a81e <_free_r+0x26>
 800a85c:	681c      	ldr	r4, [r3, #0]
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	6053      	str	r3, [r2, #4]
 800a862:	440c      	add	r4, r1
 800a864:	6014      	str	r4, [r2, #0]
 800a866:	e7da      	b.n	800a81e <_free_r+0x26>
 800a868:	d902      	bls.n	800a870 <_free_r+0x78>
 800a86a:	230c      	movs	r3, #12
 800a86c:	6003      	str	r3, [r0, #0]
 800a86e:	e7d6      	b.n	800a81e <_free_r+0x26>
 800a870:	6825      	ldr	r5, [r4, #0]
 800a872:	1961      	adds	r1, r4, r5
 800a874:	428b      	cmp	r3, r1
 800a876:	bf04      	itt	eq
 800a878:	6819      	ldreq	r1, [r3, #0]
 800a87a:	685b      	ldreq	r3, [r3, #4]
 800a87c:	6063      	str	r3, [r4, #4]
 800a87e:	bf04      	itt	eq
 800a880:	1949      	addeq	r1, r1, r5
 800a882:	6021      	streq	r1, [r4, #0]
 800a884:	6054      	str	r4, [r2, #4]
 800a886:	e7ca      	b.n	800a81e <_free_r+0x26>
 800a888:	b003      	add	sp, #12
 800a88a:	bd30      	pop	{r4, r5, pc}
 800a88c:	20000f64 	.word	0x20000f64

0800a890 <sbrk_aligned>:
 800a890:	b570      	push	{r4, r5, r6, lr}
 800a892:	4e0e      	ldr	r6, [pc, #56]	; (800a8cc <sbrk_aligned+0x3c>)
 800a894:	460c      	mov	r4, r1
 800a896:	6831      	ldr	r1, [r6, #0]
 800a898:	4605      	mov	r5, r0
 800a89a:	b911      	cbnz	r1, 800a8a2 <sbrk_aligned+0x12>
 800a89c:	f000 fcbc 	bl	800b218 <_sbrk_r>
 800a8a0:	6030      	str	r0, [r6, #0]
 800a8a2:	4621      	mov	r1, r4
 800a8a4:	4628      	mov	r0, r5
 800a8a6:	f000 fcb7 	bl	800b218 <_sbrk_r>
 800a8aa:	1c43      	adds	r3, r0, #1
 800a8ac:	d00a      	beq.n	800a8c4 <sbrk_aligned+0x34>
 800a8ae:	1cc4      	adds	r4, r0, #3
 800a8b0:	f024 0403 	bic.w	r4, r4, #3
 800a8b4:	42a0      	cmp	r0, r4
 800a8b6:	d007      	beq.n	800a8c8 <sbrk_aligned+0x38>
 800a8b8:	1a21      	subs	r1, r4, r0
 800a8ba:	4628      	mov	r0, r5
 800a8bc:	f000 fcac 	bl	800b218 <_sbrk_r>
 800a8c0:	3001      	adds	r0, #1
 800a8c2:	d101      	bne.n	800a8c8 <sbrk_aligned+0x38>
 800a8c4:	f04f 34ff 	mov.w	r4, #4294967295
 800a8c8:	4620      	mov	r0, r4
 800a8ca:	bd70      	pop	{r4, r5, r6, pc}
 800a8cc:	20000f68 	.word	0x20000f68

0800a8d0 <_malloc_r>:
 800a8d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8d4:	1ccd      	adds	r5, r1, #3
 800a8d6:	f025 0503 	bic.w	r5, r5, #3
 800a8da:	3508      	adds	r5, #8
 800a8dc:	2d0c      	cmp	r5, #12
 800a8de:	bf38      	it	cc
 800a8e0:	250c      	movcc	r5, #12
 800a8e2:	2d00      	cmp	r5, #0
 800a8e4:	4607      	mov	r7, r0
 800a8e6:	db01      	blt.n	800a8ec <_malloc_r+0x1c>
 800a8e8:	42a9      	cmp	r1, r5
 800a8ea:	d905      	bls.n	800a8f8 <_malloc_r+0x28>
 800a8ec:	230c      	movs	r3, #12
 800a8ee:	603b      	str	r3, [r7, #0]
 800a8f0:	2600      	movs	r6, #0
 800a8f2:	4630      	mov	r0, r6
 800a8f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a9cc <_malloc_r+0xfc>
 800a8fc:	f000 f868 	bl	800a9d0 <__malloc_lock>
 800a900:	f8d8 3000 	ldr.w	r3, [r8]
 800a904:	461c      	mov	r4, r3
 800a906:	bb5c      	cbnz	r4, 800a960 <_malloc_r+0x90>
 800a908:	4629      	mov	r1, r5
 800a90a:	4638      	mov	r0, r7
 800a90c:	f7ff ffc0 	bl	800a890 <sbrk_aligned>
 800a910:	1c43      	adds	r3, r0, #1
 800a912:	4604      	mov	r4, r0
 800a914:	d155      	bne.n	800a9c2 <_malloc_r+0xf2>
 800a916:	f8d8 4000 	ldr.w	r4, [r8]
 800a91a:	4626      	mov	r6, r4
 800a91c:	2e00      	cmp	r6, #0
 800a91e:	d145      	bne.n	800a9ac <_malloc_r+0xdc>
 800a920:	2c00      	cmp	r4, #0
 800a922:	d048      	beq.n	800a9b6 <_malloc_r+0xe6>
 800a924:	6823      	ldr	r3, [r4, #0]
 800a926:	4631      	mov	r1, r6
 800a928:	4638      	mov	r0, r7
 800a92a:	eb04 0903 	add.w	r9, r4, r3
 800a92e:	f000 fc73 	bl	800b218 <_sbrk_r>
 800a932:	4581      	cmp	r9, r0
 800a934:	d13f      	bne.n	800a9b6 <_malloc_r+0xe6>
 800a936:	6821      	ldr	r1, [r4, #0]
 800a938:	1a6d      	subs	r5, r5, r1
 800a93a:	4629      	mov	r1, r5
 800a93c:	4638      	mov	r0, r7
 800a93e:	f7ff ffa7 	bl	800a890 <sbrk_aligned>
 800a942:	3001      	adds	r0, #1
 800a944:	d037      	beq.n	800a9b6 <_malloc_r+0xe6>
 800a946:	6823      	ldr	r3, [r4, #0]
 800a948:	442b      	add	r3, r5
 800a94a:	6023      	str	r3, [r4, #0]
 800a94c:	f8d8 3000 	ldr.w	r3, [r8]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d038      	beq.n	800a9c6 <_malloc_r+0xf6>
 800a954:	685a      	ldr	r2, [r3, #4]
 800a956:	42a2      	cmp	r2, r4
 800a958:	d12b      	bne.n	800a9b2 <_malloc_r+0xe2>
 800a95a:	2200      	movs	r2, #0
 800a95c:	605a      	str	r2, [r3, #4]
 800a95e:	e00f      	b.n	800a980 <_malloc_r+0xb0>
 800a960:	6822      	ldr	r2, [r4, #0]
 800a962:	1b52      	subs	r2, r2, r5
 800a964:	d41f      	bmi.n	800a9a6 <_malloc_r+0xd6>
 800a966:	2a0b      	cmp	r2, #11
 800a968:	d917      	bls.n	800a99a <_malloc_r+0xca>
 800a96a:	1961      	adds	r1, r4, r5
 800a96c:	42a3      	cmp	r3, r4
 800a96e:	6025      	str	r5, [r4, #0]
 800a970:	bf18      	it	ne
 800a972:	6059      	strne	r1, [r3, #4]
 800a974:	6863      	ldr	r3, [r4, #4]
 800a976:	bf08      	it	eq
 800a978:	f8c8 1000 	streq.w	r1, [r8]
 800a97c:	5162      	str	r2, [r4, r5]
 800a97e:	604b      	str	r3, [r1, #4]
 800a980:	4638      	mov	r0, r7
 800a982:	f104 060b 	add.w	r6, r4, #11
 800a986:	f000 f829 	bl	800a9dc <__malloc_unlock>
 800a98a:	f026 0607 	bic.w	r6, r6, #7
 800a98e:	1d23      	adds	r3, r4, #4
 800a990:	1af2      	subs	r2, r6, r3
 800a992:	d0ae      	beq.n	800a8f2 <_malloc_r+0x22>
 800a994:	1b9b      	subs	r3, r3, r6
 800a996:	50a3      	str	r3, [r4, r2]
 800a998:	e7ab      	b.n	800a8f2 <_malloc_r+0x22>
 800a99a:	42a3      	cmp	r3, r4
 800a99c:	6862      	ldr	r2, [r4, #4]
 800a99e:	d1dd      	bne.n	800a95c <_malloc_r+0x8c>
 800a9a0:	f8c8 2000 	str.w	r2, [r8]
 800a9a4:	e7ec      	b.n	800a980 <_malloc_r+0xb0>
 800a9a6:	4623      	mov	r3, r4
 800a9a8:	6864      	ldr	r4, [r4, #4]
 800a9aa:	e7ac      	b.n	800a906 <_malloc_r+0x36>
 800a9ac:	4634      	mov	r4, r6
 800a9ae:	6876      	ldr	r6, [r6, #4]
 800a9b0:	e7b4      	b.n	800a91c <_malloc_r+0x4c>
 800a9b2:	4613      	mov	r3, r2
 800a9b4:	e7cc      	b.n	800a950 <_malloc_r+0x80>
 800a9b6:	230c      	movs	r3, #12
 800a9b8:	603b      	str	r3, [r7, #0]
 800a9ba:	4638      	mov	r0, r7
 800a9bc:	f000 f80e 	bl	800a9dc <__malloc_unlock>
 800a9c0:	e797      	b.n	800a8f2 <_malloc_r+0x22>
 800a9c2:	6025      	str	r5, [r4, #0]
 800a9c4:	e7dc      	b.n	800a980 <_malloc_r+0xb0>
 800a9c6:	605b      	str	r3, [r3, #4]
 800a9c8:	deff      	udf	#255	; 0xff
 800a9ca:	bf00      	nop
 800a9cc:	20000f64 	.word	0x20000f64

0800a9d0 <__malloc_lock>:
 800a9d0:	4801      	ldr	r0, [pc, #4]	; (800a9d8 <__malloc_lock+0x8>)
 800a9d2:	f7ff bf0e 	b.w	800a7f2 <__retarget_lock_acquire_recursive>
 800a9d6:	bf00      	nop
 800a9d8:	20000f60 	.word	0x20000f60

0800a9dc <__malloc_unlock>:
 800a9dc:	4801      	ldr	r0, [pc, #4]	; (800a9e4 <__malloc_unlock+0x8>)
 800a9de:	f7ff bf09 	b.w	800a7f4 <__retarget_lock_release_recursive>
 800a9e2:	bf00      	nop
 800a9e4:	20000f60 	.word	0x20000f60

0800a9e8 <__sfputc_r>:
 800a9e8:	6893      	ldr	r3, [r2, #8]
 800a9ea:	3b01      	subs	r3, #1
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	b410      	push	{r4}
 800a9f0:	6093      	str	r3, [r2, #8]
 800a9f2:	da08      	bge.n	800aa06 <__sfputc_r+0x1e>
 800a9f4:	6994      	ldr	r4, [r2, #24]
 800a9f6:	42a3      	cmp	r3, r4
 800a9f8:	db01      	blt.n	800a9fe <__sfputc_r+0x16>
 800a9fa:	290a      	cmp	r1, #10
 800a9fc:	d103      	bne.n	800aa06 <__sfputc_r+0x1e>
 800a9fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa02:	f000 bb73 	b.w	800b0ec <__swbuf_r>
 800aa06:	6813      	ldr	r3, [r2, #0]
 800aa08:	1c58      	adds	r0, r3, #1
 800aa0a:	6010      	str	r0, [r2, #0]
 800aa0c:	7019      	strb	r1, [r3, #0]
 800aa0e:	4608      	mov	r0, r1
 800aa10:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa14:	4770      	bx	lr

0800aa16 <__sfputs_r>:
 800aa16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa18:	4606      	mov	r6, r0
 800aa1a:	460f      	mov	r7, r1
 800aa1c:	4614      	mov	r4, r2
 800aa1e:	18d5      	adds	r5, r2, r3
 800aa20:	42ac      	cmp	r4, r5
 800aa22:	d101      	bne.n	800aa28 <__sfputs_r+0x12>
 800aa24:	2000      	movs	r0, #0
 800aa26:	e007      	b.n	800aa38 <__sfputs_r+0x22>
 800aa28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa2c:	463a      	mov	r2, r7
 800aa2e:	4630      	mov	r0, r6
 800aa30:	f7ff ffda 	bl	800a9e8 <__sfputc_r>
 800aa34:	1c43      	adds	r3, r0, #1
 800aa36:	d1f3      	bne.n	800aa20 <__sfputs_r+0xa>
 800aa38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aa3c <_vfiprintf_r>:
 800aa3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa40:	460d      	mov	r5, r1
 800aa42:	b09d      	sub	sp, #116	; 0x74
 800aa44:	4614      	mov	r4, r2
 800aa46:	4698      	mov	r8, r3
 800aa48:	4606      	mov	r6, r0
 800aa4a:	b118      	cbz	r0, 800aa54 <_vfiprintf_r+0x18>
 800aa4c:	6a03      	ldr	r3, [r0, #32]
 800aa4e:	b90b      	cbnz	r3, 800aa54 <_vfiprintf_r+0x18>
 800aa50:	f7ff fdca 	bl	800a5e8 <__sinit>
 800aa54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa56:	07d9      	lsls	r1, r3, #31
 800aa58:	d405      	bmi.n	800aa66 <_vfiprintf_r+0x2a>
 800aa5a:	89ab      	ldrh	r3, [r5, #12]
 800aa5c:	059a      	lsls	r2, r3, #22
 800aa5e:	d402      	bmi.n	800aa66 <_vfiprintf_r+0x2a>
 800aa60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa62:	f7ff fec6 	bl	800a7f2 <__retarget_lock_acquire_recursive>
 800aa66:	89ab      	ldrh	r3, [r5, #12]
 800aa68:	071b      	lsls	r3, r3, #28
 800aa6a:	d501      	bpl.n	800aa70 <_vfiprintf_r+0x34>
 800aa6c:	692b      	ldr	r3, [r5, #16]
 800aa6e:	b99b      	cbnz	r3, 800aa98 <_vfiprintf_r+0x5c>
 800aa70:	4629      	mov	r1, r5
 800aa72:	4630      	mov	r0, r6
 800aa74:	f000 fb78 	bl	800b168 <__swsetup_r>
 800aa78:	b170      	cbz	r0, 800aa98 <_vfiprintf_r+0x5c>
 800aa7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa7c:	07dc      	lsls	r4, r3, #31
 800aa7e:	d504      	bpl.n	800aa8a <_vfiprintf_r+0x4e>
 800aa80:	f04f 30ff 	mov.w	r0, #4294967295
 800aa84:	b01d      	add	sp, #116	; 0x74
 800aa86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa8a:	89ab      	ldrh	r3, [r5, #12]
 800aa8c:	0598      	lsls	r0, r3, #22
 800aa8e:	d4f7      	bmi.n	800aa80 <_vfiprintf_r+0x44>
 800aa90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa92:	f7ff feaf 	bl	800a7f4 <__retarget_lock_release_recursive>
 800aa96:	e7f3      	b.n	800aa80 <_vfiprintf_r+0x44>
 800aa98:	2300      	movs	r3, #0
 800aa9a:	9309      	str	r3, [sp, #36]	; 0x24
 800aa9c:	2320      	movs	r3, #32
 800aa9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aaa2:	f8cd 800c 	str.w	r8, [sp, #12]
 800aaa6:	2330      	movs	r3, #48	; 0x30
 800aaa8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ac5c <_vfiprintf_r+0x220>
 800aaac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aab0:	f04f 0901 	mov.w	r9, #1
 800aab4:	4623      	mov	r3, r4
 800aab6:	469a      	mov	sl, r3
 800aab8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aabc:	b10a      	cbz	r2, 800aac2 <_vfiprintf_r+0x86>
 800aabe:	2a25      	cmp	r2, #37	; 0x25
 800aac0:	d1f9      	bne.n	800aab6 <_vfiprintf_r+0x7a>
 800aac2:	ebba 0b04 	subs.w	fp, sl, r4
 800aac6:	d00b      	beq.n	800aae0 <_vfiprintf_r+0xa4>
 800aac8:	465b      	mov	r3, fp
 800aaca:	4622      	mov	r2, r4
 800aacc:	4629      	mov	r1, r5
 800aace:	4630      	mov	r0, r6
 800aad0:	f7ff ffa1 	bl	800aa16 <__sfputs_r>
 800aad4:	3001      	adds	r0, #1
 800aad6:	f000 80a9 	beq.w	800ac2c <_vfiprintf_r+0x1f0>
 800aada:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aadc:	445a      	add	r2, fp
 800aade:	9209      	str	r2, [sp, #36]	; 0x24
 800aae0:	f89a 3000 	ldrb.w	r3, [sl]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	f000 80a1 	beq.w	800ac2c <_vfiprintf_r+0x1f0>
 800aaea:	2300      	movs	r3, #0
 800aaec:	f04f 32ff 	mov.w	r2, #4294967295
 800aaf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aaf4:	f10a 0a01 	add.w	sl, sl, #1
 800aaf8:	9304      	str	r3, [sp, #16]
 800aafa:	9307      	str	r3, [sp, #28]
 800aafc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab00:	931a      	str	r3, [sp, #104]	; 0x68
 800ab02:	4654      	mov	r4, sl
 800ab04:	2205      	movs	r2, #5
 800ab06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab0a:	4854      	ldr	r0, [pc, #336]	; (800ac5c <_vfiprintf_r+0x220>)
 800ab0c:	f7f5 fb60 	bl	80001d0 <memchr>
 800ab10:	9a04      	ldr	r2, [sp, #16]
 800ab12:	b9d8      	cbnz	r0, 800ab4c <_vfiprintf_r+0x110>
 800ab14:	06d1      	lsls	r1, r2, #27
 800ab16:	bf44      	itt	mi
 800ab18:	2320      	movmi	r3, #32
 800ab1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab1e:	0713      	lsls	r3, r2, #28
 800ab20:	bf44      	itt	mi
 800ab22:	232b      	movmi	r3, #43	; 0x2b
 800ab24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab28:	f89a 3000 	ldrb.w	r3, [sl]
 800ab2c:	2b2a      	cmp	r3, #42	; 0x2a
 800ab2e:	d015      	beq.n	800ab5c <_vfiprintf_r+0x120>
 800ab30:	9a07      	ldr	r2, [sp, #28]
 800ab32:	4654      	mov	r4, sl
 800ab34:	2000      	movs	r0, #0
 800ab36:	f04f 0c0a 	mov.w	ip, #10
 800ab3a:	4621      	mov	r1, r4
 800ab3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab40:	3b30      	subs	r3, #48	; 0x30
 800ab42:	2b09      	cmp	r3, #9
 800ab44:	d94d      	bls.n	800abe2 <_vfiprintf_r+0x1a6>
 800ab46:	b1b0      	cbz	r0, 800ab76 <_vfiprintf_r+0x13a>
 800ab48:	9207      	str	r2, [sp, #28]
 800ab4a:	e014      	b.n	800ab76 <_vfiprintf_r+0x13a>
 800ab4c:	eba0 0308 	sub.w	r3, r0, r8
 800ab50:	fa09 f303 	lsl.w	r3, r9, r3
 800ab54:	4313      	orrs	r3, r2
 800ab56:	9304      	str	r3, [sp, #16]
 800ab58:	46a2      	mov	sl, r4
 800ab5a:	e7d2      	b.n	800ab02 <_vfiprintf_r+0xc6>
 800ab5c:	9b03      	ldr	r3, [sp, #12]
 800ab5e:	1d19      	adds	r1, r3, #4
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	9103      	str	r1, [sp, #12]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	bfbb      	ittet	lt
 800ab68:	425b      	neglt	r3, r3
 800ab6a:	f042 0202 	orrlt.w	r2, r2, #2
 800ab6e:	9307      	strge	r3, [sp, #28]
 800ab70:	9307      	strlt	r3, [sp, #28]
 800ab72:	bfb8      	it	lt
 800ab74:	9204      	strlt	r2, [sp, #16]
 800ab76:	7823      	ldrb	r3, [r4, #0]
 800ab78:	2b2e      	cmp	r3, #46	; 0x2e
 800ab7a:	d10c      	bne.n	800ab96 <_vfiprintf_r+0x15a>
 800ab7c:	7863      	ldrb	r3, [r4, #1]
 800ab7e:	2b2a      	cmp	r3, #42	; 0x2a
 800ab80:	d134      	bne.n	800abec <_vfiprintf_r+0x1b0>
 800ab82:	9b03      	ldr	r3, [sp, #12]
 800ab84:	1d1a      	adds	r2, r3, #4
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	9203      	str	r2, [sp, #12]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	bfb8      	it	lt
 800ab8e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab92:	3402      	adds	r4, #2
 800ab94:	9305      	str	r3, [sp, #20]
 800ab96:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ac6c <_vfiprintf_r+0x230>
 800ab9a:	7821      	ldrb	r1, [r4, #0]
 800ab9c:	2203      	movs	r2, #3
 800ab9e:	4650      	mov	r0, sl
 800aba0:	f7f5 fb16 	bl	80001d0 <memchr>
 800aba4:	b138      	cbz	r0, 800abb6 <_vfiprintf_r+0x17a>
 800aba6:	9b04      	ldr	r3, [sp, #16]
 800aba8:	eba0 000a 	sub.w	r0, r0, sl
 800abac:	2240      	movs	r2, #64	; 0x40
 800abae:	4082      	lsls	r2, r0
 800abb0:	4313      	orrs	r3, r2
 800abb2:	3401      	adds	r4, #1
 800abb4:	9304      	str	r3, [sp, #16]
 800abb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abba:	4829      	ldr	r0, [pc, #164]	; (800ac60 <_vfiprintf_r+0x224>)
 800abbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800abc0:	2206      	movs	r2, #6
 800abc2:	f7f5 fb05 	bl	80001d0 <memchr>
 800abc6:	2800      	cmp	r0, #0
 800abc8:	d03f      	beq.n	800ac4a <_vfiprintf_r+0x20e>
 800abca:	4b26      	ldr	r3, [pc, #152]	; (800ac64 <_vfiprintf_r+0x228>)
 800abcc:	bb1b      	cbnz	r3, 800ac16 <_vfiprintf_r+0x1da>
 800abce:	9b03      	ldr	r3, [sp, #12]
 800abd0:	3307      	adds	r3, #7
 800abd2:	f023 0307 	bic.w	r3, r3, #7
 800abd6:	3308      	adds	r3, #8
 800abd8:	9303      	str	r3, [sp, #12]
 800abda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abdc:	443b      	add	r3, r7
 800abde:	9309      	str	r3, [sp, #36]	; 0x24
 800abe0:	e768      	b.n	800aab4 <_vfiprintf_r+0x78>
 800abe2:	fb0c 3202 	mla	r2, ip, r2, r3
 800abe6:	460c      	mov	r4, r1
 800abe8:	2001      	movs	r0, #1
 800abea:	e7a6      	b.n	800ab3a <_vfiprintf_r+0xfe>
 800abec:	2300      	movs	r3, #0
 800abee:	3401      	adds	r4, #1
 800abf0:	9305      	str	r3, [sp, #20]
 800abf2:	4619      	mov	r1, r3
 800abf4:	f04f 0c0a 	mov.w	ip, #10
 800abf8:	4620      	mov	r0, r4
 800abfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abfe:	3a30      	subs	r2, #48	; 0x30
 800ac00:	2a09      	cmp	r2, #9
 800ac02:	d903      	bls.n	800ac0c <_vfiprintf_r+0x1d0>
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d0c6      	beq.n	800ab96 <_vfiprintf_r+0x15a>
 800ac08:	9105      	str	r1, [sp, #20]
 800ac0a:	e7c4      	b.n	800ab96 <_vfiprintf_r+0x15a>
 800ac0c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac10:	4604      	mov	r4, r0
 800ac12:	2301      	movs	r3, #1
 800ac14:	e7f0      	b.n	800abf8 <_vfiprintf_r+0x1bc>
 800ac16:	ab03      	add	r3, sp, #12
 800ac18:	9300      	str	r3, [sp, #0]
 800ac1a:	462a      	mov	r2, r5
 800ac1c:	4b12      	ldr	r3, [pc, #72]	; (800ac68 <_vfiprintf_r+0x22c>)
 800ac1e:	a904      	add	r1, sp, #16
 800ac20:	4630      	mov	r0, r6
 800ac22:	f3af 8000 	nop.w
 800ac26:	4607      	mov	r7, r0
 800ac28:	1c78      	adds	r0, r7, #1
 800ac2a:	d1d6      	bne.n	800abda <_vfiprintf_r+0x19e>
 800ac2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac2e:	07d9      	lsls	r1, r3, #31
 800ac30:	d405      	bmi.n	800ac3e <_vfiprintf_r+0x202>
 800ac32:	89ab      	ldrh	r3, [r5, #12]
 800ac34:	059a      	lsls	r2, r3, #22
 800ac36:	d402      	bmi.n	800ac3e <_vfiprintf_r+0x202>
 800ac38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac3a:	f7ff fddb 	bl	800a7f4 <__retarget_lock_release_recursive>
 800ac3e:	89ab      	ldrh	r3, [r5, #12]
 800ac40:	065b      	lsls	r3, r3, #25
 800ac42:	f53f af1d 	bmi.w	800aa80 <_vfiprintf_r+0x44>
 800ac46:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac48:	e71c      	b.n	800aa84 <_vfiprintf_r+0x48>
 800ac4a:	ab03      	add	r3, sp, #12
 800ac4c:	9300      	str	r3, [sp, #0]
 800ac4e:	462a      	mov	r2, r5
 800ac50:	4b05      	ldr	r3, [pc, #20]	; (800ac68 <_vfiprintf_r+0x22c>)
 800ac52:	a904      	add	r1, sp, #16
 800ac54:	4630      	mov	r0, r6
 800ac56:	f000 f879 	bl	800ad4c <_printf_i>
 800ac5a:	e7e4      	b.n	800ac26 <_vfiprintf_r+0x1ea>
 800ac5c:	0800b40c 	.word	0x0800b40c
 800ac60:	0800b416 	.word	0x0800b416
 800ac64:	00000000 	.word	0x00000000
 800ac68:	0800aa17 	.word	0x0800aa17
 800ac6c:	0800b412 	.word	0x0800b412

0800ac70 <_printf_common>:
 800ac70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac74:	4616      	mov	r6, r2
 800ac76:	4699      	mov	r9, r3
 800ac78:	688a      	ldr	r2, [r1, #8]
 800ac7a:	690b      	ldr	r3, [r1, #16]
 800ac7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac80:	4293      	cmp	r3, r2
 800ac82:	bfb8      	it	lt
 800ac84:	4613      	movlt	r3, r2
 800ac86:	6033      	str	r3, [r6, #0]
 800ac88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac8c:	4607      	mov	r7, r0
 800ac8e:	460c      	mov	r4, r1
 800ac90:	b10a      	cbz	r2, 800ac96 <_printf_common+0x26>
 800ac92:	3301      	adds	r3, #1
 800ac94:	6033      	str	r3, [r6, #0]
 800ac96:	6823      	ldr	r3, [r4, #0]
 800ac98:	0699      	lsls	r1, r3, #26
 800ac9a:	bf42      	ittt	mi
 800ac9c:	6833      	ldrmi	r3, [r6, #0]
 800ac9e:	3302      	addmi	r3, #2
 800aca0:	6033      	strmi	r3, [r6, #0]
 800aca2:	6825      	ldr	r5, [r4, #0]
 800aca4:	f015 0506 	ands.w	r5, r5, #6
 800aca8:	d106      	bne.n	800acb8 <_printf_common+0x48>
 800acaa:	f104 0a19 	add.w	sl, r4, #25
 800acae:	68e3      	ldr	r3, [r4, #12]
 800acb0:	6832      	ldr	r2, [r6, #0]
 800acb2:	1a9b      	subs	r3, r3, r2
 800acb4:	42ab      	cmp	r3, r5
 800acb6:	dc26      	bgt.n	800ad06 <_printf_common+0x96>
 800acb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800acbc:	1e13      	subs	r3, r2, #0
 800acbe:	6822      	ldr	r2, [r4, #0]
 800acc0:	bf18      	it	ne
 800acc2:	2301      	movne	r3, #1
 800acc4:	0692      	lsls	r2, r2, #26
 800acc6:	d42b      	bmi.n	800ad20 <_printf_common+0xb0>
 800acc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800accc:	4649      	mov	r1, r9
 800acce:	4638      	mov	r0, r7
 800acd0:	47c0      	blx	r8
 800acd2:	3001      	adds	r0, #1
 800acd4:	d01e      	beq.n	800ad14 <_printf_common+0xa4>
 800acd6:	6823      	ldr	r3, [r4, #0]
 800acd8:	6922      	ldr	r2, [r4, #16]
 800acda:	f003 0306 	and.w	r3, r3, #6
 800acde:	2b04      	cmp	r3, #4
 800ace0:	bf02      	ittt	eq
 800ace2:	68e5      	ldreq	r5, [r4, #12]
 800ace4:	6833      	ldreq	r3, [r6, #0]
 800ace6:	1aed      	subeq	r5, r5, r3
 800ace8:	68a3      	ldr	r3, [r4, #8]
 800acea:	bf0c      	ite	eq
 800acec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800acf0:	2500      	movne	r5, #0
 800acf2:	4293      	cmp	r3, r2
 800acf4:	bfc4      	itt	gt
 800acf6:	1a9b      	subgt	r3, r3, r2
 800acf8:	18ed      	addgt	r5, r5, r3
 800acfa:	2600      	movs	r6, #0
 800acfc:	341a      	adds	r4, #26
 800acfe:	42b5      	cmp	r5, r6
 800ad00:	d11a      	bne.n	800ad38 <_printf_common+0xc8>
 800ad02:	2000      	movs	r0, #0
 800ad04:	e008      	b.n	800ad18 <_printf_common+0xa8>
 800ad06:	2301      	movs	r3, #1
 800ad08:	4652      	mov	r2, sl
 800ad0a:	4649      	mov	r1, r9
 800ad0c:	4638      	mov	r0, r7
 800ad0e:	47c0      	blx	r8
 800ad10:	3001      	adds	r0, #1
 800ad12:	d103      	bne.n	800ad1c <_printf_common+0xac>
 800ad14:	f04f 30ff 	mov.w	r0, #4294967295
 800ad18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad1c:	3501      	adds	r5, #1
 800ad1e:	e7c6      	b.n	800acae <_printf_common+0x3e>
 800ad20:	18e1      	adds	r1, r4, r3
 800ad22:	1c5a      	adds	r2, r3, #1
 800ad24:	2030      	movs	r0, #48	; 0x30
 800ad26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad2a:	4422      	add	r2, r4
 800ad2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad34:	3302      	adds	r3, #2
 800ad36:	e7c7      	b.n	800acc8 <_printf_common+0x58>
 800ad38:	2301      	movs	r3, #1
 800ad3a:	4622      	mov	r2, r4
 800ad3c:	4649      	mov	r1, r9
 800ad3e:	4638      	mov	r0, r7
 800ad40:	47c0      	blx	r8
 800ad42:	3001      	adds	r0, #1
 800ad44:	d0e6      	beq.n	800ad14 <_printf_common+0xa4>
 800ad46:	3601      	adds	r6, #1
 800ad48:	e7d9      	b.n	800acfe <_printf_common+0x8e>
	...

0800ad4c <_printf_i>:
 800ad4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad50:	7e0f      	ldrb	r7, [r1, #24]
 800ad52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad54:	2f78      	cmp	r7, #120	; 0x78
 800ad56:	4691      	mov	r9, r2
 800ad58:	4680      	mov	r8, r0
 800ad5a:	460c      	mov	r4, r1
 800ad5c:	469a      	mov	sl, r3
 800ad5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ad62:	d807      	bhi.n	800ad74 <_printf_i+0x28>
 800ad64:	2f62      	cmp	r7, #98	; 0x62
 800ad66:	d80a      	bhi.n	800ad7e <_printf_i+0x32>
 800ad68:	2f00      	cmp	r7, #0
 800ad6a:	f000 80d4 	beq.w	800af16 <_printf_i+0x1ca>
 800ad6e:	2f58      	cmp	r7, #88	; 0x58
 800ad70:	f000 80c0 	beq.w	800aef4 <_printf_i+0x1a8>
 800ad74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ad7c:	e03a      	b.n	800adf4 <_printf_i+0xa8>
 800ad7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ad82:	2b15      	cmp	r3, #21
 800ad84:	d8f6      	bhi.n	800ad74 <_printf_i+0x28>
 800ad86:	a101      	add	r1, pc, #4	; (adr r1, 800ad8c <_printf_i+0x40>)
 800ad88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad8c:	0800ade5 	.word	0x0800ade5
 800ad90:	0800adf9 	.word	0x0800adf9
 800ad94:	0800ad75 	.word	0x0800ad75
 800ad98:	0800ad75 	.word	0x0800ad75
 800ad9c:	0800ad75 	.word	0x0800ad75
 800ada0:	0800ad75 	.word	0x0800ad75
 800ada4:	0800adf9 	.word	0x0800adf9
 800ada8:	0800ad75 	.word	0x0800ad75
 800adac:	0800ad75 	.word	0x0800ad75
 800adb0:	0800ad75 	.word	0x0800ad75
 800adb4:	0800ad75 	.word	0x0800ad75
 800adb8:	0800aefd 	.word	0x0800aefd
 800adbc:	0800ae25 	.word	0x0800ae25
 800adc0:	0800aeb7 	.word	0x0800aeb7
 800adc4:	0800ad75 	.word	0x0800ad75
 800adc8:	0800ad75 	.word	0x0800ad75
 800adcc:	0800af1f 	.word	0x0800af1f
 800add0:	0800ad75 	.word	0x0800ad75
 800add4:	0800ae25 	.word	0x0800ae25
 800add8:	0800ad75 	.word	0x0800ad75
 800addc:	0800ad75 	.word	0x0800ad75
 800ade0:	0800aebf 	.word	0x0800aebf
 800ade4:	682b      	ldr	r3, [r5, #0]
 800ade6:	1d1a      	adds	r2, r3, #4
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	602a      	str	r2, [r5, #0]
 800adec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800adf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800adf4:	2301      	movs	r3, #1
 800adf6:	e09f      	b.n	800af38 <_printf_i+0x1ec>
 800adf8:	6820      	ldr	r0, [r4, #0]
 800adfa:	682b      	ldr	r3, [r5, #0]
 800adfc:	0607      	lsls	r7, r0, #24
 800adfe:	f103 0104 	add.w	r1, r3, #4
 800ae02:	6029      	str	r1, [r5, #0]
 800ae04:	d501      	bpl.n	800ae0a <_printf_i+0xbe>
 800ae06:	681e      	ldr	r6, [r3, #0]
 800ae08:	e003      	b.n	800ae12 <_printf_i+0xc6>
 800ae0a:	0646      	lsls	r6, r0, #25
 800ae0c:	d5fb      	bpl.n	800ae06 <_printf_i+0xba>
 800ae0e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ae12:	2e00      	cmp	r6, #0
 800ae14:	da03      	bge.n	800ae1e <_printf_i+0xd2>
 800ae16:	232d      	movs	r3, #45	; 0x2d
 800ae18:	4276      	negs	r6, r6
 800ae1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae1e:	485a      	ldr	r0, [pc, #360]	; (800af88 <_printf_i+0x23c>)
 800ae20:	230a      	movs	r3, #10
 800ae22:	e012      	b.n	800ae4a <_printf_i+0xfe>
 800ae24:	682b      	ldr	r3, [r5, #0]
 800ae26:	6820      	ldr	r0, [r4, #0]
 800ae28:	1d19      	adds	r1, r3, #4
 800ae2a:	6029      	str	r1, [r5, #0]
 800ae2c:	0605      	lsls	r5, r0, #24
 800ae2e:	d501      	bpl.n	800ae34 <_printf_i+0xe8>
 800ae30:	681e      	ldr	r6, [r3, #0]
 800ae32:	e002      	b.n	800ae3a <_printf_i+0xee>
 800ae34:	0641      	lsls	r1, r0, #25
 800ae36:	d5fb      	bpl.n	800ae30 <_printf_i+0xe4>
 800ae38:	881e      	ldrh	r6, [r3, #0]
 800ae3a:	4853      	ldr	r0, [pc, #332]	; (800af88 <_printf_i+0x23c>)
 800ae3c:	2f6f      	cmp	r7, #111	; 0x6f
 800ae3e:	bf0c      	ite	eq
 800ae40:	2308      	moveq	r3, #8
 800ae42:	230a      	movne	r3, #10
 800ae44:	2100      	movs	r1, #0
 800ae46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae4a:	6865      	ldr	r5, [r4, #4]
 800ae4c:	60a5      	str	r5, [r4, #8]
 800ae4e:	2d00      	cmp	r5, #0
 800ae50:	bfa2      	ittt	ge
 800ae52:	6821      	ldrge	r1, [r4, #0]
 800ae54:	f021 0104 	bicge.w	r1, r1, #4
 800ae58:	6021      	strge	r1, [r4, #0]
 800ae5a:	b90e      	cbnz	r6, 800ae60 <_printf_i+0x114>
 800ae5c:	2d00      	cmp	r5, #0
 800ae5e:	d04b      	beq.n	800aef8 <_printf_i+0x1ac>
 800ae60:	4615      	mov	r5, r2
 800ae62:	fbb6 f1f3 	udiv	r1, r6, r3
 800ae66:	fb03 6711 	mls	r7, r3, r1, r6
 800ae6a:	5dc7      	ldrb	r7, [r0, r7]
 800ae6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ae70:	4637      	mov	r7, r6
 800ae72:	42bb      	cmp	r3, r7
 800ae74:	460e      	mov	r6, r1
 800ae76:	d9f4      	bls.n	800ae62 <_printf_i+0x116>
 800ae78:	2b08      	cmp	r3, #8
 800ae7a:	d10b      	bne.n	800ae94 <_printf_i+0x148>
 800ae7c:	6823      	ldr	r3, [r4, #0]
 800ae7e:	07de      	lsls	r6, r3, #31
 800ae80:	d508      	bpl.n	800ae94 <_printf_i+0x148>
 800ae82:	6923      	ldr	r3, [r4, #16]
 800ae84:	6861      	ldr	r1, [r4, #4]
 800ae86:	4299      	cmp	r1, r3
 800ae88:	bfde      	ittt	le
 800ae8a:	2330      	movle	r3, #48	; 0x30
 800ae8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ae90:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ae94:	1b52      	subs	r2, r2, r5
 800ae96:	6122      	str	r2, [r4, #16]
 800ae98:	f8cd a000 	str.w	sl, [sp]
 800ae9c:	464b      	mov	r3, r9
 800ae9e:	aa03      	add	r2, sp, #12
 800aea0:	4621      	mov	r1, r4
 800aea2:	4640      	mov	r0, r8
 800aea4:	f7ff fee4 	bl	800ac70 <_printf_common>
 800aea8:	3001      	adds	r0, #1
 800aeaa:	d14a      	bne.n	800af42 <_printf_i+0x1f6>
 800aeac:	f04f 30ff 	mov.w	r0, #4294967295
 800aeb0:	b004      	add	sp, #16
 800aeb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeb6:	6823      	ldr	r3, [r4, #0]
 800aeb8:	f043 0320 	orr.w	r3, r3, #32
 800aebc:	6023      	str	r3, [r4, #0]
 800aebe:	4833      	ldr	r0, [pc, #204]	; (800af8c <_printf_i+0x240>)
 800aec0:	2778      	movs	r7, #120	; 0x78
 800aec2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aec6:	6823      	ldr	r3, [r4, #0]
 800aec8:	6829      	ldr	r1, [r5, #0]
 800aeca:	061f      	lsls	r7, r3, #24
 800aecc:	f851 6b04 	ldr.w	r6, [r1], #4
 800aed0:	d402      	bmi.n	800aed8 <_printf_i+0x18c>
 800aed2:	065f      	lsls	r7, r3, #25
 800aed4:	bf48      	it	mi
 800aed6:	b2b6      	uxthmi	r6, r6
 800aed8:	07df      	lsls	r7, r3, #31
 800aeda:	bf48      	it	mi
 800aedc:	f043 0320 	orrmi.w	r3, r3, #32
 800aee0:	6029      	str	r1, [r5, #0]
 800aee2:	bf48      	it	mi
 800aee4:	6023      	strmi	r3, [r4, #0]
 800aee6:	b91e      	cbnz	r6, 800aef0 <_printf_i+0x1a4>
 800aee8:	6823      	ldr	r3, [r4, #0]
 800aeea:	f023 0320 	bic.w	r3, r3, #32
 800aeee:	6023      	str	r3, [r4, #0]
 800aef0:	2310      	movs	r3, #16
 800aef2:	e7a7      	b.n	800ae44 <_printf_i+0xf8>
 800aef4:	4824      	ldr	r0, [pc, #144]	; (800af88 <_printf_i+0x23c>)
 800aef6:	e7e4      	b.n	800aec2 <_printf_i+0x176>
 800aef8:	4615      	mov	r5, r2
 800aefa:	e7bd      	b.n	800ae78 <_printf_i+0x12c>
 800aefc:	682b      	ldr	r3, [r5, #0]
 800aefe:	6826      	ldr	r6, [r4, #0]
 800af00:	6961      	ldr	r1, [r4, #20]
 800af02:	1d18      	adds	r0, r3, #4
 800af04:	6028      	str	r0, [r5, #0]
 800af06:	0635      	lsls	r5, r6, #24
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	d501      	bpl.n	800af10 <_printf_i+0x1c4>
 800af0c:	6019      	str	r1, [r3, #0]
 800af0e:	e002      	b.n	800af16 <_printf_i+0x1ca>
 800af10:	0670      	lsls	r0, r6, #25
 800af12:	d5fb      	bpl.n	800af0c <_printf_i+0x1c0>
 800af14:	8019      	strh	r1, [r3, #0]
 800af16:	2300      	movs	r3, #0
 800af18:	6123      	str	r3, [r4, #16]
 800af1a:	4615      	mov	r5, r2
 800af1c:	e7bc      	b.n	800ae98 <_printf_i+0x14c>
 800af1e:	682b      	ldr	r3, [r5, #0]
 800af20:	1d1a      	adds	r2, r3, #4
 800af22:	602a      	str	r2, [r5, #0]
 800af24:	681d      	ldr	r5, [r3, #0]
 800af26:	6862      	ldr	r2, [r4, #4]
 800af28:	2100      	movs	r1, #0
 800af2a:	4628      	mov	r0, r5
 800af2c:	f7f5 f950 	bl	80001d0 <memchr>
 800af30:	b108      	cbz	r0, 800af36 <_printf_i+0x1ea>
 800af32:	1b40      	subs	r0, r0, r5
 800af34:	6060      	str	r0, [r4, #4]
 800af36:	6863      	ldr	r3, [r4, #4]
 800af38:	6123      	str	r3, [r4, #16]
 800af3a:	2300      	movs	r3, #0
 800af3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af40:	e7aa      	b.n	800ae98 <_printf_i+0x14c>
 800af42:	6923      	ldr	r3, [r4, #16]
 800af44:	462a      	mov	r2, r5
 800af46:	4649      	mov	r1, r9
 800af48:	4640      	mov	r0, r8
 800af4a:	47d0      	blx	sl
 800af4c:	3001      	adds	r0, #1
 800af4e:	d0ad      	beq.n	800aeac <_printf_i+0x160>
 800af50:	6823      	ldr	r3, [r4, #0]
 800af52:	079b      	lsls	r3, r3, #30
 800af54:	d413      	bmi.n	800af7e <_printf_i+0x232>
 800af56:	68e0      	ldr	r0, [r4, #12]
 800af58:	9b03      	ldr	r3, [sp, #12]
 800af5a:	4298      	cmp	r0, r3
 800af5c:	bfb8      	it	lt
 800af5e:	4618      	movlt	r0, r3
 800af60:	e7a6      	b.n	800aeb0 <_printf_i+0x164>
 800af62:	2301      	movs	r3, #1
 800af64:	4632      	mov	r2, r6
 800af66:	4649      	mov	r1, r9
 800af68:	4640      	mov	r0, r8
 800af6a:	47d0      	blx	sl
 800af6c:	3001      	adds	r0, #1
 800af6e:	d09d      	beq.n	800aeac <_printf_i+0x160>
 800af70:	3501      	adds	r5, #1
 800af72:	68e3      	ldr	r3, [r4, #12]
 800af74:	9903      	ldr	r1, [sp, #12]
 800af76:	1a5b      	subs	r3, r3, r1
 800af78:	42ab      	cmp	r3, r5
 800af7a:	dcf2      	bgt.n	800af62 <_printf_i+0x216>
 800af7c:	e7eb      	b.n	800af56 <_printf_i+0x20a>
 800af7e:	2500      	movs	r5, #0
 800af80:	f104 0619 	add.w	r6, r4, #25
 800af84:	e7f5      	b.n	800af72 <_printf_i+0x226>
 800af86:	bf00      	nop
 800af88:	0800b41d 	.word	0x0800b41d
 800af8c:	0800b42e 	.word	0x0800b42e

0800af90 <__sflush_r>:
 800af90:	898a      	ldrh	r2, [r1, #12]
 800af92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af96:	4605      	mov	r5, r0
 800af98:	0710      	lsls	r0, r2, #28
 800af9a:	460c      	mov	r4, r1
 800af9c:	d458      	bmi.n	800b050 <__sflush_r+0xc0>
 800af9e:	684b      	ldr	r3, [r1, #4]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	dc05      	bgt.n	800afb0 <__sflush_r+0x20>
 800afa4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	dc02      	bgt.n	800afb0 <__sflush_r+0x20>
 800afaa:	2000      	movs	r0, #0
 800afac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afb2:	2e00      	cmp	r6, #0
 800afb4:	d0f9      	beq.n	800afaa <__sflush_r+0x1a>
 800afb6:	2300      	movs	r3, #0
 800afb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800afbc:	682f      	ldr	r7, [r5, #0]
 800afbe:	6a21      	ldr	r1, [r4, #32]
 800afc0:	602b      	str	r3, [r5, #0]
 800afc2:	d032      	beq.n	800b02a <__sflush_r+0x9a>
 800afc4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800afc6:	89a3      	ldrh	r3, [r4, #12]
 800afc8:	075a      	lsls	r2, r3, #29
 800afca:	d505      	bpl.n	800afd8 <__sflush_r+0x48>
 800afcc:	6863      	ldr	r3, [r4, #4]
 800afce:	1ac0      	subs	r0, r0, r3
 800afd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800afd2:	b10b      	cbz	r3, 800afd8 <__sflush_r+0x48>
 800afd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800afd6:	1ac0      	subs	r0, r0, r3
 800afd8:	2300      	movs	r3, #0
 800afda:	4602      	mov	r2, r0
 800afdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afde:	6a21      	ldr	r1, [r4, #32]
 800afe0:	4628      	mov	r0, r5
 800afe2:	47b0      	blx	r6
 800afe4:	1c43      	adds	r3, r0, #1
 800afe6:	89a3      	ldrh	r3, [r4, #12]
 800afe8:	d106      	bne.n	800aff8 <__sflush_r+0x68>
 800afea:	6829      	ldr	r1, [r5, #0]
 800afec:	291d      	cmp	r1, #29
 800afee:	d82b      	bhi.n	800b048 <__sflush_r+0xb8>
 800aff0:	4a29      	ldr	r2, [pc, #164]	; (800b098 <__sflush_r+0x108>)
 800aff2:	410a      	asrs	r2, r1
 800aff4:	07d6      	lsls	r6, r2, #31
 800aff6:	d427      	bmi.n	800b048 <__sflush_r+0xb8>
 800aff8:	2200      	movs	r2, #0
 800affa:	6062      	str	r2, [r4, #4]
 800affc:	04d9      	lsls	r1, r3, #19
 800affe:	6922      	ldr	r2, [r4, #16]
 800b000:	6022      	str	r2, [r4, #0]
 800b002:	d504      	bpl.n	800b00e <__sflush_r+0x7e>
 800b004:	1c42      	adds	r2, r0, #1
 800b006:	d101      	bne.n	800b00c <__sflush_r+0x7c>
 800b008:	682b      	ldr	r3, [r5, #0]
 800b00a:	b903      	cbnz	r3, 800b00e <__sflush_r+0x7e>
 800b00c:	6560      	str	r0, [r4, #84]	; 0x54
 800b00e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b010:	602f      	str	r7, [r5, #0]
 800b012:	2900      	cmp	r1, #0
 800b014:	d0c9      	beq.n	800afaa <__sflush_r+0x1a>
 800b016:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b01a:	4299      	cmp	r1, r3
 800b01c:	d002      	beq.n	800b024 <__sflush_r+0x94>
 800b01e:	4628      	mov	r0, r5
 800b020:	f7ff fbea 	bl	800a7f8 <_free_r>
 800b024:	2000      	movs	r0, #0
 800b026:	6360      	str	r0, [r4, #52]	; 0x34
 800b028:	e7c0      	b.n	800afac <__sflush_r+0x1c>
 800b02a:	2301      	movs	r3, #1
 800b02c:	4628      	mov	r0, r5
 800b02e:	47b0      	blx	r6
 800b030:	1c41      	adds	r1, r0, #1
 800b032:	d1c8      	bne.n	800afc6 <__sflush_r+0x36>
 800b034:	682b      	ldr	r3, [r5, #0]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d0c5      	beq.n	800afc6 <__sflush_r+0x36>
 800b03a:	2b1d      	cmp	r3, #29
 800b03c:	d001      	beq.n	800b042 <__sflush_r+0xb2>
 800b03e:	2b16      	cmp	r3, #22
 800b040:	d101      	bne.n	800b046 <__sflush_r+0xb6>
 800b042:	602f      	str	r7, [r5, #0]
 800b044:	e7b1      	b.n	800afaa <__sflush_r+0x1a>
 800b046:	89a3      	ldrh	r3, [r4, #12]
 800b048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b04c:	81a3      	strh	r3, [r4, #12]
 800b04e:	e7ad      	b.n	800afac <__sflush_r+0x1c>
 800b050:	690f      	ldr	r7, [r1, #16]
 800b052:	2f00      	cmp	r7, #0
 800b054:	d0a9      	beq.n	800afaa <__sflush_r+0x1a>
 800b056:	0793      	lsls	r3, r2, #30
 800b058:	680e      	ldr	r6, [r1, #0]
 800b05a:	bf08      	it	eq
 800b05c:	694b      	ldreq	r3, [r1, #20]
 800b05e:	600f      	str	r7, [r1, #0]
 800b060:	bf18      	it	ne
 800b062:	2300      	movne	r3, #0
 800b064:	eba6 0807 	sub.w	r8, r6, r7
 800b068:	608b      	str	r3, [r1, #8]
 800b06a:	f1b8 0f00 	cmp.w	r8, #0
 800b06e:	dd9c      	ble.n	800afaa <__sflush_r+0x1a>
 800b070:	6a21      	ldr	r1, [r4, #32]
 800b072:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b074:	4643      	mov	r3, r8
 800b076:	463a      	mov	r2, r7
 800b078:	4628      	mov	r0, r5
 800b07a:	47b0      	blx	r6
 800b07c:	2800      	cmp	r0, #0
 800b07e:	dc06      	bgt.n	800b08e <__sflush_r+0xfe>
 800b080:	89a3      	ldrh	r3, [r4, #12]
 800b082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b086:	81a3      	strh	r3, [r4, #12]
 800b088:	f04f 30ff 	mov.w	r0, #4294967295
 800b08c:	e78e      	b.n	800afac <__sflush_r+0x1c>
 800b08e:	4407      	add	r7, r0
 800b090:	eba8 0800 	sub.w	r8, r8, r0
 800b094:	e7e9      	b.n	800b06a <__sflush_r+0xda>
 800b096:	bf00      	nop
 800b098:	dfbffffe 	.word	0xdfbffffe

0800b09c <_fflush_r>:
 800b09c:	b538      	push	{r3, r4, r5, lr}
 800b09e:	690b      	ldr	r3, [r1, #16]
 800b0a0:	4605      	mov	r5, r0
 800b0a2:	460c      	mov	r4, r1
 800b0a4:	b913      	cbnz	r3, 800b0ac <_fflush_r+0x10>
 800b0a6:	2500      	movs	r5, #0
 800b0a8:	4628      	mov	r0, r5
 800b0aa:	bd38      	pop	{r3, r4, r5, pc}
 800b0ac:	b118      	cbz	r0, 800b0b6 <_fflush_r+0x1a>
 800b0ae:	6a03      	ldr	r3, [r0, #32]
 800b0b0:	b90b      	cbnz	r3, 800b0b6 <_fflush_r+0x1a>
 800b0b2:	f7ff fa99 	bl	800a5e8 <__sinit>
 800b0b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d0f3      	beq.n	800b0a6 <_fflush_r+0xa>
 800b0be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b0c0:	07d0      	lsls	r0, r2, #31
 800b0c2:	d404      	bmi.n	800b0ce <_fflush_r+0x32>
 800b0c4:	0599      	lsls	r1, r3, #22
 800b0c6:	d402      	bmi.n	800b0ce <_fflush_r+0x32>
 800b0c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0ca:	f7ff fb92 	bl	800a7f2 <__retarget_lock_acquire_recursive>
 800b0ce:	4628      	mov	r0, r5
 800b0d0:	4621      	mov	r1, r4
 800b0d2:	f7ff ff5d 	bl	800af90 <__sflush_r>
 800b0d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0d8:	07da      	lsls	r2, r3, #31
 800b0da:	4605      	mov	r5, r0
 800b0dc:	d4e4      	bmi.n	800b0a8 <_fflush_r+0xc>
 800b0de:	89a3      	ldrh	r3, [r4, #12]
 800b0e0:	059b      	lsls	r3, r3, #22
 800b0e2:	d4e1      	bmi.n	800b0a8 <_fflush_r+0xc>
 800b0e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0e6:	f7ff fb85 	bl	800a7f4 <__retarget_lock_release_recursive>
 800b0ea:	e7dd      	b.n	800b0a8 <_fflush_r+0xc>

0800b0ec <__swbuf_r>:
 800b0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ee:	460e      	mov	r6, r1
 800b0f0:	4614      	mov	r4, r2
 800b0f2:	4605      	mov	r5, r0
 800b0f4:	b118      	cbz	r0, 800b0fe <__swbuf_r+0x12>
 800b0f6:	6a03      	ldr	r3, [r0, #32]
 800b0f8:	b90b      	cbnz	r3, 800b0fe <__swbuf_r+0x12>
 800b0fa:	f7ff fa75 	bl	800a5e8 <__sinit>
 800b0fe:	69a3      	ldr	r3, [r4, #24]
 800b100:	60a3      	str	r3, [r4, #8]
 800b102:	89a3      	ldrh	r3, [r4, #12]
 800b104:	071a      	lsls	r2, r3, #28
 800b106:	d525      	bpl.n	800b154 <__swbuf_r+0x68>
 800b108:	6923      	ldr	r3, [r4, #16]
 800b10a:	b31b      	cbz	r3, 800b154 <__swbuf_r+0x68>
 800b10c:	6823      	ldr	r3, [r4, #0]
 800b10e:	6922      	ldr	r2, [r4, #16]
 800b110:	1a98      	subs	r0, r3, r2
 800b112:	6963      	ldr	r3, [r4, #20]
 800b114:	b2f6      	uxtb	r6, r6
 800b116:	4283      	cmp	r3, r0
 800b118:	4637      	mov	r7, r6
 800b11a:	dc04      	bgt.n	800b126 <__swbuf_r+0x3a>
 800b11c:	4621      	mov	r1, r4
 800b11e:	4628      	mov	r0, r5
 800b120:	f7ff ffbc 	bl	800b09c <_fflush_r>
 800b124:	b9e0      	cbnz	r0, 800b160 <__swbuf_r+0x74>
 800b126:	68a3      	ldr	r3, [r4, #8]
 800b128:	3b01      	subs	r3, #1
 800b12a:	60a3      	str	r3, [r4, #8]
 800b12c:	6823      	ldr	r3, [r4, #0]
 800b12e:	1c5a      	adds	r2, r3, #1
 800b130:	6022      	str	r2, [r4, #0]
 800b132:	701e      	strb	r6, [r3, #0]
 800b134:	6962      	ldr	r2, [r4, #20]
 800b136:	1c43      	adds	r3, r0, #1
 800b138:	429a      	cmp	r2, r3
 800b13a:	d004      	beq.n	800b146 <__swbuf_r+0x5a>
 800b13c:	89a3      	ldrh	r3, [r4, #12]
 800b13e:	07db      	lsls	r3, r3, #31
 800b140:	d506      	bpl.n	800b150 <__swbuf_r+0x64>
 800b142:	2e0a      	cmp	r6, #10
 800b144:	d104      	bne.n	800b150 <__swbuf_r+0x64>
 800b146:	4621      	mov	r1, r4
 800b148:	4628      	mov	r0, r5
 800b14a:	f7ff ffa7 	bl	800b09c <_fflush_r>
 800b14e:	b938      	cbnz	r0, 800b160 <__swbuf_r+0x74>
 800b150:	4638      	mov	r0, r7
 800b152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b154:	4621      	mov	r1, r4
 800b156:	4628      	mov	r0, r5
 800b158:	f000 f806 	bl	800b168 <__swsetup_r>
 800b15c:	2800      	cmp	r0, #0
 800b15e:	d0d5      	beq.n	800b10c <__swbuf_r+0x20>
 800b160:	f04f 37ff 	mov.w	r7, #4294967295
 800b164:	e7f4      	b.n	800b150 <__swbuf_r+0x64>
	...

0800b168 <__swsetup_r>:
 800b168:	b538      	push	{r3, r4, r5, lr}
 800b16a:	4b2a      	ldr	r3, [pc, #168]	; (800b214 <__swsetup_r+0xac>)
 800b16c:	4605      	mov	r5, r0
 800b16e:	6818      	ldr	r0, [r3, #0]
 800b170:	460c      	mov	r4, r1
 800b172:	b118      	cbz	r0, 800b17c <__swsetup_r+0x14>
 800b174:	6a03      	ldr	r3, [r0, #32]
 800b176:	b90b      	cbnz	r3, 800b17c <__swsetup_r+0x14>
 800b178:	f7ff fa36 	bl	800a5e8 <__sinit>
 800b17c:	89a3      	ldrh	r3, [r4, #12]
 800b17e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b182:	0718      	lsls	r0, r3, #28
 800b184:	d422      	bmi.n	800b1cc <__swsetup_r+0x64>
 800b186:	06d9      	lsls	r1, r3, #27
 800b188:	d407      	bmi.n	800b19a <__swsetup_r+0x32>
 800b18a:	2309      	movs	r3, #9
 800b18c:	602b      	str	r3, [r5, #0]
 800b18e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b192:	81a3      	strh	r3, [r4, #12]
 800b194:	f04f 30ff 	mov.w	r0, #4294967295
 800b198:	e034      	b.n	800b204 <__swsetup_r+0x9c>
 800b19a:	0758      	lsls	r0, r3, #29
 800b19c:	d512      	bpl.n	800b1c4 <__swsetup_r+0x5c>
 800b19e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1a0:	b141      	cbz	r1, 800b1b4 <__swsetup_r+0x4c>
 800b1a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1a6:	4299      	cmp	r1, r3
 800b1a8:	d002      	beq.n	800b1b0 <__swsetup_r+0x48>
 800b1aa:	4628      	mov	r0, r5
 800b1ac:	f7ff fb24 	bl	800a7f8 <_free_r>
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	6363      	str	r3, [r4, #52]	; 0x34
 800b1b4:	89a3      	ldrh	r3, [r4, #12]
 800b1b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b1ba:	81a3      	strh	r3, [r4, #12]
 800b1bc:	2300      	movs	r3, #0
 800b1be:	6063      	str	r3, [r4, #4]
 800b1c0:	6923      	ldr	r3, [r4, #16]
 800b1c2:	6023      	str	r3, [r4, #0]
 800b1c4:	89a3      	ldrh	r3, [r4, #12]
 800b1c6:	f043 0308 	orr.w	r3, r3, #8
 800b1ca:	81a3      	strh	r3, [r4, #12]
 800b1cc:	6923      	ldr	r3, [r4, #16]
 800b1ce:	b94b      	cbnz	r3, 800b1e4 <__swsetup_r+0x7c>
 800b1d0:	89a3      	ldrh	r3, [r4, #12]
 800b1d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b1d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b1da:	d003      	beq.n	800b1e4 <__swsetup_r+0x7c>
 800b1dc:	4621      	mov	r1, r4
 800b1de:	4628      	mov	r0, r5
 800b1e0:	f000 f850 	bl	800b284 <__smakebuf_r>
 800b1e4:	89a0      	ldrh	r0, [r4, #12]
 800b1e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b1ea:	f010 0301 	ands.w	r3, r0, #1
 800b1ee:	d00a      	beq.n	800b206 <__swsetup_r+0x9e>
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	60a3      	str	r3, [r4, #8]
 800b1f4:	6963      	ldr	r3, [r4, #20]
 800b1f6:	425b      	negs	r3, r3
 800b1f8:	61a3      	str	r3, [r4, #24]
 800b1fa:	6923      	ldr	r3, [r4, #16]
 800b1fc:	b943      	cbnz	r3, 800b210 <__swsetup_r+0xa8>
 800b1fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b202:	d1c4      	bne.n	800b18e <__swsetup_r+0x26>
 800b204:	bd38      	pop	{r3, r4, r5, pc}
 800b206:	0781      	lsls	r1, r0, #30
 800b208:	bf58      	it	pl
 800b20a:	6963      	ldrpl	r3, [r4, #20]
 800b20c:	60a3      	str	r3, [r4, #8]
 800b20e:	e7f4      	b.n	800b1fa <__swsetup_r+0x92>
 800b210:	2000      	movs	r0, #0
 800b212:	e7f7      	b.n	800b204 <__swsetup_r+0x9c>
 800b214:	20000184 	.word	0x20000184

0800b218 <_sbrk_r>:
 800b218:	b538      	push	{r3, r4, r5, lr}
 800b21a:	4d06      	ldr	r5, [pc, #24]	; (800b234 <_sbrk_r+0x1c>)
 800b21c:	2300      	movs	r3, #0
 800b21e:	4604      	mov	r4, r0
 800b220:	4608      	mov	r0, r1
 800b222:	602b      	str	r3, [r5, #0]
 800b224:	f7f6 fba8 	bl	8001978 <_sbrk>
 800b228:	1c43      	adds	r3, r0, #1
 800b22a:	d102      	bne.n	800b232 <_sbrk_r+0x1a>
 800b22c:	682b      	ldr	r3, [r5, #0]
 800b22e:	b103      	cbz	r3, 800b232 <_sbrk_r+0x1a>
 800b230:	6023      	str	r3, [r4, #0]
 800b232:	bd38      	pop	{r3, r4, r5, pc}
 800b234:	20000f5c 	.word	0x20000f5c

0800b238 <__swhatbuf_r>:
 800b238:	b570      	push	{r4, r5, r6, lr}
 800b23a:	460c      	mov	r4, r1
 800b23c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b240:	2900      	cmp	r1, #0
 800b242:	b096      	sub	sp, #88	; 0x58
 800b244:	4615      	mov	r5, r2
 800b246:	461e      	mov	r6, r3
 800b248:	da0d      	bge.n	800b266 <__swhatbuf_r+0x2e>
 800b24a:	89a3      	ldrh	r3, [r4, #12]
 800b24c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b250:	f04f 0100 	mov.w	r1, #0
 800b254:	bf0c      	ite	eq
 800b256:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b25a:	2340      	movne	r3, #64	; 0x40
 800b25c:	2000      	movs	r0, #0
 800b25e:	6031      	str	r1, [r6, #0]
 800b260:	602b      	str	r3, [r5, #0]
 800b262:	b016      	add	sp, #88	; 0x58
 800b264:	bd70      	pop	{r4, r5, r6, pc}
 800b266:	466a      	mov	r2, sp
 800b268:	f000 f848 	bl	800b2fc <_fstat_r>
 800b26c:	2800      	cmp	r0, #0
 800b26e:	dbec      	blt.n	800b24a <__swhatbuf_r+0x12>
 800b270:	9901      	ldr	r1, [sp, #4]
 800b272:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b276:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b27a:	4259      	negs	r1, r3
 800b27c:	4159      	adcs	r1, r3
 800b27e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b282:	e7eb      	b.n	800b25c <__swhatbuf_r+0x24>

0800b284 <__smakebuf_r>:
 800b284:	898b      	ldrh	r3, [r1, #12]
 800b286:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b288:	079d      	lsls	r5, r3, #30
 800b28a:	4606      	mov	r6, r0
 800b28c:	460c      	mov	r4, r1
 800b28e:	d507      	bpl.n	800b2a0 <__smakebuf_r+0x1c>
 800b290:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b294:	6023      	str	r3, [r4, #0]
 800b296:	6123      	str	r3, [r4, #16]
 800b298:	2301      	movs	r3, #1
 800b29a:	6163      	str	r3, [r4, #20]
 800b29c:	b002      	add	sp, #8
 800b29e:	bd70      	pop	{r4, r5, r6, pc}
 800b2a0:	ab01      	add	r3, sp, #4
 800b2a2:	466a      	mov	r2, sp
 800b2a4:	f7ff ffc8 	bl	800b238 <__swhatbuf_r>
 800b2a8:	9900      	ldr	r1, [sp, #0]
 800b2aa:	4605      	mov	r5, r0
 800b2ac:	4630      	mov	r0, r6
 800b2ae:	f7ff fb0f 	bl	800a8d0 <_malloc_r>
 800b2b2:	b948      	cbnz	r0, 800b2c8 <__smakebuf_r+0x44>
 800b2b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2b8:	059a      	lsls	r2, r3, #22
 800b2ba:	d4ef      	bmi.n	800b29c <__smakebuf_r+0x18>
 800b2bc:	f023 0303 	bic.w	r3, r3, #3
 800b2c0:	f043 0302 	orr.w	r3, r3, #2
 800b2c4:	81a3      	strh	r3, [r4, #12]
 800b2c6:	e7e3      	b.n	800b290 <__smakebuf_r+0xc>
 800b2c8:	89a3      	ldrh	r3, [r4, #12]
 800b2ca:	6020      	str	r0, [r4, #0]
 800b2cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2d0:	81a3      	strh	r3, [r4, #12]
 800b2d2:	9b00      	ldr	r3, [sp, #0]
 800b2d4:	6163      	str	r3, [r4, #20]
 800b2d6:	9b01      	ldr	r3, [sp, #4]
 800b2d8:	6120      	str	r0, [r4, #16]
 800b2da:	b15b      	cbz	r3, 800b2f4 <__smakebuf_r+0x70>
 800b2dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	f000 f81d 	bl	800b320 <_isatty_r>
 800b2e6:	b128      	cbz	r0, 800b2f4 <__smakebuf_r+0x70>
 800b2e8:	89a3      	ldrh	r3, [r4, #12]
 800b2ea:	f023 0303 	bic.w	r3, r3, #3
 800b2ee:	f043 0301 	orr.w	r3, r3, #1
 800b2f2:	81a3      	strh	r3, [r4, #12]
 800b2f4:	89a3      	ldrh	r3, [r4, #12]
 800b2f6:	431d      	orrs	r5, r3
 800b2f8:	81a5      	strh	r5, [r4, #12]
 800b2fa:	e7cf      	b.n	800b29c <__smakebuf_r+0x18>

0800b2fc <_fstat_r>:
 800b2fc:	b538      	push	{r3, r4, r5, lr}
 800b2fe:	4d07      	ldr	r5, [pc, #28]	; (800b31c <_fstat_r+0x20>)
 800b300:	2300      	movs	r3, #0
 800b302:	4604      	mov	r4, r0
 800b304:	4608      	mov	r0, r1
 800b306:	4611      	mov	r1, r2
 800b308:	602b      	str	r3, [r5, #0]
 800b30a:	f7f6 fb0c 	bl	8001926 <_fstat>
 800b30e:	1c43      	adds	r3, r0, #1
 800b310:	d102      	bne.n	800b318 <_fstat_r+0x1c>
 800b312:	682b      	ldr	r3, [r5, #0]
 800b314:	b103      	cbz	r3, 800b318 <_fstat_r+0x1c>
 800b316:	6023      	str	r3, [r4, #0]
 800b318:	bd38      	pop	{r3, r4, r5, pc}
 800b31a:	bf00      	nop
 800b31c:	20000f5c 	.word	0x20000f5c

0800b320 <_isatty_r>:
 800b320:	b538      	push	{r3, r4, r5, lr}
 800b322:	4d06      	ldr	r5, [pc, #24]	; (800b33c <_isatty_r+0x1c>)
 800b324:	2300      	movs	r3, #0
 800b326:	4604      	mov	r4, r0
 800b328:	4608      	mov	r0, r1
 800b32a:	602b      	str	r3, [r5, #0]
 800b32c:	f7f6 fb0b 	bl	8001946 <_isatty>
 800b330:	1c43      	adds	r3, r0, #1
 800b332:	d102      	bne.n	800b33a <_isatty_r+0x1a>
 800b334:	682b      	ldr	r3, [r5, #0]
 800b336:	b103      	cbz	r3, 800b33a <_isatty_r+0x1a>
 800b338:	6023      	str	r3, [r4, #0]
 800b33a:	bd38      	pop	{r3, r4, r5, pc}
 800b33c:	20000f5c 	.word	0x20000f5c

0800b340 <_init>:
 800b340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b342:	bf00      	nop
 800b344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b346:	bc08      	pop	{r3}
 800b348:	469e      	mov	lr, r3
 800b34a:	4770      	bx	lr

0800b34c <_fini>:
 800b34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b34e:	bf00      	nop
 800b350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b352:	bc08      	pop	{r3}
 800b354:	469e      	mov	lr, r3
 800b356:	4770      	bx	lr
